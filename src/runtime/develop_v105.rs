#[allow(clippy::all)]
#[allow(dead_code, unused_imports, non_camel_case_types)]
pub mod api {
    use super::api as root_mod;
    pub static PALLETS: [&str; 33usize] = [
        "System",
        "Babe",
        "Timestamp",
        "Authorship",
        "Balances",
        "DeipBalances",
        "TransactionPayment",
        "OctopusAppchain",
        "OctopusLpos",
        "OctopusUpwardMessages",
        "Session",
        "Grandpa",
        "Sudo",
        "ImOnline",
        "Historical",
        "RandomnessCollectiveFlip",
        "Assets",
        "Uniques",
        "Mmr",
        "Beefy",
        "MmrLeaf",
        "Multisig",
        "Utility",
        "Deip",
        "DeipProposal",
        "DeipDao",
        "DeipPortal",
        "DeipVesting",
        "DeipEcosystemFund",
        "DeipInvestmentOpportunity",
        "DeipFNFT",
        "DeipAssets",
        "DeipUniques",
    ];
    #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
    pub enum Event {
        #[codec(index = 0)]
        System(system::Event),
        #[codec(index = 4)]
        Balances(balances::Event),
        #[codec(index = 7)]
        OctopusAppchain(octopus_appchain::Event),
        #[codec(index = 8)]
        OctopusLpos(octopus_lpos::Event),
        #[codec(index = 9)]
        OctopusUpwardMessages(octopus_upward_messages::Event),
        #[codec(index = 10)]
        Session(session::Event),
        #[codec(index = 11)]
        Grandpa(grandpa::Event),
        #[codec(index = 12)]
        Sudo(sudo::Event),
        #[codec(index = 13)]
        ImOnline(im_online::Event),
        #[codec(index = 16)]
        Assets(assets::Event),
        #[codec(index = 17)]
        Uniques(uniques::Event),
        #[codec(index = 21)]
        Multisig(multisig::Event),
        #[codec(index = 22)]
        Utility(utility::Event),
        #[codec(index = 23)]
        Deip(deip::Event),
        #[codec(index = 24)]
        DeipProposal(deip_proposal::Event),
        #[codec(index = 25)]
        DeipDao(deip_dao::Event),
        #[codec(index = 27)]
        DeipVesting(deip_vesting::Event),
        #[codec(index = 29)]
        DeipInvestmentOpportunity(deip_investment_opportunity::Event),
        #[codec(index = 30)]
        DeipFNFT(deip_fnft::Event),
    }
    pub mod system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct FillBlock {
                pub ratio: runtime_types::sp_arithmetic::per_things::Perbill,
            }
            impl ::subxt::Call for FillBlock {
                const PALLET: &'static str = "System";
                const FUNCTION: &'static str = "fill_block";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Remark {
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::Call for Remark {
                const PALLET: &'static str = "System";
                const FUNCTION: &'static str = "remark";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            pub struct SetHeapPages {
                pub pages: ::core::primitive::u64,
            }
            impl ::subxt::Call for SetHeapPages {
                const PALLET: &'static str = "System";
                const FUNCTION: &'static str = "set_heap_pages";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SetCode {
                pub code: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::Call for SetCode {
                const PALLET: &'static str = "System";
                const FUNCTION: &'static str = "set_code";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SetCodeWithoutChecks {
                pub code: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::Call for SetCodeWithoutChecks {
                const PALLET: &'static str = "System";
                const FUNCTION: &'static str = "set_code_without_checks";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SetStorage {
                pub items: ::std::vec::Vec<(
                    ::std::vec::Vec<::core::primitive::u8>,
                    ::std::vec::Vec<::core::primitive::u8>,
                )>,
            }
            impl ::subxt::Call for SetStorage {
                const PALLET: &'static str = "System";
                const FUNCTION: &'static str = "set_storage";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct KillStorage {
                pub keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
            }
            impl ::subxt::Call for KillStorage {
                const PALLET: &'static str = "System";
                const FUNCTION: &'static str = "kill_storage";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct KillPrefix {
                pub prefix: ::std::vec::Vec<::core::primitive::u8>,
                pub subkeys: ::core::primitive::u32,
            }
            impl ::subxt::Call for KillPrefix {
                const PALLET: &'static str = "System";
                const FUNCTION: &'static str = "kill_prefix";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct RemarkWithEvent {
                pub remark: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::Call for RemarkWithEvent {
                const PALLET: &'static str = "System";
                const FUNCTION: &'static str = "remark_with_event";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "A dispatch that will fill the block weight up to the given ratio."]
                pub fn fill_block(
                    &self,
                    ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        FillBlock,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<FillBlock>()?
                    };
                    if runtime_call_hash
                        == [
                            228u8, 117u8, 251u8, 95u8, 47u8, 56u8, 32u8, 177u8, 191u8, 72u8, 75u8,
                            23u8, 193u8, 175u8, 227u8, 218u8, 127u8, 94u8, 114u8, 110u8, 215u8,
                            61u8, 162u8, 102u8, 73u8, 89u8, 218u8, 148u8, 59u8, 73u8, 59u8, 149u8,
                        ]
                    {
                        let call = FillBlock { ratio };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)`"]
                #[doc = "# </weight>"]
                pub fn remark(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Remark, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Remark>()?
                    };
                    if runtime_call_hash
                        == [
                            186u8, 79u8, 33u8, 199u8, 216u8, 115u8, 19u8, 146u8, 220u8, 174u8,
                            98u8, 61u8, 179u8, 230u8, 40u8, 70u8, 22u8, 251u8, 77u8, 62u8, 133u8,
                            80u8, 186u8, 70u8, 135u8, 172u8, 178u8, 241u8, 69u8, 106u8, 235u8,
                            140u8,
                        ]
                    {
                        let call = Remark { remark };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub fn set_heap_pages(
                    &self,
                    pages: ::core::primitive::u64,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SetHeapPages,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SetHeapPages>()?
                    };
                    if runtime_call_hash
                        == [
                            77u8, 138u8, 122u8, 55u8, 179u8, 101u8, 60u8, 137u8, 173u8, 39u8, 28u8,
                            36u8, 237u8, 243u8, 232u8, 162u8, 76u8, 176u8, 135u8, 58u8, 60u8,
                            177u8, 105u8, 136u8, 94u8, 53u8, 26u8, 31u8, 41u8, 156u8, 228u8, 241u8,
                        ]
                    {
                        let call = SetHeapPages { pages };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Set the new runtime code."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
                #[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
                #[doc = "  expensive)."]
                #[doc = "- 1 storage write (codec `O(C)`)."]
                #[doc = "- 1 digest item."]
                #[doc = "- 1 event."]
                #[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
                #[doc = "expensive. We will treat this as a full block."]
                #[doc = "# </weight>"]
                pub fn set_code(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SetCode,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SetCode>()?
                    };
                    if runtime_call_hash
                        == [
                            35u8, 75u8, 103u8, 203u8, 91u8, 141u8, 77u8, 95u8, 37u8, 157u8, 107u8,
                            240u8, 54u8, 242u8, 245u8, 205u8, 104u8, 165u8, 177u8, 37u8, 86u8,
                            197u8, 28u8, 202u8, 121u8, 159u8, 18u8, 204u8, 237u8, 117u8, 141u8,
                            131u8,
                        ]
                    {
                        let call = SetCode { code };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(C)` where `C` length of `code`"]
                #[doc = "- 1 storage write (codec `O(C)`)."]
                #[doc = "- 1 digest item."]
                #[doc = "- 1 event."]
                #[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
                #[doc = "block. # </weight>"]
                pub fn set_code_without_checks(
                    &self,
                    code: ::std::vec::Vec<::core::primitive::u8>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SetCodeWithoutChecks,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SetCodeWithoutChecks>()?
                    };
                    if runtime_call_hash
                        == [
                            150u8, 148u8, 119u8, 129u8, 77u8, 216u8, 135u8, 187u8, 127u8, 24u8,
                            238u8, 15u8, 227u8, 229u8, 191u8, 217u8, 106u8, 129u8, 149u8, 79u8,
                            154u8, 78u8, 53u8, 159u8, 89u8, 69u8, 103u8, 197u8, 93u8, 161u8, 134u8,
                            17u8,
                        ]
                    {
                        let call = SetCodeWithoutChecks { code };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Set some items of storage."]
                pub fn set_storage(
                    &self,
                    items: ::std::vec::Vec<(
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::std::vec::Vec<::core::primitive::u8>,
                    )>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SetStorage,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SetStorage>()?
                    };
                    if runtime_call_hash
                        == [
                            197u8, 12u8, 119u8, 205u8, 152u8, 103u8, 211u8, 170u8, 146u8, 253u8,
                            25u8, 56u8, 180u8, 146u8, 74u8, 75u8, 38u8, 108u8, 212u8, 154u8, 23u8,
                            22u8, 148u8, 175u8, 107u8, 186u8, 222u8, 13u8, 149u8, 132u8, 204u8,
                            217u8,
                        ]
                    {
                        let call = SetStorage { items };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Kill some items from storage."]
                pub fn kill_storage(
                    &self,
                    keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        KillStorage,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<KillStorage>()?
                    };
                    if runtime_call_hash
                        == [
                            154u8, 115u8, 185u8, 20u8, 126u8, 90u8, 222u8, 131u8, 199u8, 57u8,
                            184u8, 226u8, 43u8, 245u8, 161u8, 176u8, 194u8, 123u8, 139u8, 97u8,
                            97u8, 94u8, 47u8, 64u8, 204u8, 96u8, 190u8, 94u8, 216u8, 237u8, 69u8,
                            51u8,
                        ]
                    {
                        let call = KillStorage { keys };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub fn kill_prefix(
                    &self,
                    prefix: ::std::vec::Vec<::core::primitive::u8>,
                    subkeys: ::core::primitive::u32,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        KillPrefix,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<KillPrefix>()?
                    };
                    if runtime_call_hash
                        == [
                            214u8, 101u8, 191u8, 241u8, 1u8, 241u8, 144u8, 116u8, 246u8, 199u8,
                            159u8, 249u8, 155u8, 164u8, 220u8, 221u8, 75u8, 33u8, 204u8, 3u8,
                            255u8, 201u8, 187u8, 238u8, 181u8, 213u8, 41u8, 105u8, 234u8, 120u8,
                            202u8, 115u8,
                        ]
                    {
                        let call = KillPrefix { prefix, subkeys };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Make some on-chain remark and emit event."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(b)` where b is the length of the remark."]
                #[doc = "- 1 event."]
                #[doc = "# </weight>"]
                pub fn remark_with_event(
                    &self,
                    remark: ::std::vec::Vec<::core::primitive::u8>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        RemarkWithEvent,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<RemarkWithEvent>()?
                    };
                    if runtime_call_hash
                        == [
                            171u8, 82u8, 75u8, 237u8, 69u8, 197u8, 223u8, 125u8, 123u8, 51u8,
                            241u8, 35u8, 202u8, 210u8, 227u8, 109u8, 1u8, 241u8, 255u8, 63u8, 33u8,
                            115u8, 156u8, 239u8, 97u8, 76u8, 193u8, 35u8, 74u8, 199u8, 43u8, 255u8,
                        ]
                    {
                        let call = RemarkWithEvent { remark };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "Event for the System pallet."]
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An extrinsic completed successfully. \\[info\\]"]
            pub struct ExtrinsicSuccess(pub runtime_types::frame_support::weights::DispatchInfo);
            impl ::subxt::Event for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An extrinsic failed. \\[error, info\\]"]
            pub struct ExtrinsicFailed(
                pub runtime_types::sp_runtime::DispatchError,
                pub runtime_types::frame_support::weights::DispatchInfo,
            );
            impl ::subxt::Event for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "`:code` was updated."]
            pub struct CodeUpdated;
            impl ::subxt::Event for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A new \\[account\\] was created."]
            pub struct NewAccount(pub ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::Event for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An \\[account\\] was reaped."]
            pub struct KilledAccount(pub ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::Event for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "On on-chain remark happened. \\[origin, remark_hash\\]"]
            pub struct Remarked(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub ::subxt::sp_core::H256,
            );
            impl ::subxt::Event for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct Account<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::StorageEntry for Account<'_> {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "Account";
                type Value = runtime_types::frame_system::AccountInfo<
                    ::core::primitive::u32,
                    runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ExtrinsicCount;
            impl ::subxt::StorageEntry for ExtrinsicCount {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "ExtrinsicCount";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct BlockWeight;
            impl ::subxt::StorageEntry for BlockWeight {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "BlockWeight";
                type Value =
                    runtime_types::frame_support::weights::PerDispatchClass<::core::primitive::u64>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct AllExtrinsicsLen;
            impl ::subxt::StorageEntry for AllExtrinsicsLen {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "AllExtrinsicsLen";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct BlockHash<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for BlockHash<'_> {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "BlockHash";
                type Value = ::subxt::sp_core::H256;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct ExtrinsicData<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for ExtrinsicData<'_> {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "ExtrinsicData";
                type Value = ::std::vec::Vec<::core::primitive::u8>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct Number;
            impl ::subxt::StorageEntry for Number {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "Number";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct ParentHash;
            impl ::subxt::StorageEntry for ParentHash {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "ParentHash";
                type Value = ::subxt::sp_core::H256;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Digest;
            impl ::subxt::StorageEntry for Digest {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "Digest";
                type Value = runtime_types::sp_runtime::generic::digest::Digest;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Events;
            impl ::subxt::StorageEntry for Events {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "Events";
                type Value = ::std::vec::Vec<
                    runtime_types::frame_system::EventRecord<
                        runtime_types::appchain_deip_runtime::Event,
                        ::subxt::sp_core::H256,
                    >,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct EventCount;
            impl ::subxt::StorageEntry for EventCount {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "EventCount";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct EventTopics<'a>(pub &'a ::subxt::sp_core::H256);
            impl ::subxt::StorageEntry for EventTopics<'_> {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "EventTopics";
                type Value = ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct LastRuntimeUpgrade;
            impl ::subxt::StorageEntry for LastRuntimeUpgrade {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "LastRuntimeUpgrade";
                type Value = runtime_types::frame_system::LastRuntimeUpgradeInfo;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct UpgradedToU32RefCount;
            impl ::subxt::StorageEntry for UpgradedToU32RefCount {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "UpgradedToU32RefCount";
                type Value = ::core::primitive::bool;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct UpgradedToTripleRefCount;
            impl ::subxt::StorageEntry for UpgradedToTripleRefCount {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "UpgradedToTripleRefCount";
                type Value = ::core::primitive::bool;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct ExecutionPhase;
            impl ::subxt::StorageEntry for ExecutionPhase {
                const PALLET: &'static str = "System";
                const STORAGE: &'static str = "ExecutionPhase";
                type Value = runtime_types::frame_system::Phase;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The full account information for a particular account ID."]
                pub fn account(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::frame_system::AccountInfo<
                            ::core::primitive::u32,
                            runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Account>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                224u8, 184u8, 2u8, 14u8, 38u8, 177u8, 223u8, 98u8, 223u8, 15u8,
                                130u8, 23u8, 212u8, 69u8, 61u8, 165u8, 171u8, 61u8, 171u8, 57u8,
                                88u8, 71u8, 168u8, 172u8, 54u8, 91u8, 109u8, 231u8, 169u8, 167u8,
                                195u8, 46u8,
                            ]
                        {
                            let entry = Account(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The full account information for a particular account ID."]
                pub fn account_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Account<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Account>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                224u8, 184u8, 2u8, 14u8, 38u8, 177u8, 223u8, 98u8, 223u8, 15u8,
                                130u8, 23u8, 212u8, 69u8, 61u8, 165u8, 171u8, 61u8, 171u8, 57u8,
                                88u8, 71u8, 168u8, 172u8, 54u8, 91u8, 109u8, 231u8, 169u8, 167u8,
                                195u8, 46u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Total extrinsics count for the current block."]
                pub fn extrinsic_count(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::core::primitive::u32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ExtrinsicCount>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                223u8, 60u8, 201u8, 120u8, 36u8, 44u8, 180u8, 210u8, 242u8, 53u8,
                                222u8, 154u8, 123u8, 176u8, 249u8, 8u8, 225u8, 28u8, 232u8, 4u8,
                                136u8, 41u8, 151u8, 82u8, 189u8, 149u8, 49u8, 166u8, 139u8, 9u8,
                                163u8, 231u8,
                            ]
                        {
                            let entry = ExtrinsicCount;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The current weight for the block."]
                pub fn block_weight(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::frame_support::weights::PerDispatchClass<
                            ::core::primitive::u64,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<BlockWeight>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                2u8, 236u8, 190u8, 174u8, 244u8, 98u8, 194u8, 168u8, 89u8, 208u8,
                                7u8, 45u8, 175u8, 171u8, 177u8, 121u8, 215u8, 190u8, 184u8, 195u8,
                                49u8, 133u8, 44u8, 1u8, 181u8, 215u8, 89u8, 84u8, 255u8, 16u8,
                                57u8, 152u8,
                            ]
                        {
                            let entry = BlockWeight;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
                pub fn all_extrinsics_len(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::core::primitive::u32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<AllExtrinsicsLen>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                202u8, 145u8, 209u8, 225u8, 40u8, 220u8, 174u8, 74u8, 93u8, 164u8,
                                254u8, 248u8, 254u8, 192u8, 32u8, 117u8, 96u8, 149u8, 53u8, 145u8,
                                219u8, 64u8, 234u8, 18u8, 217u8, 200u8, 203u8, 141u8, 145u8, 28u8,
                                134u8, 60u8,
                            ]
                        {
                            let entry = AllExtrinsicsLen;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::subxt::sp_core::H256, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<BlockHash>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                24u8, 99u8, 146u8, 142u8, 205u8, 166u8, 4u8, 32u8, 218u8, 213u8,
                                24u8, 236u8, 45u8, 116u8, 145u8, 204u8, 27u8, 141u8, 169u8, 249u8,
                                111u8, 141u8, 37u8, 136u8, 45u8, 73u8, 167u8, 217u8, 118u8, 206u8,
                                246u8, 120u8,
                            ]
                        {
                            let entry = BlockHash(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, BlockHash<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<BlockHash>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                24u8, 99u8, 146u8, 142u8, 205u8, 166u8, 4u8, 32u8, 218u8, 213u8,
                                24u8, 236u8, 45u8, 116u8, 145u8, 204u8, 27u8, 141u8, 169u8, 249u8,
                                111u8, 141u8, 37u8, 136u8, 45u8, 73u8, 167u8, 217u8, 118u8, 206u8,
                                246u8, 120u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ExtrinsicData>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8,
                                211u8, 254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8,
                                23u8, 241u8, 59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8,
                                62u8, 50u8, 67u8,
                            ]
                        {
                            let entry = ExtrinsicData(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ExtrinsicData<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ExtrinsicData>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                210u8, 224u8, 211u8, 186u8, 118u8, 210u8, 185u8, 194u8, 238u8,
                                211u8, 254u8, 73u8, 67u8, 184u8, 31u8, 229u8, 168u8, 125u8, 98u8,
                                23u8, 241u8, 59u8, 49u8, 86u8, 126u8, 9u8, 114u8, 163u8, 160u8,
                                62u8, 50u8, 67u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The current block number being processed. Set by `execute_block`."]
                pub fn number(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Number>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                228u8, 96u8, 102u8, 190u8, 252u8, 130u8, 239u8, 172u8, 126u8,
                                235u8, 246u8, 139u8, 208u8, 15u8, 88u8, 245u8, 141u8, 232u8, 43u8,
                                204u8, 36u8, 87u8, 211u8, 141u8, 187u8, 68u8, 236u8, 70u8, 193u8,
                                235u8, 164u8, 191u8,
                            ]
                        {
                            let entry = Number;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Hash of the previous block."]
                pub fn parent_hash(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::subxt::sp_core::H256, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ParentHash>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                194u8, 221u8, 147u8, 22u8, 68u8, 141u8, 32u8, 6u8, 202u8, 39u8,
                                164u8, 184u8, 69u8, 126u8, 190u8, 101u8, 215u8, 27u8, 127u8, 157u8,
                                200u8, 69u8, 170u8, 139u8, 232u8, 27u8, 254u8, 181u8, 183u8, 105u8,
                                111u8, 177u8,
                            ]
                        {
                            let entry = ParentHash;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Digest of the current block, also part of the block header."]
                pub fn digest(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::sp_runtime::generic::digest::Digest,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Digest>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                10u8, 176u8, 13u8, 228u8, 226u8, 42u8, 210u8, 151u8, 107u8, 212u8,
                                136u8, 15u8, 38u8, 182u8, 225u8, 12u8, 250u8, 56u8, 193u8, 243u8,
                                219u8, 113u8, 95u8, 233u8, 21u8, 229u8, 125u8, 146u8, 92u8, 250u8,
                                32u8, 168u8,
                            ]
                        {
                            let entry = Digest;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Events deposited for the current block."]
                #[doc = ""]
                #[doc = " NOTE: This storage item is explicitly unbounded since it is never intended to be read"]
                #[doc = " from within the runtime."]
                pub fn events(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<
                            runtime_types::frame_system::EventRecord<
                                runtime_types::appchain_deip_runtime::Event,
                                ::subxt::sp_core::H256,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Events>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                141u8, 42u8, 205u8, 255u8, 16u8, 212u8, 64u8, 138u8, 100u8, 21u8,
                                234u8, 222u8, 152u8, 75u8, 4u8, 31u8, 226u8, 105u8, 216u8, 145u8,
                                186u8, 247u8, 86u8, 58u8, 103u8, 44u8, 51u8, 152u8, 233u8, 188u8,
                                66u8, 230u8,
                            ]
                        {
                            let entry = Events;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The number of events in the `Events<T>` list."]
                pub fn event_count(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<EventCount>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                236u8, 93u8, 90u8, 177u8, 250u8, 211u8, 138u8, 187u8, 26u8, 208u8,
                                203u8, 113u8, 221u8, 233u8, 227u8, 9u8, 249u8, 25u8, 202u8, 185u8,
                                161u8, 144u8, 167u8, 104u8, 127u8, 187u8, 38u8, 18u8, 52u8, 61u8,
                                66u8, 112u8,
                            ]
                        {
                            let entry = EventCount;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics(
                    &self,
                    _0: &'a ::subxt::sp_core::H256,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<EventTopics>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                231u8, 73u8, 172u8, 223u8, 210u8, 145u8, 151u8, 102u8, 73u8, 23u8,
                                140u8, 55u8, 97u8, 40u8, 219u8, 239u8, 229u8, 177u8, 72u8, 41u8,
                                93u8, 178u8, 7u8, 209u8, 57u8, 86u8, 153u8, 252u8, 86u8, 152u8,
                                245u8, 179u8,
                            ]
                        {
                            let entry = EventTopics(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(T::BlockNumber, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, EventTopics<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<EventTopics>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                231u8, 73u8, 172u8, 223u8, 210u8, 145u8, 151u8, 102u8, 73u8, 23u8,
                                140u8, 55u8, 97u8, 40u8, 219u8, 239u8, 229u8, 177u8, 72u8, 41u8,
                                93u8, 178u8, 7u8, 209u8, 57u8, 86u8, 153u8, 252u8, 86u8, 152u8,
                                245u8, 179u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
                pub fn last_runtime_upgrade(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<runtime_types::frame_system::LastRuntimeUpgradeInfo>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<LastRuntimeUpgrade>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                219u8, 153u8, 158u8, 38u8, 45u8, 65u8, 151u8, 137u8, 53u8, 76u8,
                                11u8, 181u8, 218u8, 248u8, 125u8, 190u8, 100u8, 240u8, 173u8, 75u8,
                                179u8, 137u8, 198u8, 197u8, 248u8, 185u8, 118u8, 58u8, 42u8, 165u8,
                                125u8, 119u8,
                            ]
                        {
                            let entry = LastRuntimeUpgrade;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
                pub fn upgraded_to_u32_ref_count(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<UpgradedToU32RefCount>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                171u8, 88u8, 244u8, 92u8, 122u8, 67u8, 27u8, 18u8, 59u8, 175u8,
                                175u8, 178u8, 20u8, 150u8, 213u8, 59u8, 222u8, 141u8, 32u8, 107u8,
                                3u8, 114u8, 83u8, 250u8, 180u8, 233u8, 152u8, 54u8, 187u8, 99u8,
                                131u8, 204u8,
                            ]
                        {
                            let entry = UpgradedToU32RefCount;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
                #[doc = " (default) if not."]
                pub fn upgraded_to_triple_ref_count(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<UpgradedToTripleRefCount>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                90u8, 33u8, 56u8, 86u8, 90u8, 101u8, 89u8, 133u8, 203u8, 56u8,
                                201u8, 210u8, 244u8, 232u8, 150u8, 18u8, 51u8, 105u8, 14u8, 230u8,
                                103u8, 155u8, 246u8, 99u8, 53u8, 207u8, 225u8, 128u8, 186u8, 76u8,
                                40u8, 185u8,
                            ]
                        {
                            let entry = UpgradedToTripleRefCount;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The execution phase of the block."]
                pub fn execution_phase(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<runtime_types::frame_system::Phase>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ExecutionPhase>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                174u8, 13u8, 230u8, 220u8, 239u8, 161u8, 172u8, 122u8, 188u8, 95u8,
                                141u8, 118u8, 91u8, 158u8, 111u8, 145u8, 243u8, 173u8, 226u8,
                                212u8, 187u8, 118u8, 94u8, 132u8, 221u8, 244u8, 61u8, 148u8, 217u8,
                                30u8, 238u8, 225u8,
                            ]
                        {
                            let entry = ExecutionPhase;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Block & extrinsics weights: base values and limits."]
                pub fn block_weights(
                    &self,
                ) -> ::core::result::Result<
                    runtime_types::frame_system::limits::BlockWeights,
                    ::subxt::BasicError,
                > {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("System", "BlockWeights")?
                        == [
                            49u8, 105u8, 160u8, 185u8, 41u8, 100u8, 26u8, 18u8, 154u8, 196u8,
                            108u8, 96u8, 36u8, 148u8, 28u8, 162u8, 92u8, 234u8, 89u8, 152u8, 149u8,
                            176u8, 186u8, 20u8, 217u8, 167u8, 59u8, 167u8, 106u8, 9u8, 205u8,
                            106u8,
                        ]
                    {
                        let pallet = metadata.pallet("System")?;
                        let constant = pallet.constant("BlockWeights")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The maximum length of a block (in bytes)."]
                pub fn block_length(
                    &self,
                ) -> ::core::result::Result<
                    runtime_types::frame_system::limits::BlockLength,
                    ::subxt::BasicError,
                > {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("System", "BlockLength")?
                        == [
                            120u8, 249u8, 182u8, 103u8, 246u8, 214u8, 149u8, 44u8, 42u8, 64u8, 2u8,
                            56u8, 157u8, 184u8, 43u8, 195u8, 214u8, 251u8, 207u8, 207u8, 249u8,
                            105u8, 203u8, 108u8, 179u8, 93u8, 93u8, 246u8, 40u8, 175u8, 160u8,
                            114u8,
                        ]
                    {
                        let pallet = metadata.pallet("System")?;
                        let constant = pallet.constant("BlockLength")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
                pub fn block_hash_count(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("System", "BlockHashCount")?
                        == [
                            123u8, 126u8, 182u8, 103u8, 71u8, 187u8, 233u8, 8u8, 47u8, 226u8,
                            159u8, 139u8, 0u8, 59u8, 190u8, 135u8, 189u8, 77u8, 190u8, 81u8, 39u8,
                            198u8, 224u8, 219u8, 70u8, 143u8, 6u8, 132u8, 196u8, 61u8, 117u8,
                            194u8,
                        ]
                    {
                        let pallet = metadata.pallet("System")?;
                        let constant = pallet.constant("BlockHashCount")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The weight of runtime database operations the runtime can invoke."]
                pub fn db_weight(
                    &self,
                ) -> ::core::result::Result<
                    runtime_types::frame_support::weights::RuntimeDbWeight,
                    ::subxt::BasicError,
                > {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("System", "DbWeight")?
                        == [
                            203u8, 8u8, 106u8, 152u8, 74u8, 132u8, 2u8, 132u8, 244u8, 106u8, 147u8,
                            12u8, 93u8, 80u8, 61u8, 158u8, 172u8, 178u8, 228u8, 125u8, 213u8,
                            102u8, 75u8, 210u8, 64u8, 185u8, 204u8, 84u8, 10u8, 164u8, 204u8, 62u8,
                        ]
                    {
                        let pallet = metadata.pallet("System")?;
                        let constant = pallet.constant("DbWeight")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " Get the chain's current version."]
                pub fn version(
                    &self,
                ) -> ::core::result::Result<
                    runtime_types::sp_version::RuntimeVersion,
                    ::subxt::BasicError,
                > {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("System", "Version")?
                        == [
                            5u8, 97u8, 6u8, 91u8, 212u8, 104u8, 59u8, 166u8, 33u8, 167u8, 186u8,
                            176u8, 156u8, 85u8, 67u8, 169u8, 143u8, 18u8, 190u8, 47u8, 193u8,
                            174u8, 188u8, 233u8, 111u8, 217u8, 186u8, 225u8, 71u8, 30u8, 93u8,
                            46u8,
                        ]
                    {
                        let pallet = metadata.pallet("System")?;
                        let constant = pallet.constant("Version")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The designated SS85 prefix of this chain."]
                #[doc = ""]
                #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
                #[doc = " that the runtime should know about the prefix in order to make use of it as"]
                #[doc = " an identifier of the chain."]
                pub fn ss58_prefix(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("System", "SS58Prefix")?
                        == [
                            197u8, 217u8, 49u8, 68u8, 82u8, 238u8, 120u8, 50u8, 91u8, 58u8, 6u8,
                            156u8, 40u8, 1u8, 241u8, 213u8, 141u8, 74u8, 83u8, 115u8, 117u8, 41u8,
                            119u8, 50u8, 140u8, 136u8, 163u8, 185u8, 34u8, 190u8, 60u8, 97u8,
                        ]
                    {
                        let pallet = metadata.pallet("System")?;
                        let constant = pallet.constant("SS58Prefix")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod babe {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ReportEquivocation {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            impl ::subxt::Call for ReportEquivocation {
                const PALLET: &'static str = "Babe";
                const FUNCTION: &'static str = "report_equivocation";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ReportEquivocationUnsigned {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            impl ::subxt::Call for ReportEquivocationUnsigned {
                const PALLET: &'static str = "Babe";
                const FUNCTION: &'static str = "report_equivocation_unsigned";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct PlanConfigChange {
                pub config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
            }
            impl ::subxt::Call for PlanConfigChange {
                const PALLET: &'static str = "Babe";
                const FUNCTION: &'static str = "plan_config_change";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Report authority equivocation/misbehavior. This method will verify"]
                #[doc = "the equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence will"]
                #[doc = "be reported."]
                pub fn report_equivocation(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ReportEquivocation,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ReportEquivocation>()?
                    };
                    if runtime_call_hash
                        == [
                            123u8, 212u8, 216u8, 77u8, 79u8, 132u8, 201u8, 155u8, 166u8, 230u8,
                            50u8, 89u8, 98u8, 68u8, 56u8, 213u8, 206u8, 245u8, 91u8, 104u8, 89u8,
                            189u8, 57u8, 38u8, 127u8, 22u8, 47u8, 206u8, 142u8, 202u8, 106u8,
                            154u8,
                        ]
                    {
                        let call = ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Report authority equivocation/misbehavior. This method will verify"]
                #[doc = "the equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence will"]
                #[doc = "be reported."]
                #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                #[doc = "if the block author is defined it will be defined as the equivocation"]
                #[doc = "reporter."]
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof: runtime_types::sp_consensus_slots::EquivocationProof<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                        runtime_types::sp_consensus_babe::app::Public,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ReportEquivocationUnsigned,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ReportEquivocationUnsigned>()?
                    };
                    if runtime_call_hash
                        == [
                            32u8, 163u8, 168u8, 251u8, 251u8, 9u8, 1u8, 195u8, 173u8, 32u8, 235u8,
                            125u8, 141u8, 201u8, 130u8, 207u8, 239u8, 76u8, 150u8, 99u8, 74u8,
                            193u8, 60u8, 165u8, 93u8, 49u8, 95u8, 224u8, 217u8, 243u8, 117u8,
                            173u8,
                        ]
                    {
                        let call = ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Plan an epoch config change. The epoch config change is recorded and will be enacted on"]
                #[doc = "the next call to `enact_epoch_change`. The config will be activated one epoch after."]
                #[doc = "Multiple calls to this method will replace any existing planned config change that had"]
                #[doc = "not been enacted yet."]
                pub fn plan_config_change(
                    &self,
                    config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        PlanConfigChange,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<PlanConfigChange>()?
                    };
                    if runtime_call_hash
                        == [
                            215u8, 121u8, 90u8, 87u8, 178u8, 247u8, 114u8, 53u8, 174u8, 28u8, 20u8,
                            33u8, 139u8, 216u8, 13u8, 187u8, 74u8, 198u8, 38u8, 28u8, 175u8, 13u8,
                            73u8, 132u8, 103u8, 78u8, 217u8, 207u8, 113u8, 169u8, 42u8, 103u8,
                        ]
                    {
                        let call = PlanConfigChange { config };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct EpochIndex;
            impl ::subxt::StorageEntry for EpochIndex {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "EpochIndex";
                type Value = ::core::primitive::u64;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Authorities;
            impl ::subxt::StorageEntry for Authorities {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "Authorities";
                type Value =
                    runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_consensus_babe::app::Public,
                        ::core::primitive::u64,
                    )>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct GenesisSlot;
            impl ::subxt::StorageEntry for GenesisSlot {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "GenesisSlot";
                type Value = runtime_types::sp_consensus_slots::Slot;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct CurrentSlot;
            impl ::subxt::StorageEntry for CurrentSlot {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "CurrentSlot";
                type Value = runtime_types::sp_consensus_slots::Slot;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Randomness;
            impl ::subxt::StorageEntry for Randomness {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "Randomness";
                type Value = [::core::primitive::u8; 32usize];
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct PendingEpochConfigChange;
            impl ::subxt::StorageEntry for PendingEpochConfigChange {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "PendingEpochConfigChange";
                type Value = runtime_types::sp_consensus_babe::digests::NextConfigDescriptor;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NextRandomness;
            impl ::subxt::StorageEntry for NextRandomness {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "NextRandomness";
                type Value = [::core::primitive::u8; 32usize];
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NextAuthorities;
            impl ::subxt::StorageEntry for NextAuthorities {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "NextAuthorities";
                type Value =
                    runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_consensus_babe::app::Public,
                        ::core::primitive::u64,
                    )>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct SegmentIndex;
            impl ::subxt::StorageEntry for SegmentIndex {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "SegmentIndex";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct UnderConstruction<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for UnderConstruction<'_> {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "UnderConstruction";
                type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                    [::core::primitive::u8; 32usize],
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct Initialized;
            impl ::subxt::StorageEntry for Initialized {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "Initialized";
                type Value = ::core::option::Option<[::core::primitive::u8; 32usize]>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct AuthorVrfRandomness;
            impl ::subxt::StorageEntry for AuthorVrfRandomness {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "AuthorVrfRandomness";
                type Value = ::core::option::Option<[::core::primitive::u8; 32usize]>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct EpochStart;
            impl ::subxt::StorageEntry for EpochStart {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "EpochStart";
                type Value = (::core::primitive::u32, ::core::primitive::u32);
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Lateness;
            impl ::subxt::StorageEntry for Lateness {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "Lateness";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct EpochConfig;
            impl ::subxt::StorageEntry for EpochConfig {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "EpochConfig";
                type Value = runtime_types::sp_consensus_babe::BabeEpochConfiguration;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NextEpochConfig;
            impl ::subxt::StorageEntry for NextEpochConfig {
                const PALLET: &'static str = "Babe";
                const STORAGE: &'static str = "NextEpochConfig";
                type Value = runtime_types::sp_consensus_babe::BabeEpochConfiguration;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Current epoch index."]
                pub fn epoch_index(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<EpochIndex>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                51u8, 27u8, 91u8, 156u8, 118u8, 99u8, 46u8, 219u8, 190u8, 147u8,
                                205u8, 23u8, 106u8, 169u8, 121u8, 218u8, 208u8, 235u8, 135u8,
                                127u8, 243u8, 41u8, 55u8, 243u8, 235u8, 122u8, 57u8, 86u8, 37u8,
                                90u8, 208u8, 71u8,
                            ]
                        {
                            let entry = EpochIndex;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Current epoch authorities."]
                pub fn authorities(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
                            runtime_types::sp_consensus_babe::app::Public,
                            ::core::primitive::u64,
                        )>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Authorities>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                39u8, 102u8, 251u8, 125u8, 230u8, 247u8, 174u8, 255u8, 2u8, 81u8,
                                86u8, 69u8, 182u8, 92u8, 191u8, 163u8, 66u8, 181u8, 247u8, 9u8,
                                57u8, 154u8, 239u8, 34u8, 25u8, 139u8, 119u8, 4u8, 131u8, 124u8,
                                135u8, 240u8,
                            ]
                        {
                            let entry = Authorities;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The slot at which the first epoch actually started. This is 0"]
                #[doc = " until the first block of the chain."]
                pub fn genesis_slot(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::sp_consensus_slots::Slot,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<GenesisSlot>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                136u8, 244u8, 7u8, 142u8, 224u8, 33u8, 144u8, 186u8, 155u8, 144u8,
                                68u8, 81u8, 241u8, 57u8, 40u8, 207u8, 35u8, 39u8, 28u8, 41u8,
                                210u8, 213u8, 53u8, 195u8, 175u8, 119u8, 6u8, 175u8, 100u8, 192u8,
                                180u8, 73u8,
                            ]
                        {
                            let entry = GenesisSlot;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Current slot number."]
                pub fn current_slot(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::sp_consensus_slots::Slot,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<CurrentSlot>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                233u8, 102u8, 77u8, 99u8, 103u8, 50u8, 151u8, 229u8, 46u8, 226u8,
                                181u8, 37u8, 117u8, 204u8, 234u8, 120u8, 116u8, 166u8, 80u8, 188u8,
                                92u8, 154u8, 137u8, 150u8, 79u8, 164u8, 29u8, 203u8, 2u8, 51u8,
                                123u8, 104u8,
                            ]
                        {
                            let entry = CurrentSlot;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The epoch randomness for the *current* epoch."]
                #[doc = ""]
                #[doc = " # Security"]
                #[doc = ""]
                #[doc = " This MUST NOT be used for gambling, as it can be influenced by a"]
                #[doc = " malicious validator in the short term. It MAY be used in many"]
                #[doc = " cryptographic protocols, however, so long as one remembers that this"]
                #[doc = " (like everything else on-chain) it is public. For example, it can be"]
                #[doc = " used where a number is needed that cannot have been chosen by an"]
                #[doc = " adversary, for purposes such as public-coin zero-knowledge proofs."]
                pub fn randomness(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        [::core::primitive::u8; 32usize],
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Randomness>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                191u8, 197u8, 25u8, 164u8, 104u8, 248u8, 247u8, 193u8, 244u8, 60u8,
                                181u8, 195u8, 248u8, 90u8, 41u8, 199u8, 82u8, 123u8, 72u8, 126u8,
                                18u8, 17u8, 128u8, 215u8, 34u8, 251u8, 227u8, 70u8, 166u8, 10u8,
                                104u8, 140u8,
                            ]
                        {
                            let entry = Randomness;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Pending epoch configuration change that will be applied when the next epoch is enacted."]
                pub fn pending_epoch_config_change(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PendingEpochConfigChange>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                98u8, 52u8, 22u8, 32u8, 76u8, 196u8, 89u8, 78u8, 119u8, 181u8,
                                17u8, 49u8, 220u8, 159u8, 195u8, 74u8, 33u8, 59u8, 15u8, 104u8,
                                26u8, 111u8, 165u8, 68u8, 147u8, 14u8, 86u8, 94u8, 250u8, 167u8,
                                146u8, 82u8,
                            ]
                        {
                            let entry = PendingEpochConfigChange;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Next epoch randomness."]
                pub fn next_randomness(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        [::core::primitive::u8; 32usize],
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextRandomness>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                185u8, 98u8, 45u8, 109u8, 253u8, 38u8, 238u8, 221u8, 240u8, 29u8,
                                38u8, 107u8, 118u8, 117u8, 131u8, 115u8, 21u8, 255u8, 203u8, 81u8,
                                243u8, 251u8, 91u8, 60u8, 163u8, 202u8, 125u8, 193u8, 173u8, 234u8,
                                166u8, 92u8,
                            ]
                        {
                            let entry = NextRandomness;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Next epoch authorities."]
                pub fn next_authorities(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
                            runtime_types::sp_consensus_babe::app::Public,
                            ::core::primitive::u64,
                        )>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextAuthorities>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                211u8, 175u8, 218u8, 0u8, 212u8, 114u8, 210u8, 137u8, 146u8, 135u8,
                                78u8, 133u8, 85u8, 253u8, 140u8, 242u8, 101u8, 155u8, 159u8, 8u8,
                                217u8, 176u8, 234u8, 143u8, 212u8, 103u8, 198u8, 94u8, 121u8,
                                111u8, 56u8, 89u8,
                            ]
                        {
                            let entry = NextAuthorities;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Randomness under construction."]
                #[doc = ""]
                #[doc = " We make a trade-off between storage accesses and list length."]
                #[doc = " We store the under-construction randomness in segments of up to"]
                #[doc = " `UNDER_CONSTRUCTION_SEGMENT_LENGTH`."]
                #[doc = ""]
                #[doc = " Once a segment reaches this length, we begin the next one."]
                #[doc = " We reset all segments and return to `0` at the beginning of every"]
                #[doc = " epoch."]
                pub fn segment_index(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<SegmentIndex>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                128u8, 45u8, 87u8, 58u8, 174u8, 152u8, 241u8, 156u8, 56u8, 192u8,
                                19u8, 45u8, 75u8, 160u8, 35u8, 253u8, 145u8, 11u8, 178u8, 81u8,
                                114u8, 117u8, 112u8, 107u8, 163u8, 208u8, 240u8, 151u8, 102u8,
                                176u8, 246u8, 5u8,
                            ]
                        {
                            let entry = SegmentIndex;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]
                pub fn under_construction(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                            [::core::primitive::u8; 32usize],
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<UnderConstruction>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                12u8, 167u8, 30u8, 96u8, 161u8, 63u8, 210u8, 63u8, 91u8, 199u8,
                                188u8, 78u8, 254u8, 255u8, 253u8, 202u8, 203u8, 26u8, 4u8, 105u8,
                                76u8, 125u8, 191u8, 245u8, 32u8, 97u8, 127u8, 129u8, 167u8, 80u8,
                                210u8, 123u8,
                            ]
                        {
                            let entry = UnderConstruction(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " TWOX-NOTE: `SegmentIndex` is an increasing integer, so this is okay."]
                pub fn under_construction_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, UnderConstruction<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<UnderConstruction>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                12u8, 167u8, 30u8, 96u8, 161u8, 63u8, 210u8, 63u8, 91u8, 199u8,
                                188u8, 78u8, 254u8, 255u8, 253u8, 202u8, 203u8, 26u8, 4u8, 105u8,
                                76u8, 125u8, 191u8, 245u8, 32u8, 97u8, 127u8, 129u8, 167u8, 80u8,
                                210u8, 123u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Temporary value (cleared at block finalization) which is `Some`"]
                #[doc = " if per-block initialization has already been called for current block."]
                pub fn initialized(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Initialized>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                48u8, 206u8, 111u8, 118u8, 149u8, 175u8, 148u8, 53u8, 233u8, 82u8,
                                220u8, 57u8, 22u8, 164u8, 116u8, 228u8, 134u8, 237u8, 129u8, 195u8,
                                60u8, 169u8, 1u8, 164u8, 74u8, 177u8, 145u8, 112u8, 66u8, 198u8,
                                53u8, 157u8,
                            ]
                        {
                            let entry = Initialized;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " This field should always be populated during block processing unless"]
                #[doc = " secondary plain slots are enabled (which don't contain a VRF output)."]
                #[doc = ""]
                #[doc = " It is set in `on_initialize`, before it will contain the value from the last block."]
                pub fn author_vrf_randomness(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<[::core::primitive::u8; 32usize]>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<AuthorVrfRandomness>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                66u8, 235u8, 74u8, 252u8, 222u8, 135u8, 19u8, 28u8, 74u8, 191u8,
                                170u8, 197u8, 207u8, 127u8, 77u8, 121u8, 138u8, 138u8, 110u8,
                                187u8, 34u8, 14u8, 230u8, 43u8, 241u8, 241u8, 63u8, 163u8, 53u8,
                                179u8, 250u8, 247u8,
                            ]
                        {
                            let entry = AuthorVrfRandomness;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The block numbers when the last and current epoch have started, respectively `N-1` and"]
                #[doc = " `N`."]
                #[doc = " NOTE: We track this is in order to annotate the block number when a given pool of"]
                #[doc = " entropy was fixed (i.e. it was known to chain observers). Since epochs are defined in"]
                #[doc = " slots, which may be skipped, the block numbers may not line up with the slot numbers."]
                pub fn epoch_start(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        (::core::primitive::u32, ::core::primitive::u32),
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<EpochStart>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                196u8, 39u8, 241u8, 20u8, 150u8, 180u8, 136u8, 4u8, 195u8, 205u8,
                                218u8, 10u8, 130u8, 131u8, 168u8, 243u8, 207u8, 249u8, 58u8, 195u8,
                                177u8, 119u8, 110u8, 243u8, 241u8, 3u8, 245u8, 56u8, 157u8, 5u8,
                                68u8, 60u8,
                            ]
                        {
                            let entry = EpochStart;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " How late the current block is compared to its parent."]
                #[doc = ""]
                #[doc = " This entry is populated as part of block execution and is cleaned up"]
                #[doc = " on block finalization. Querying this storage entry outside of block"]
                #[doc = " execution context should always yield zero."]
                pub fn lateness(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Lateness>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                229u8, 230u8, 224u8, 89u8, 49u8, 213u8, 198u8, 236u8, 144u8, 56u8,
                                193u8, 234u8, 62u8, 242u8, 191u8, 199u8, 105u8, 131u8, 74u8, 63u8,
                                75u8, 1u8, 210u8, 49u8, 3u8, 128u8, 18u8, 77u8, 219u8, 146u8, 60u8,
                                88u8,
                            ]
                        {
                            let entry = Lateness;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The configuration for the current epoch. Should never be `None` as it is initialized in"]
                #[doc = " genesis."]
                pub fn epoch_config(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::sp_consensus_babe::BabeEpochConfiguration,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<EpochConfig>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                169u8, 189u8, 214u8, 159u8, 181u8, 232u8, 243u8, 4u8, 113u8, 24u8,
                                221u8, 229u8, 27u8, 35u8, 3u8, 121u8, 136u8, 88u8, 187u8, 193u8,
                                207u8, 153u8, 223u8, 225u8, 166u8, 183u8, 53u8, 3u8, 162u8, 207u8,
                                88u8, 133u8,
                            ]
                        {
                            let entry = EpochConfig;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The configuration for the next epoch, `None` if the config will not change"]
                #[doc = " (you can fallback to `EpochConfig` instead in that case)."]
                pub fn next_epoch_config(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::sp_consensus_babe::BabeEpochConfiguration,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextEpochConfig>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                239u8, 125u8, 203u8, 223u8, 161u8, 107u8, 232u8, 54u8, 158u8,
                                100u8, 244u8, 140u8, 119u8, 58u8, 253u8, 245u8, 73u8, 236u8, 50u8,
                                67u8, 228u8, 162u8, 166u8, 168u8, 162u8, 152u8, 239u8, 246u8,
                                153u8, 223u8, 109u8, 121u8,
                            ]
                        {
                            let entry = NextEpochConfig;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The amount of time, in slots, that each epoch should last."]
                #[doc = " NOTE: Currently it is not possible to change the epoch duration after"]
                #[doc = " the chain has started. Attempting to do so will brick block production."]
                pub fn epoch_duration(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Babe", "EpochDuration")?
                        == [
                            40u8, 54u8, 255u8, 20u8, 89u8, 2u8, 38u8, 235u8, 70u8, 145u8, 128u8,
                            227u8, 177u8, 3u8, 153u8, 91u8, 102u8, 159u8, 160u8, 139u8, 88u8,
                            111u8, 116u8, 90u8, 139u8, 12u8, 31u8, 236u8, 11u8, 113u8, 213u8,
                            254u8,
                        ]
                    {
                        let pallet = metadata.pallet("Babe")?;
                        let constant = pallet.constant("EpochDuration")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The expected average block time at which BABE should be creating"]
                #[doc = " blocks. Since BABE is probabilistic it is not trivial to figure out"]
                #[doc = " what the expected average block time should be based on the slot"]
                #[doc = " duration and the security parameter `c` (where `1 - c` represents"]
                #[doc = " the probability of a slot being empty)."]
                pub fn expected_block_time(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Babe", "ExpectedBlockTime")?
                        == [
                            249u8, 170u8, 37u8, 7u8, 132u8, 115u8, 106u8, 71u8, 116u8, 166u8, 78u8,
                            251u8, 242u8, 146u8, 99u8, 207u8, 204u8, 225u8, 157u8, 57u8, 19u8,
                            17u8, 202u8, 231u8, 50u8, 67u8, 17u8, 205u8, 238u8, 80u8, 154u8, 125u8,
                        ]
                    {
                        let pallet = metadata.pallet("Babe")?;
                        let constant = pallet.constant("ExpectedBlockTime")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " Max number of authorities allowed"]
                pub fn max_authorities(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Babe", "MaxAuthorities")?
                        == [
                            205u8, 23u8, 62u8, 93u8, 110u8, 248u8, 109u8, 245u8, 1u8, 57u8, 144u8,
                            146u8, 103u8, 0u8, 178u8, 246u8, 63u8, 80u8, 77u8, 155u8, 202u8, 208u8,
                            73u8, 194u8, 210u8, 49u8, 121u8, 99u8, 101u8, 222u8, 127u8, 206u8,
                        ]
                    {
                        let pallet = metadata.pallet("Babe")?;
                        let constant = pallet.constant("MaxAuthorities")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod timestamp {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Set {
                #[codec(compact)]
                pub now: ::core::primitive::u64,
            }
            impl ::subxt::Call for Set {
                const PALLET: &'static str = "Timestamp";
                const FUNCTION: &'static str = "set";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "`MinimumPeriod`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Inherent`."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                #[doc = "# </weight>"]
                pub fn set(
                    &self,
                    now: ::core::primitive::u64,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Set, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Set>()?
                    };
                    if runtime_call_hash
                        == [
                            191u8, 73u8, 102u8, 150u8, 65u8, 157u8, 172u8, 194u8, 7u8, 72u8, 1u8,
                            35u8, 54u8, 99u8, 245u8, 139u8, 40u8, 136u8, 245u8, 53u8, 167u8, 100u8,
                            143u8, 244u8, 160u8, 5u8, 18u8, 130u8, 77u8, 160u8, 227u8, 51u8,
                        ]
                    {
                        let call = Set { now };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct Now;
            impl ::subxt::StorageEntry for Now {
                const PALLET: &'static str = "Timestamp";
                const STORAGE: &'static str = "Now";
                type Value = ::core::primitive::u64;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct DidUpdate;
            impl ::subxt::StorageEntry for DidUpdate {
                const PALLET: &'static str = "Timestamp";
                const STORAGE: &'static str = "DidUpdate";
                type Value = ::core::primitive::bool;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Current time for the current block."]
                pub fn now(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Now>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                148u8, 53u8, 50u8, 54u8, 13u8, 161u8, 57u8, 150u8, 16u8, 83u8,
                                144u8, 221u8, 59u8, 75u8, 158u8, 130u8, 39u8, 123u8, 106u8, 134u8,
                                202u8, 185u8, 83u8, 85u8, 60u8, 41u8, 120u8, 96u8, 210u8, 34u8,
                                2u8, 250u8,
                            ]
                        {
                            let entry = Now;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Did the timestamp get updated in this block?"]
                pub fn did_update(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DidUpdate>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                70u8, 13u8, 92u8, 186u8, 80u8, 151u8, 167u8, 90u8, 158u8, 232u8,
                                175u8, 13u8, 103u8, 135u8, 2u8, 78u8, 16u8, 6u8, 39u8, 158u8,
                                167u8, 85u8, 27u8, 47u8, 122u8, 73u8, 127u8, 26u8, 35u8, 168u8,
                                72u8, 204u8,
                            ]
                        {
                            let entry = DidUpdate;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The minimum period between blocks. Beware that this is different to the *expected*"]
                #[doc = " period that the block production apparatus provides. Your chosen consensus system will"]
                #[doc = " generally work with this to determine a sensible block time. e.g. For Aura, it will be"]
                #[doc = " double this period on default settings."]
                pub fn minimum_period(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Timestamp", "MinimumPeriod")?
                        == [
                            141u8, 242u8, 40u8, 24u8, 83u8, 43u8, 33u8, 194u8, 156u8, 149u8, 219u8,
                            61u8, 10u8, 123u8, 120u8, 247u8, 228u8, 22u8, 25u8, 24u8, 214u8, 188u8,
                            54u8, 135u8, 240u8, 162u8, 41u8, 216u8, 3u8, 58u8, 238u8, 39u8,
                        ]
                    {
                        let pallet = metadata.pallet("Timestamp")?;
                        let constant = pallet.constant("MinimumPeriod")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod authorship {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SetUncles {
                pub new_uncles: ::std::vec::Vec<
                    runtime_types::sp_runtime::generic::header::Header<
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::traits::BlakeTwo256,
                    >,
                >,
            }
            impl ::subxt::Call for SetUncles {
                const PALLET: &'static str = "Authorship";
                const FUNCTION: &'static str = "set_uncles";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Provide a set of uncles."]
                pub fn set_uncles(
                    &self,
                    new_uncles: ::std::vec::Vec<
                        runtime_types::sp_runtime::generic::header::Header<
                            ::core::primitive::u32,
                            runtime_types::sp_runtime::traits::BlakeTwo256,
                        >,
                    >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SetUncles,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SetUncles>()?
                    };
                    if runtime_call_hash
                        == [
                            5u8, 56u8, 71u8, 152u8, 103u8, 232u8, 101u8, 171u8, 200u8, 2u8, 177u8,
                            102u8, 0u8, 93u8, 210u8, 90u8, 56u8, 151u8, 5u8, 235u8, 227u8, 197u8,
                            189u8, 248u8, 2u8, 71u8, 49u8, 220u8, 212u8, 253u8, 235u8, 67u8,
                        ]
                    {
                        let call = SetUncles { new_uncles };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct Uncles;
            impl ::subxt::StorageEntry for Uncles {
                const PALLET: &'static str = "Authorship";
                const STORAGE: &'static str = "Uncles";
                type Value = ::std::vec::Vec<
                    runtime_types::pallet_authorship::UncleEntryItem<
                        ::core::primitive::u32,
                        ::subxt::sp_core::H256,
                        ::subxt::sp_core::crypto::AccountId32,
                    >,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Author;
            impl ::subxt::StorageEntry for Author {
                const PALLET: &'static str = "Authorship";
                const STORAGE: &'static str = "Author";
                type Value = ::subxt::sp_core::crypto::AccountId32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct DidSetUncles;
            impl ::subxt::StorageEntry for DidSetUncles {
                const PALLET: &'static str = "Authorship";
                const STORAGE: &'static str = "DidSetUncles";
                type Value = ::core::primitive::bool;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Uncles"]
                pub fn uncles(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<
                            runtime_types::pallet_authorship::UncleEntryItem<
                                ::core::primitive::u32,
                                ::subxt::sp_core::H256,
                                ::subxt::sp_core::crypto::AccountId32,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Uncles>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                71u8, 135u8, 85u8, 172u8, 221u8, 165u8, 212u8, 2u8, 208u8, 50u8,
                                9u8, 92u8, 251u8, 25u8, 194u8, 123u8, 210u8, 4u8, 148u8, 30u8,
                                20u8, 146u8, 21u8, 210u8, 138u8, 128u8, 144u8, 152u8, 97u8, 57u8,
                                205u8, 231u8,
                            ]
                        {
                            let entry = Uncles;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Author of current block."]
                pub fn author(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Author>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                191u8, 57u8, 3u8, 242u8, 220u8, 123u8, 103u8, 215u8, 149u8, 120u8,
                                20u8, 139u8, 146u8, 234u8, 180u8, 105u8, 129u8, 128u8, 114u8,
                                147u8, 114u8, 236u8, 23u8, 21u8, 15u8, 250u8, 180u8, 19u8, 177u8,
                                145u8, 77u8, 228u8,
                            ]
                        {
                            let entry = Author;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Whether uncles were already set in this block."]
                pub fn did_set_uncles(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DidSetUncles>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                64u8, 3u8, 208u8, 187u8, 50u8, 45u8, 37u8, 88u8, 163u8, 226u8,
                                37u8, 126u8, 232u8, 107u8, 156u8, 187u8, 29u8, 15u8, 53u8, 46u8,
                                28u8, 73u8, 83u8, 123u8, 14u8, 244u8, 243u8, 43u8, 245u8, 143u8,
                                15u8, 115u8,
                            ]
                        {
                            let entry = DidSetUncles;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The number of blocks back we should accept uncles."]
                #[doc = " This means that we will deal with uncle-parents that are"]
                #[doc = " `UncleGenerations + 1` before `now`."]
                pub fn uncle_generations(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Authorship", "UncleGenerations")?
                        == [
                            0u8, 72u8, 57u8, 175u8, 222u8, 143u8, 191u8, 33u8, 163u8, 157u8, 202u8,
                            83u8, 186u8, 103u8, 162u8, 103u8, 227u8, 158u8, 239u8, 212u8, 205u8,
                            193u8, 226u8, 138u8, 5u8, 220u8, 221u8, 42u8, 7u8, 146u8, 173u8, 205u8,
                        ]
                    {
                        let pallet = metadata.pallet("Authorship")?;
                        let constant = pallet.constant("UncleGenerations")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod balances {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Transfer {
                pub dest:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::Call for Transfer {
                const PALLET: &'static str = "Balances";
                const FUNCTION: &'static str = "transfer";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct TransferKeepAlive {
                pub dest:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
                #[codec(compact)]
                pub value: ::core::primitive::u128,
            }
            impl ::subxt::Call for TransferKeepAlive {
                const PALLET: &'static str = "Balances";
                const FUNCTION: &'static str = "transfer_keep_alive";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct TransferAll {
                pub dest:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
                pub keep_alive: ::core::primitive::bool,
            }
            impl ::subxt::Call for TransferAll {
                const PALLET: &'static str = "Balances";
                const FUNCTION: &'static str = "transfer_all";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "It will decrease the total issuance of the system by the `TransferFee`."]
                #[doc = "If the sender's account is below the existential deposit as a result"]
                #[doc = "of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
                #[doc = "  types. See related functions below."]
                #[doc = "- It contains a limited number of reads and writes internally and no complex"]
                #[doc = "  computation."]
                #[doc = ""]
                #[doc = "Related functions:"]
                #[doc = ""]
                #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
                #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
                #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
                #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
                #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
                #[doc = "    that the transfer will not kill the origin account."]
                #[doc = "---------------------------------"]
                #[doc = "- Origin account is already in memory, so no DB operations for them."]
                #[doc = "# </weight>"]
                pub fn transfer(
                    &self,
                    dest: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                    value: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        Transfer,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Transfer>()?
                    };
                    if runtime_call_hash
                        == [
                            250u8, 8u8, 164u8, 186u8, 80u8, 220u8, 134u8, 247u8, 142u8, 121u8,
                            34u8, 22u8, 169u8, 39u8, 6u8, 93u8, 72u8, 47u8, 44u8, 107u8, 9u8, 98u8,
                            203u8, 190u8, 136u8, 55u8, 251u8, 78u8, 216u8, 150u8, 98u8, 118u8,
                        ]
                    {
                        let call = Transfer { dest, value };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Set the balances of a given account."]
                #[doc = ""]
                #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
                #[doc = "also decrease the total issuance of the system (`TotalIssuance`)."]
                #[doc = "If the new free or reserved balance is below the existential deposit,"]
                #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
                #[doc = "specified."]
                #[doc = "# <weight>"]
                #[doc = "- Same as transfer, but additional read and write because the source account is not"]
                #[doc = "  assumed to be in the overlay."]
                #[doc = "# </weight>"]
                #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
                #[doc = "origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer`] instead."]
                #[doc = ""]
                #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
                pub fn transfer_keep_alive(
                    &self,
                    dest: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                    value: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        TransferKeepAlive,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<TransferKeepAlive>()?
                    };
                    if runtime_call_hash
                        == [
                            111u8, 233u8, 125u8, 71u8, 223u8, 141u8, 112u8, 94u8, 157u8, 11u8,
                            88u8, 7u8, 239u8, 145u8, 247u8, 183u8, 245u8, 87u8, 157u8, 35u8, 49u8,
                            91u8, 54u8, 103u8, 101u8, 76u8, 110u8, 94u8, 81u8, 170u8, 153u8, 209u8,
                        ]
                    {
                        let call = TransferKeepAlive { dest, value };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Transfer the entire transferable balance from the caller account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                #[doc = "deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin of this call must be Signed."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true). # <weight>"]
                #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
                #[doc = "  #</weight>"]
                pub fn transfer_all(
                    &self,
                    dest: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                    keep_alive: ::core::primitive::bool,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        TransferAll,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<TransferAll>()?
                    };
                    if runtime_call_hash
                        == [
                            240u8, 165u8, 185u8, 144u8, 24u8, 149u8, 15u8, 46u8, 60u8, 147u8, 19u8,
                            187u8, 96u8, 24u8, 150u8, 53u8, 151u8, 232u8, 200u8, 164u8, 176u8,
                            167u8, 8u8, 23u8, 63u8, 135u8, 68u8, 110u8, 5u8, 21u8, 35u8, 78u8,
                        ]
                    {
                        let call = TransferAll { dest, keep_alive };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_balances::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub account: ::subxt::sp_core::crypto::AccountId32,
                pub free_balance: ::core::primitive::u128,
            }
            impl ::subxt::Event for Endowed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
            #[doc = "resulting in an outright loss."]
            pub struct DustLost {
                pub account: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for DustLost {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub from: ::subxt::sp_core::crypto::AccountId32,
                pub to: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for Transfer {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub who: ::subxt::sp_core::crypto::AccountId32,
                pub free: ::core::primitive::u128,
                pub reserved: ::core::primitive::u128,
            }
            impl ::subxt::Event for BalanceSet {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub who: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for Reserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub who: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for Unreserved {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some balance was moved from the reserve of the first account to the second account."]
            #[doc = "Final argument indicates the destination balance type."]
            pub struct ReserveRepatriated {
                pub from: ::subxt::sp_core::crypto::AccountId32,
                pub to: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
                pub destination_status:
                    runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
            }
            impl ::subxt::Event for ReserveRepatriated {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some amount was deposited (e.g. for transaction fees)."]
            pub struct Deposit {
                pub who: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for Deposit {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
            pub struct Withdraw {
                pub who: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for Withdraw {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Withdraw";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
            pub struct Slashed {
                pub who: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for Slashed {
                const PALLET: &'static str = "Balances";
                const EVENT: &'static str = "Slashed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct TotalIssuance;
            impl ::subxt::StorageEntry for TotalIssuance {
                const PALLET: &'static str = "Balances";
                const STORAGE: &'static str = "TotalIssuance";
                type Value = ::core::primitive::u128;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Account<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::StorageEntry for Account<'_> {
                const PALLET: &'static str = "Balances";
                const STORAGE: &'static str = "Account";
                type Value = runtime_types::pallet_balances::AccountData<::core::primitive::u128>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct Locks<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::StorageEntry for Locks<'_> {
                const PALLET: &'static str = "Balances";
                const STORAGE: &'static str = "Locks";
                type Value =
                    runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
                    >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct Reserves<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::StorageEntry for Reserves<'_> {
                const PALLET: &'static str = "Balances";
                const STORAGE: &'static str = "Reserves";
                type Value = runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                    runtime_types::pallet_balances::ReserveData<
                        [::core::primitive::u8; 8usize],
                        ::core::primitive::u128,
                    >,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct StorageVersion;
            impl ::subxt::StorageEntry for StorageVersion {
                const PALLET: &'static str = "Balances";
                const STORAGE: &'static str = "StorageVersion";
                type Value = runtime_types::pallet_balances::Releases;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The total units issued in the system."]
                pub fn total_issuance(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<TotalIssuance>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                1u8, 206u8, 252u8, 237u8, 6u8, 30u8, 20u8, 232u8, 164u8, 115u8,
                                51u8, 156u8, 156u8, 206u8, 241u8, 187u8, 44u8, 84u8, 25u8, 164u8,
                                235u8, 20u8, 86u8, 242u8, 124u8, 23u8, 28u8, 140u8, 26u8, 73u8,
                                231u8, 51u8,
                            ]
                        {
                            let entry = TotalIssuance;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The balance of an account."]
                #[doc = ""]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_balances::AccountData<::core::primitive::u128>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Account>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                129u8, 169u8, 171u8, 206u8, 229u8, 178u8, 69u8, 118u8, 199u8, 64u8,
                                254u8, 67u8, 16u8, 154u8, 160u8, 197u8, 177u8, 161u8, 148u8, 199u8,
                                78u8, 219u8, 187u8, 83u8, 99u8, 110u8, 207u8, 252u8, 243u8, 39u8,
                                46u8, 106u8,
                            ]
                        {
                            let entry = Account(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The balance of an account."]
                #[doc = ""]
                #[doc = " NOTE: This is only used in the case that this pallet is used to store balances."]
                pub fn account_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Account<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Account>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                129u8, 169u8, 171u8, 206u8, 229u8, 178u8, 69u8, 118u8, 199u8, 64u8,
                                254u8, 67u8, 16u8, 154u8, 160u8, 197u8, 177u8, 161u8, 148u8, 199u8,
                                78u8, 219u8, 187u8, 83u8, 99u8, 110u8, 207u8, 252u8, 243u8, 39u8,
                                46u8, 106u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
                            runtime_types::pallet_balances::BalanceLock<::core::primitive::u128>,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Locks>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                31u8, 76u8, 213u8, 60u8, 86u8, 11u8, 155u8, 151u8, 33u8, 212u8,
                                74u8, 89u8, 174u8, 74u8, 195u8, 107u8, 29u8, 163u8, 178u8, 34u8,
                                209u8, 8u8, 201u8, 237u8, 77u8, 99u8, 205u8, 212u8, 236u8, 132u8,
                                2u8, 252u8,
                            ]
                        {
                            let entry = Locks(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Any liquidity locks on some account balances."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Locks<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Locks>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                31u8, 76u8, 213u8, 60u8, 86u8, 11u8, 155u8, 151u8, 33u8, 212u8,
                                74u8, 89u8, 174u8, 74u8, 195u8, 107u8, 29u8, 163u8, 178u8, 34u8,
                                209u8, 8u8, 201u8, 237u8, 77u8, 99u8, 205u8, 212u8, 236u8, 132u8,
                                2u8, 252u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                            runtime_types::pallet_balances::ReserveData<
                                [::core::primitive::u8; 8usize],
                                ::core::primitive::u128,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Reserves>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                103u8, 6u8, 69u8, 151u8, 81u8, 40u8, 146u8, 113u8, 56u8, 239u8,
                                104u8, 31u8, 168u8, 242u8, 141u8, 121u8, 213u8, 213u8, 114u8, 63u8,
                                62u8, 47u8, 91u8, 119u8, 57u8, 91u8, 95u8, 81u8, 19u8, 208u8, 59u8,
                                146u8,
                            ]
                        {
                            let entry = Reserves(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Reserves<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Reserves>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                103u8, 6u8, 69u8, 151u8, 81u8, 40u8, 146u8, 113u8, 56u8, 239u8,
                                104u8, 31u8, 168u8, 242u8, 141u8, 121u8, 213u8, 213u8, 114u8, 63u8,
                                62u8, 47u8, 91u8, 119u8, 57u8, 91u8, 95u8, 81u8, 19u8, 208u8, 59u8,
                                146u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Storage version of the pallet."]
                #[doc = ""]
                #[doc = " This is set to v2.0.0 for new networks."]
                pub fn storage_version(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_balances::Releases,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<StorageVersion>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                135u8, 96u8, 28u8, 234u8, 124u8, 212u8, 56u8, 140u8, 40u8, 101u8,
                                235u8, 128u8, 136u8, 221u8, 182u8, 81u8, 17u8, 9u8, 184u8, 228u8,
                                174u8, 165u8, 200u8, 162u8, 214u8, 178u8, 227u8, 72u8, 34u8, 5u8,
                                173u8, 96u8,
                            ]
                        {
                            let entry = StorageVersion;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The minimum amount required to keep an account open."]
                pub fn existential_deposit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Balances", "ExistentialDeposit")?
                        == [
                            103u8, 139u8, 154u8, 122u8, 217u8, 176u8, 26u8, 76u8, 155u8, 167u8,
                            4u8, 153u8, 54u8, 72u8, 211u8, 17u8, 6u8, 58u8, 137u8, 194u8, 88u8,
                            138u8, 136u8, 30u8, 101u8, 56u8, 224u8, 208u8, 31u8, 98u8, 0u8, 23u8,
                        ]
                    {
                        let pallet = metadata.pallet("Balances")?;
                        let constant = pallet.constant("ExistentialDeposit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The maximum number of locks that should exist on an account."]
                #[doc = " Not strictly enforced, but used for weight estimation."]
                pub fn max_locks(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Balances", "MaxLocks")?
                        == [
                            250u8, 58u8, 19u8, 15u8, 35u8, 113u8, 227u8, 89u8, 39u8, 75u8, 21u8,
                            108u8, 202u8, 32u8, 163u8, 167u8, 207u8, 233u8, 69u8, 151u8, 53u8,
                            164u8, 230u8, 16u8, 14u8, 22u8, 172u8, 46u8, 36u8, 216u8, 29u8, 1u8,
                        ]
                    {
                        let pallet = metadata.pallet("Balances")?;
                        let constant = pallet.constant("MaxLocks")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Balances", "MaxReserves")?
                        == [
                            24u8, 30u8, 77u8, 89u8, 216u8, 114u8, 140u8, 11u8, 127u8, 252u8, 130u8,
                            203u8, 4u8, 55u8, 62u8, 240u8, 65u8, 182u8, 187u8, 189u8, 140u8, 6u8,
                            177u8, 216u8, 159u8, 108u8, 18u8, 73u8, 95u8, 67u8, 62u8, 50u8,
                        ]
                    {
                        let pallet = metadata.pallet("Balances")?;
                        let constant = pallet.constant("MaxReserves")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod deip_balances {
        use super::root_mod;
        use super::runtime_types;
    }
    pub mod transaction_payment {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct NextFeeMultiplier;
            impl ::subxt::StorageEntry for NextFeeMultiplier {
                const PALLET: &'static str = "TransactionPayment";
                const STORAGE: &'static str = "NextFeeMultiplier";
                type Value = runtime_types::sp_arithmetic::fixed_point::FixedU128;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageVersion;
            impl ::subxt::StorageEntry for StorageVersion {
                const PALLET: &'static str = "TransactionPayment";
                const STORAGE: &'static str = "StorageVersion";
                type Value = runtime_types::pallet_transaction_payment::Releases;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                pub fn next_fee_multiplier(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::sp_arithmetic::fixed_point::FixedU128,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextFeeMultiplier>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                232u8, 48u8, 68u8, 202u8, 209u8, 29u8, 249u8, 71u8, 0u8, 84u8,
                                229u8, 250u8, 176u8, 203u8, 27u8, 26u8, 34u8, 55u8, 83u8, 183u8,
                                224u8, 40u8, 62u8, 127u8, 131u8, 88u8, 128u8, 9u8, 56u8, 178u8,
                                31u8, 183u8,
                            ]
                        {
                            let entry = NextFeeMultiplier;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn storage_version(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_transaction_payment::Releases,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<StorageVersion>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                219u8, 243u8, 82u8, 176u8, 65u8, 5u8, 132u8, 114u8, 8u8, 82u8,
                                176u8, 200u8, 97u8, 150u8, 177u8, 164u8, 166u8, 11u8, 34u8, 12u8,
                                12u8, 198u8, 58u8, 191u8, 186u8, 221u8, 221u8, 119u8, 181u8, 253u8,
                                154u8, 228u8,
                            ]
                        {
                            let entry = StorageVersion;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The fee to be paid for making a transaction; the per-byte portion."]
                pub fn transaction_byte_fee(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("TransactionPayment", "TransactionByteFee")?
                        == [
                            183u8, 21u8, 105u8, 53u8, 108u8, 121u8, 186u8, 76u8, 202u8, 99u8,
                            230u8, 139u8, 18u8, 171u8, 99u8, 19u8, 189u8, 6u8, 194u8, 165u8, 226u8,
                            21u8, 230u8, 225u8, 53u8, 180u8, 49u8, 17u8, 0u8, 30u8, 213u8, 142u8,
                        ]
                    {
                        let pallet = metadata.pallet("TransactionPayment")?;
                        let constant = pallet.constant("TransactionByteFee")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " A fee mulitplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
                #[doc = " `priority`"]
                #[doc = ""]
                #[doc = " This value is multipled by the `final_fee` to obtain a \"virtual tip\" that is later"]
                #[doc = " added to a tip component in regular `priority` calculations."]
                #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
                #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
                #[doc = ""]
                #[doc = " ```rust,ignore"]
                #[doc = " // For `Normal`"]
                #[doc = " let priority = priority_calc(tip);"]
                #[doc = ""]
                #[doc = " // For `Operational`"]
                #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
                #[doc = " let priority = priority_calc(tip + virtual_tip);"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
                #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
                #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
                #[doc = " transactions."]
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u8, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("TransactionPayment", "OperationalFeeMultiplier")?
                        == [
                            161u8, 232u8, 150u8, 43u8, 106u8, 83u8, 56u8, 248u8, 54u8, 123u8,
                            244u8, 73u8, 5u8, 49u8, 245u8, 150u8, 70u8, 92u8, 158u8, 207u8, 127u8,
                            115u8, 211u8, 21u8, 24u8, 136u8, 89u8, 44u8, 151u8, 211u8, 235u8,
                            196u8,
                        ]
                    {
                        let pallet = metadata.pallet("TransactionPayment")?;
                        let constant = pallet.constant("OperationalFeeMultiplier")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The polynomial that is applied in order to derive fee from weight."]
                pub fn weight_to_fee(
                    &self,
                ) -> ::core::result::Result<
                    ::std::vec::Vec<
                        runtime_types::frame_support::weights::WeightToFeeCoefficient<
                            ::core::primitive::u128,
                        >,
                    >,
                    ::subxt::BasicError,
                > {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("TransactionPayment", "WeightToFee")?
                        == [
                            236u8, 89u8, 172u8, 50u8, 101u8, 218u8, 151u8, 158u8, 128u8, 186u8,
                            120u8, 84u8, 103u8, 248u8, 220u8, 191u8, 9u8, 185u8, 114u8, 160u8,
                            104u8, 235u8, 167u8, 83u8, 228u8, 6u8, 56u8, 179u8, 160u8, 4u8, 230u8,
                            12u8,
                        ]
                    {
                        let pallet = metadata.pallet("TransactionPayment")?;
                        let constant = pallet.constant("WeightToFee")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod octopus_appchain {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SubmitObservations {
                pub payload: runtime_types::pallet_octopus_appchain::ObservationsPayload<
                    runtime_types::sp_runtime::MultiSigner,
                    ::core::primitive::u32,
                    ::subxt::sp_core::crypto::AccountId32,
                >,
                pub signature: runtime_types::sp_runtime::MultiSignature,
            }
            impl ::subxt::Call for SubmitObservations {
                const PALLET: &'static str = "OctopusAppchain";
                const FUNCTION: &'static str = "submit_observations";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ForceSetIsActivated {
                pub is_activated: ::core::primitive::bool,
            }
            impl ::subxt::Call for ForceSetIsActivated {
                const PALLET: &'static str = "OctopusAppchain";
                const FUNCTION: &'static str = "force_set_is_activated";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            pub struct ForceSetNextSetId {
                pub next_set_id: ::core::primitive::u32,
            }
            impl ::subxt::Call for ForceSetNextSetId {
                const PALLET: &'static str = "OctopusAppchain";
                const FUNCTION: &'static str = "force_set_next_set_id";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ForceSetPlannedValidators {
                pub validators: ::std::vec::Vec<(
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u128,
                )>,
            }
            impl ::subxt::Call for ForceSetPlannedValidators {
                const PALLET: &'static str = "OctopusAppchain";
                const FUNCTION: &'static str = "force_set_planned_validators";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Lock {
                pub receiver_id: ::std::vec::Vec<::core::primitive::u8>,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Call for Lock {
                const PALLET: &'static str = "OctopusAppchain";
                const FUNCTION: &'static str = "lock";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct MintAsset {
                pub asset_id: ::core::primitive::u32,
                pub sender_id: ::std::vec::Vec<::core::primitive::u8>,
                pub receiver:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Call for MintAsset {
                const PALLET: &'static str = "OctopusAppchain";
                const FUNCTION: &'static str = "mint_asset";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct BurnAsset {
                pub asset_id: ::core::primitive::u32,
                pub receiver_id: ::std::vec::Vec<::core::primitive::u8>,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Call for BurnAsset {
                const PALLET: &'static str = "OctopusAppchain";
                const FUNCTION: &'static str = "burn_asset";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SetAssetName {
                pub asset_name: ::std::vec::Vec<::core::primitive::u8>,
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::Call for SetAssetName {
                const PALLET: &'static str = "OctopusAppchain";
                const FUNCTION: &'static str = "set_asset_name";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct TranferFromPalletAccount {
                pub receiver:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Call for TranferFromPalletAccount {
                const PALLET: &'static str = "OctopusAppchain";
                const FUNCTION: &'static str = "tranfer_from_pallet_account";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Submit observations."]
                pub fn submit_observations(
                    &self,
                    payload: runtime_types::pallet_octopus_appchain::ObservationsPayload<
                        runtime_types::sp_runtime::MultiSigner,
                        ::core::primitive::u32,
                        ::subxt::sp_core::crypto::AccountId32,
                    >,
                    signature: runtime_types::sp_runtime::MultiSignature,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SubmitObservations,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SubmitObservations>()?
                    };
                    if runtime_call_hash
                        == [
                            229u8, 206u8, 253u8, 116u8, 111u8, 239u8, 169u8, 235u8, 175u8, 169u8,
                            70u8, 253u8, 158u8, 66u8, 183u8, 30u8, 166u8, 202u8, 184u8, 142u8,
                            64u8, 97u8, 133u8, 69u8, 176u8, 6u8, 83u8, 33u8, 236u8, 150u8, 227u8,
                            174u8,
                        ]
                    {
                        let call = SubmitObservations { payload, signature };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn force_set_is_activated(
                    &self,
                    is_activated: ::core::primitive::bool,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ForceSetIsActivated,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ForceSetIsActivated>()?
                    };
                    if runtime_call_hash
                        == [
                            82u8, 165u8, 95u8, 78u8, 177u8, 2u8, 9u8, 78u8, 62u8, 221u8, 119u8,
                            84u8, 52u8, 1u8, 196u8, 111u8, 216u8, 195u8, 53u8, 234u8, 116u8, 201u8,
                            163u8, 200u8, 190u8, 66u8, 30u8, 65u8, 12u8, 134u8, 63u8, 66u8,
                        ]
                    {
                        let call = ForceSetIsActivated { is_activated };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn force_set_next_set_id(
                    &self,
                    next_set_id: ::core::primitive::u32,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ForceSetNextSetId,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ForceSetNextSetId>()?
                    };
                    if runtime_call_hash
                        == [
                            205u8, 181u8, 231u8, 95u8, 68u8, 241u8, 214u8, 131u8, 173u8, 85u8,
                            167u8, 205u8, 47u8, 218u8, 230u8, 242u8, 243u8, 118u8, 96u8, 112u8,
                            241u8, 93u8, 30u8, 16u8, 148u8, 181u8, 96u8, 56u8, 146u8, 67u8, 171u8,
                            13u8,
                        ]
                    {
                        let call = ForceSetNextSetId { next_set_id };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn force_set_planned_validators(
                    &self,
                    validators: ::std::vec::Vec<(
                        ::subxt::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                    )>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ForceSetPlannedValidators,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ForceSetPlannedValidators>()?
                    };
                    if runtime_call_hash
                        == [
                            241u8, 123u8, 44u8, 41u8, 232u8, 178u8, 105u8, 119u8, 13u8, 177u8,
                            228u8, 191u8, 70u8, 65u8, 209u8, 225u8, 89u8, 181u8, 8u8, 188u8, 198u8,
                            126u8, 17u8, 25u8, 213u8, 114u8, 202u8, 180u8, 57u8, 109u8, 111u8,
                            211u8,
                        ]
                    {
                        let call = ForceSetPlannedValidators { validators };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Emits `Locked` event when successful."]
                pub fn lock(
                    &self,
                    receiver_id: ::std::vec::Vec<::core::primitive::u8>,
                    amount: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Lock, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Lock>()?
                    };
                    if runtime_call_hash
                        == [
                            59u8, 116u8, 159u8, 139u8, 246u8, 131u8, 64u8, 221u8, 230u8, 19u8,
                            15u8, 94u8, 163u8, 177u8, 34u8, 253u8, 31u8, 227u8, 70u8, 171u8, 188u8,
                            176u8, 131u8, 147u8, 81u8, 123u8, 20u8, 195u8, 187u8, 184u8, 25u8,
                            97u8,
                        ]
                    {
                        let call = Lock {
                            receiver_id,
                            amount,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn mint_asset(
                    &self,
                    asset_id: ::core::primitive::u32,
                    sender_id: ::std::vec::Vec<::core::primitive::u8>,
                    receiver: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                    amount: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        MintAsset,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<MintAsset>()?
                    };
                    if runtime_call_hash
                        == [
                            21u8, 208u8, 168u8, 222u8, 234u8, 151u8, 158u8, 246u8, 111u8, 118u8,
                            110u8, 200u8, 199u8, 47u8, 250u8, 75u8, 105u8, 110u8, 207u8, 175u8,
                            253u8, 2u8, 79u8, 93u8, 141u8, 164u8, 198u8, 151u8, 144u8, 237u8,
                            103u8, 45u8,
                        ]
                    {
                        let call = MintAsset {
                            asset_id,
                            sender_id,
                            receiver,
                            amount,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn burn_asset(
                    &self,
                    asset_id: ::core::primitive::u32,
                    receiver_id: ::std::vec::Vec<::core::primitive::u8>,
                    amount: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        BurnAsset,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<BurnAsset>()?
                    };
                    if runtime_call_hash
                        == [
                            173u8, 20u8, 42u8, 239u8, 193u8, 223u8, 201u8, 117u8, 74u8, 90u8,
                            131u8, 231u8, 161u8, 240u8, 7u8, 185u8, 177u8, 167u8, 63u8, 103u8,
                            252u8, 231u8, 53u8, 231u8, 53u8, 154u8, 68u8, 180u8, 221u8, 15u8,
                            180u8, 233u8,
                        ]
                    {
                        let call = BurnAsset {
                            asset_id,
                            receiver_id,
                            amount,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn set_asset_name(
                    &self,
                    asset_name: ::std::vec::Vec<::core::primitive::u8>,
                    asset_id: ::core::primitive::u32,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SetAssetName,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SetAssetName>()?
                    };
                    if runtime_call_hash
                        == [
                            177u8, 251u8, 214u8, 114u8, 89u8, 103u8, 116u8, 65u8, 235u8, 163u8,
                            111u8, 152u8, 64u8, 142u8, 94u8, 199u8, 216u8, 227u8, 205u8, 177u8,
                            156u8, 166u8, 20u8, 244u8, 7u8, 33u8, 56u8, 134u8, 33u8, 205u8, 252u8,
                            48u8,
                        ]
                    {
                        let call = SetAssetName {
                            asset_name,
                            asset_id,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn tranfer_from_pallet_account(
                    &self,
                    receiver: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                    amount: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        TranferFromPalletAccount,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<TranferFromPalletAccount>()?
                    };
                    if runtime_call_hash
                        == [
                            251u8, 35u8, 177u8, 150u8, 171u8, 156u8, 141u8, 217u8, 58u8, 96u8,
                            222u8, 176u8, 182u8, 75u8, 51u8, 237u8, 28u8, 247u8, 74u8, 20u8, 26u8,
                            5u8, 197u8, 251u8, 225u8, 24u8, 244u8, 123u8, 103u8, 124u8, 200u8,
                            247u8,
                        ]
                    {
                        let call = TranferFromPalletAccount { receiver, amount };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_octopus_appchain::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A new set of validators is waiting to be changed."]
            pub struct NewPlannedValidators {
                pub set_id: ::core::primitive::u32,
                pub validators: ::std::vec::Vec<(
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u128,
                )>,
            }
            impl ::subxt::Event for NewPlannedValidators {
                const PALLET: &'static str = "OctopusAppchain";
                const EVENT: &'static str = "NewPlannedValidators";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An `amount` of native token has been locked in the appchain to indicate that"]
            #[doc = "it will be cross-chain transferred to the mainchain."]
            pub struct Locked {
                pub sender: ::subxt::sp_core::crypto::AccountId32,
                pub receiver: ::std::vec::Vec<::core::primitive::u8>,
                pub amount: ::core::primitive::u128,
                pub sequence: ::core::primitive::u64,
            }
            impl ::subxt::Event for Locked {
                const PALLET: &'static str = "OctopusAppchain";
                const EVENT: &'static str = "Locked";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An `amount` was unlocked to `receiver` from `sender`."]
            pub struct Unlocked {
                pub sender: ::std::vec::Vec<::core::primitive::u8>,
                pub receiver: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for Unlocked {
                const PALLET: &'static str = "OctopusAppchain";
                const EVENT: &'static str = "Unlocked";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An `amount` unlock to `receiver` from `sender` failed."]
            pub struct UnlockFailed {
                pub sender: ::std::vec::Vec<::core::primitive::u8>,
                pub receiver: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for UnlockFailed {
                const PALLET: &'static str = "OctopusAppchain";
                const EVENT: &'static str = "UnlockFailed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AssetMinted {
                pub asset_id: ::core::primitive::u32,
                pub sender: ::std::vec::Vec<::core::primitive::u8>,
                pub receiver: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for AssetMinted {
                const PALLET: &'static str = "OctopusAppchain";
                const EVENT: &'static str = "AssetMinted";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AssetBurned {
                pub asset_id: ::core::primitive::u32,
                pub sender: ::subxt::sp_core::crypto::AccountId32,
                pub receiver: ::std::vec::Vec<::core::primitive::u8>,
                pub amount: ::core::primitive::u128,
                pub sequence: ::core::primitive::u64,
            }
            impl ::subxt::Event for AssetBurned {
                const PALLET: &'static str = "OctopusAppchain";
                const EVENT: &'static str = "AssetBurned";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AssetMintFailed {
                pub asset_id: ::core::primitive::u32,
                pub sender: ::std::vec::Vec<::core::primitive::u8>,
                pub receiver: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for AssetMintFailed {
                const PALLET: &'static str = "OctopusAppchain";
                const EVENT: &'static str = "AssetMintFailed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AssetIdGetFailed {
                pub token_id: ::std::vec::Vec<::core::primitive::u8>,
                pub sender: ::std::vec::Vec<::core::primitive::u8>,
                pub receiver: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for AssetIdGetFailed {
                const PALLET: &'static str = "OctopusAppchain";
                const EVENT: &'static str = "AssetIdGetFailed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct TransferredFromPallet {
                pub receiver: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for TransferredFromPallet {
                const PALLET: &'static str = "OctopusAppchain";
                const EVENT: &'static str = "TransferredFromPallet";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct AnchorContract;
            impl ::subxt::StorageEntry for AnchorContract {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "AnchorContract";
                type Value = ::std::vec::Vec<::core::primitive::u8>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct AssetIdByName<'a>(pub &'a [::core::primitive::u8]);
            impl ::subxt::StorageEntry for AssetIdByName<'_> {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "AssetIdByName";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct IsActivated;
            impl ::subxt::StorageEntry for IsActivated {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "IsActivated";
                type Value = ::core::primitive::bool;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NextSetId;
            impl ::subxt::StorageEntry for NextSetId {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "NextSetId";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct PlannedValidators;
            impl ::subxt::StorageEntry for PlannedValidators {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "PlannedValidators";
                type Value = ::std::vec::Vec<(
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u128,
                )>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NextNotificationId;
            impl ::subxt::StorageEntry for NextNotificationId {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "NextNotificationId";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Observations<'a>(
                pub &'a runtime_types::pallet_octopus_appchain::ObservationType,
                pub &'a ::core::primitive::u32,
            );
            impl ::subxt::StorageEntry for Observations<'_> {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "Observations";
                type Value = ::std::vec::Vec<
                    runtime_types::pallet_octopus_appchain::Observation<
                        ::subxt::sp_core::crypto::AccountId32,
                    >,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
                        ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
                    ])
                }
            }
            pub struct Observing<'a>(
                pub  &'a runtime_types::pallet_octopus_appchain::Observation<
                    ::subxt::sp_core::crypto::AccountId32,
                >,
            );
            impl ::subxt::StorageEntry for Observing<'_> {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "Observing";
                type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct PalletAccount;
            impl ::subxt::StorageEntry for PalletAccount {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "PalletAccount";
                type Value = ::subxt::sp_core::crypto::AccountId32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NotificationHistory<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for NotificationHistory<'_> {
                const PALLET: &'static str = "OctopusAppchain";
                const STORAGE: &'static str = "NotificationHistory";
                type Value = ::core::option::Option<
                    runtime_types::pallet_octopus_appchain::NotificationResult,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                pub fn anchor_contract(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<::core::primitive::u8>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<AnchorContract>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                39u8, 254u8, 249u8, 168u8, 27u8, 186u8, 34u8, 81u8, 114u8, 252u8,
                                137u8, 120u8, 169u8, 110u8, 85u8, 144u8, 32u8, 155u8, 158u8, 251u8,
                                126u8, 107u8, 64u8, 213u8, 87u8, 20u8, 213u8, 218u8, 46u8, 1u8,
                                107u8, 208u8,
                            ]
                        {
                            let entry = AnchorContract;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn asset_id_by_name(
                    &self,
                    _0: &'a [::core::primitive::u8],
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<AssetIdByName>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                215u8, 34u8, 187u8, 76u8, 52u8, 161u8, 208u8, 252u8, 20u8, 73u8,
                                89u8, 86u8, 60u8, 181u8, 239u8, 83u8, 152u8, 173u8, 251u8, 138u8,
                                238u8, 156u8, 72u8, 45u8, 164u8, 36u8, 94u8, 16u8, 86u8, 155u8,
                                97u8, 234u8,
                            ]
                        {
                            let entry = AssetIdByName(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn asset_id_by_name_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, AssetIdByName<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<AssetIdByName>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                215u8, 34u8, 187u8, 76u8, 52u8, 161u8, 208u8, 252u8, 20u8, 73u8,
                                89u8, 86u8, 60u8, 181u8, 239u8, 83u8, 152u8, 173u8, 251u8, 138u8,
                                238u8, 156u8, 72u8, 45u8, 164u8, 36u8, 94u8, 16u8, 86u8, 155u8,
                                97u8, 234u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Whether the appchain is activated."]
                #[doc = ""]
                #[doc = " Only an active appchain will communicate with the mainchain and pay block rewards."]
                pub fn is_activated(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<IsActivated>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                79u8, 161u8, 11u8, 40u8, 81u8, 93u8, 156u8, 140u8, 189u8, 249u8,
                                217u8, 21u8, 180u8, 193u8, 93u8, 129u8, 149u8, 250u8, 97u8, 1u8,
                                205u8, 234u8, 123u8, 232u8, 167u8, 194u8, 188u8, 247u8, 182u8,
                                179u8, 196u8, 209u8,
                            ]
                        {
                            let entry = IsActivated;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn next_set_id(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextSetId>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                143u8, 235u8, 138u8, 252u8, 147u8, 133u8, 43u8, 104u8, 147u8,
                                238u8, 74u8, 115u8, 65u8, 100u8, 51u8, 239u8, 106u8, 122u8, 127u8,
                                146u8, 234u8, 160u8, 38u8, 18u8, 20u8, 59u8, 28u8, 254u8, 105u8,
                                194u8, 56u8, 31u8,
                            ]
                        {
                            let entry = NextSetId;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn planned_validators(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<(
                            ::subxt::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        )>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PlannedValidators>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                43u8, 15u8, 180u8, 107u8, 112u8, 151u8, 132u8, 149u8, 199u8, 222u8,
                                232u8, 177u8, 36u8, 194u8, 139u8, 153u8, 17u8, 50u8, 203u8, 150u8,
                                242u8, 34u8, 89u8, 184u8, 158u8, 112u8, 73u8, 220u8, 96u8, 96u8,
                                160u8, 142u8,
                            ]
                        {
                            let entry = PlannedValidators;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn next_notification_id(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextNotificationId>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                116u8, 245u8, 172u8, 65u8, 54u8, 136u8, 117u8, 21u8, 20u8, 36u8,
                                37u8, 8u8, 204u8, 118u8, 33u8, 67u8, 247u8, 121u8, 86u8, 178u8,
                                130u8, 76u8, 18u8, 8u8, 135u8, 34u8, 142u8, 60u8, 197u8, 177u8,
                                161u8, 64u8,
                            ]
                        {
                            let entry = NextNotificationId;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn observations(
                    &self,
                    _0: &'a runtime_types::pallet_octopus_appchain::ObservationType,
                    _1: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<
                            runtime_types::pallet_octopus_appchain::Observation<
                                ::subxt::sp_core::crypto::AccountId32,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Observations>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                209u8, 91u8, 57u8, 191u8, 26u8, 103u8, 21u8, 245u8, 169u8, 53u8,
                                114u8, 196u8, 229u8, 48u8, 102u8, 85u8, 166u8, 19u8, 51u8, 67u8,
                                63u8, 167u8, 228u8, 173u8, 78u8, 180u8, 6u8, 158u8, 225u8, 188u8,
                                161u8, 106u8,
                            ]
                        {
                            let entry = Observations(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn observations_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Observations<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Observations>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                209u8, 91u8, 57u8, 191u8, 26u8, 103u8, 21u8, 245u8, 169u8, 53u8,
                                114u8, 196u8, 229u8, 48u8, 102u8, 85u8, 166u8, 19u8, 51u8, 67u8,
                                63u8, 167u8, 228u8, 173u8, 78u8, 180u8, 6u8, 158u8, 225u8, 188u8,
                                161u8, 106u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn observing(
                    &self,
                    _0: &'a runtime_types::pallet_octopus_appchain::Observation<
                        ::subxt::sp_core::crypto::AccountId32,
                    >,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Observing>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                182u8, 35u8, 177u8, 47u8, 24u8, 161u8, 14u8, 53u8, 23u8, 107u8,
                                15u8, 65u8, 61u8, 236u8, 118u8, 112u8, 24u8, 219u8, 244u8, 221u8,
                                171u8, 166u8, 201u8, 1u8, 112u8, 214u8, 162u8, 195u8, 175u8, 78u8,
                                227u8, 15u8,
                            ]
                        {
                            let entry = Observing(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn observing_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Observing<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Observing>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                182u8, 35u8, 177u8, 47u8, 24u8, 161u8, 14u8, 53u8, 23u8, 107u8,
                                15u8, 65u8, 61u8, 236u8, 118u8, 112u8, 24u8, 219u8, 244u8, 221u8,
                                171u8, 166u8, 201u8, 1u8, 112u8, 214u8, 162u8, 195u8, 175u8, 78u8,
                                227u8, 15u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn pallet_account(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::sp_core::crypto::AccountId32,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PalletAccount>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                193u8, 181u8, 61u8, 221u8, 62u8, 128u8, 56u8, 158u8, 50u8, 117u8,
                                6u8, 155u8, 231u8, 161u8, 103u8, 108u8, 83u8, 43u8, 11u8, 222u8,
                                85u8, 22u8, 60u8, 184u8, 45u8, 70u8, 240u8, 196u8, 147u8, 228u8,
                                76u8, 148u8,
                            ]
                        {
                            let entry = PalletAccount;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn notification_history(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_octopus_appchain::NotificationResult,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NotificationHistory>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                218u8, 142u8, 153u8, 243u8, 235u8, 241u8, 29u8, 53u8, 118u8, 229u8,
                                238u8, 67u8, 165u8, 221u8, 187u8, 164u8, 248u8, 47u8, 245u8, 56u8,
                                52u8, 56u8, 101u8, 84u8, 148u8, 199u8, 181u8, 195u8, 76u8, 190u8,
                                48u8, 241u8,
                            ]
                        {
                            let entry = NotificationHistory(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn notification_history_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, NotificationHistory<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NotificationHistory>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                218u8, 142u8, 153u8, 243u8, 235u8, 241u8, 29u8, 53u8, 118u8, 229u8,
                                238u8, 67u8, 165u8, 221u8, 187u8, 164u8, 248u8, 47u8, 245u8, 56u8,
                                52u8, 56u8, 101u8, 84u8, 148u8, 199u8, 181u8, 195u8, 76u8, 190u8,
                                48u8, 241u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " A grace period after we send transaction."]
                #[doc = ""]
                #[doc = " To avoid sending too many transactions, we only attempt to send one"]
                #[doc = " every `GRACE_PERIOD` blocks. We use Local Storage to coordinate"]
                #[doc = " sending between distinct runs of this offchain worker."]
                pub fn grace_period(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("OctopusAppchain", "GracePeriod")?
                        == [
                            186u8, 247u8, 209u8, 75u8, 234u8, 165u8, 168u8, 20u8, 46u8, 13u8,
                            122u8, 144u8, 170u8, 135u8, 80u8, 47u8, 189u8, 64u8, 113u8, 223u8,
                            206u8, 57u8, 246u8, 194u8, 60u8, 54u8, 0u8, 131u8, 124u8, 242u8, 41u8,
                            116u8,
                        ]
                    {
                        let pallet = metadata.pallet("OctopusAppchain")?;
                        let constant = pallet.constant("GracePeriod")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " A configuration for base priority of unsigned transactions."]
                #[doc = ""]
                #[doc = " This is exposed so that it can be tuned for particular runtime, when"]
                #[doc = " multiple pallets send unsigned transactions."]
                pub fn unsigned_priority(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("OctopusAppchain", "UnsignedPriority")?
                        == [
                            235u8, 29u8, 23u8, 191u8, 31u8, 101u8, 167u8, 228u8, 144u8, 234u8,
                            94u8, 85u8, 113u8, 178u8, 135u8, 146u8, 65u8, 220u8, 233u8, 202u8,
                            200u8, 166u8, 217u8, 159u8, 109u8, 216u8, 3u8, 7u8, 47u8, 210u8, 35u8,
                            116u8,
                        ]
                    {
                        let pallet = metadata.pallet("OctopusAppchain")?;
                        let constant = pallet.constant("UnsignedPriority")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn request_event_limit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("OctopusAppchain", "RequestEventLimit")?
                        == [
                            40u8, 22u8, 193u8, 130u8, 169u8, 43u8, 232u8, 243u8, 184u8, 208u8,
                            142u8, 85u8, 148u8, 194u8, 126u8, 240u8, 180u8, 80u8, 218u8, 198u8,
                            239u8, 182u8, 50u8, 117u8, 57u8, 231u8, 204u8, 127u8, 140u8, 93u8,
                            162u8, 181u8,
                        ]
                    {
                        let pallet = metadata.pallet("OctopusAppchain")?;
                        let constant = pallet.constant("RequestEventLimit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod octopus_lpos {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SetHistoryDepth {
                #[codec(compact)]
                pub new_history_depth: ::core::primitive::u32,
                #[codec(compact)]
                pub era_items_deleted: ::core::primitive::u32,
            }
            impl ::subxt::Call for SetHistoryDepth {
                const PALLET: &'static str = "OctopusLpos";
                const FUNCTION: &'static str = "set_history_depth";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            pub struct ForceSetEraPayout {
                pub era_payout: ::core::primitive::u128,
            }
            impl ::subxt::Call for ForceSetEraPayout {
                const PALLET: &'static str = "OctopusLpos";
                const FUNCTION: &'static str = "force_set_era_payout";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Set `HistoryDepth` value. This function will delete any history information"]
                #[doc = "when `HistoryDepth` is reduced."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `new_history_depth`: The new history depth you would like to set."]
                #[doc = "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This"]
                #[doc = "  should report all the storage items that will be deleted by clearing old era history."]
                #[doc = "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an"]
                #[doc = "  accurate number."]
                #[doc = ""]
                #[doc = "Origin must be root."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- E: Number of history depths removed, i.e. 10 -> 7 = 3"]
                #[doc = "- Weight: O(E)"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Reads: Current Era, History Depth"]
                #[doc = "    - Writes: History Depth"]
                #[doc = "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs"]
                #[doc = "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,"]
                #[doc = "      ErasStartSessionIndex"]
                #[doc = "# </weight>"]
                pub fn set_history_depth(
                    &self,
                    new_history_depth: ::core::primitive::u32,
                    era_items_deleted: ::core::primitive::u32,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SetHistoryDepth,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SetHistoryDepth>()?
                    };
                    if runtime_call_hash
                        == [
                            128u8, 149u8, 139u8, 192u8, 213u8, 239u8, 248u8, 215u8, 57u8, 145u8,
                            177u8, 225u8, 43u8, 214u8, 228u8, 14u8, 213u8, 181u8, 18u8, 40u8,
                            242u8, 1u8, 210u8, 87u8, 143u8, 78u8, 0u8, 23u8, 145u8, 46u8, 210u8,
                            168u8,
                        ]
                    {
                        let call = SetHistoryDepth {
                            new_history_depth,
                            era_items_deleted,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn force_set_era_payout(
                    &self,
                    era_payout: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ForceSetEraPayout,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ForceSetEraPayout>()?
                    };
                    if runtime_call_hash
                        == [
                            31u8, 235u8, 56u8, 254u8, 54u8, 192u8, 0u8, 180u8, 57u8, 94u8, 106u8,
                            16u8, 80u8, 207u8, 215u8, 86u8, 231u8, 74u8, 87u8, 174u8, 62u8, 71u8,
                            31u8, 202u8, 30u8, 251u8, 225u8, 108u8, 217u8, 26u8, 173u8, 62u8,
                        ]
                    {
                        let call = ForceSetEraPayout { era_payout };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_octopus_lpos::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "Notifies the mainchain to prepare the next era."]
            pub struct PlanNewEra {
                pub era_index: ::core::primitive::u32,
            }
            impl ::subxt::Event for PlanNewEra {
                const PALLET: &'static str = "OctopusLpos";
                const EVENT: &'static str = "PlanNewEra";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Failed to notify the mainchain to prepare the next era."]
            pub struct PlanNewEraFailed;
            impl ::subxt::Event for PlanNewEraFailed {
                const PALLET: &'static str = "OctopusLpos";
                const EVENT: &'static str = "PlanNewEraFailed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Trigger new era."]
            pub struct TriggerNewEra;
            impl ::subxt::Event for TriggerNewEra {
                const PALLET: &'static str = "OctopusLpos";
                const EVENT: &'static str = "TriggerNewEra";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Notifies the mainchain to pay the validator rewards of `era_index`."]
            #[doc = "`excluded_validators` were excluded because they were not working properly."]
            pub struct EraPayout {
                pub era_index: ::core::primitive::u32,
                pub excluded_validators: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
            }
            impl ::subxt::Event for EraPayout {
                const PALLET: &'static str = "OctopusLpos";
                const EVENT: &'static str = "EraPayout";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "Failed to notify the mainchain to pay the validator rewards of `era_index`."]
            pub struct EraPayoutFailed {
                pub era_index: ::core::primitive::u32,
            }
            impl ::subxt::Event for EraPayoutFailed {
                const PALLET: &'static str = "OctopusLpos";
                const EVENT: &'static str = "EraPayoutFailed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct HistoryDepth;
            impl ::subxt::StorageEntry for HistoryDepth {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "HistoryDepth";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct CurrentEra;
            impl ::subxt::StorageEntry for CurrentEra {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "CurrentEra";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct ActiveEra;
            impl ::subxt::StorageEntry for ActiveEra {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "ActiveEra";
                type Value = runtime_types::pallet_octopus_lpos::ActiveEraInfo;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct ErasStartSessionIndex<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for ErasStartSessionIndex<'_> {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "ErasStartSessionIndex";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct ErasStakers<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::StorageEntry for ErasStakers<'_> {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "ErasStakers";
                type Value = ::core::primitive::u128;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
                        ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
                    ])
                }
            }
            pub struct ErasValidatorReward<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for ErasValidatorReward<'_> {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "ErasValidatorReward";
                type Value = ::core::primitive::u128;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct ErasRewardPoints<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for ErasRewardPoints<'_> {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "ErasRewardPoints";
                type Value = runtime_types::pallet_octopus_lpos::EraRewardPoints<
                    ::subxt::sp_core::crypto::AccountId32,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct ErasTotalStake<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for ErasTotalStake<'_> {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "ErasTotalStake";
                type Value = ::core::primitive::u128;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct BondedEras;
            impl ::subxt::StorageEntry for BondedEras {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "BondedEras";
                type Value = ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct CurrentPlannedSession;
            impl ::subxt::StorageEntry for CurrentPlannedSession {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "CurrentPlannedSession";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct EraPayout;
            impl ::subxt::StorageEntry for EraPayout {
                const PALLET: &'static str = "OctopusLpos";
                const STORAGE: &'static str = "EraPayout";
                type Value = ::core::primitive::u128;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Number of eras to keep in history."]
                #[doc = ""]
                #[doc = " Information is kept for eras in `[current_era - history_depth; current_era]`."]
                #[doc = ""]
                #[doc = " Must be more than the number of eras delayed by session otherwise. I.e. active era must"]
                #[doc = " always be in history. I.e. `active_era > current_era - history_depth` must be"]
                #[doc = " guaranteed."]
                pub fn history_depth(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<HistoryDepth>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                41u8, 54u8, 118u8, 245u8, 75u8, 136u8, 220u8, 25u8, 55u8, 255u8,
                                149u8, 177u8, 49u8, 155u8, 167u8, 188u8, 170u8, 29u8, 251u8, 44u8,
                                240u8, 250u8, 225u8, 205u8, 102u8, 74u8, 25u8, 47u8, 52u8, 235u8,
                                204u8, 167u8,
                            ]
                        {
                            let entry = HistoryDepth;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The current era index."]
                #[doc = ""]
                #[doc = " This is the latest planned era, depending on how the Session pallet queues the validator"]
                #[doc = " set, it might be active or not."]
                pub fn current_era(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::core::primitive::u32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<CurrentEra>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                105u8, 150u8, 49u8, 122u8, 4u8, 78u8, 8u8, 121u8, 34u8, 136u8,
                                157u8, 227u8, 59u8, 139u8, 7u8, 253u8, 7u8, 10u8, 117u8, 71u8,
                                240u8, 74u8, 86u8, 36u8, 198u8, 37u8, 153u8, 93u8, 196u8, 22u8,
                                192u8, 243u8,
                            ]
                        {
                            let entry = CurrentEra;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The active era information, it holds index and start."]
                #[doc = ""]
                #[doc = " The active era is the era being currently rewarded. Validator set of this era must be"]
                #[doc = " equal to [`SessionInterface::validators`]."]
                pub fn active_era(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<runtime_types::pallet_octopus_lpos::ActiveEraInfo>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ActiveEra>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                134u8, 251u8, 154u8, 229u8, 115u8, 221u8, 194u8, 18u8, 186u8,
                                224u8, 229u8, 98u8, 62u8, 124u8, 56u8, 81u8, 224u8, 104u8, 114u8,
                                2u8, 81u8, 33u8, 217u8, 208u8, 137u8, 154u8, 31u8, 19u8, 253u8,
                                83u8, 55u8, 142u8,
                            ]
                        {
                            let entry = ActiveEra;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
                #[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]
                pub fn eras_start_session_index(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::core::primitive::u32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasStartSessionIndex>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                92u8, 157u8, 168u8, 144u8, 132u8, 3u8, 212u8, 80u8, 230u8, 229u8,
                                251u8, 218u8, 97u8, 55u8, 79u8, 100u8, 163u8, 91u8, 32u8, 246u8,
                                122u8, 78u8, 149u8, 214u8, 103u8, 249u8, 119u8, 20u8, 101u8, 116u8,
                                110u8, 185u8,
                            ]
                        {
                            let entry = ErasStartSessionIndex(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The session index at which the era start for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Note: This tracks the starting session (i.e. session index when era start being active)"]
                #[doc = " for the eras in `[CurrentEra - HISTORY_DEPTH, CurrentEra]`."]
                pub fn eras_start_session_index_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ErasStartSessionIndex<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasStartSessionIndex>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                92u8, 157u8, 168u8, 144u8, 132u8, 3u8, 212u8, 80u8, 230u8, 229u8,
                                251u8, 218u8, 97u8, 55u8, 79u8, 100u8, 163u8, 91u8, 32u8, 246u8,
                                122u8, 78u8, 149u8, 214u8, 103u8, 249u8, 119u8, 20u8, 101u8, 116u8,
                                110u8, 185u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
                pub fn eras_stakers(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    _1: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasStakers>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                85u8, 187u8, 55u8, 106u8, 130u8, 221u8, 44u8, 232u8, 36u8, 206u8,
                                79u8, 165u8, 220u8, 24u8, 252u8, 25u8, 176u8, 126u8, 122u8, 39u8,
                                241u8, 172u8, 250u8, 9u8, 191u8, 142u8, 223u8, 117u8, 255u8, 182u8,
                                26u8, 235u8,
                            ]
                        {
                            let entry = ErasStakers(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Exposure of validator at era."]
                #[doc = ""]
                #[doc = " This is keyed first by the era index to allow bulk deletion and then the stash account."]
                #[doc = ""]
                #[doc = " Is it removed after `HISTORY_DEPTH` eras."]
                #[doc = " If stakers hasn't been set or has been removed then empty exposure is returned."]
                pub fn eras_stakers_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ErasStakers<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasStakers>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                85u8, 187u8, 55u8, 106u8, 130u8, 221u8, 44u8, 232u8, 36u8, 206u8,
                                79u8, 165u8, 220u8, 24u8, 252u8, 25u8, 176u8, 126u8, 122u8, 39u8,
                                241u8, 172u8, 250u8, 9u8, 191u8, 142u8, 223u8, 117u8, 255u8, 182u8,
                                26u8, 235u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]
                pub fn eras_validator_reward(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::core::primitive::u128>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasValidatorReward>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                87u8, 80u8, 156u8, 123u8, 107u8, 77u8, 203u8, 37u8, 231u8, 84u8,
                                124u8, 155u8, 227u8, 212u8, 212u8, 179u8, 84u8, 161u8, 223u8,
                                255u8, 254u8, 107u8, 52u8, 89u8, 98u8, 169u8, 136u8, 241u8, 104u8,
                                3u8, 244u8, 161u8,
                            ]
                        {
                            let entry = ErasValidatorReward(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The total validator era payout for the last `HISTORY_DEPTH` eras."]
                #[doc = ""]
                #[doc = " Eras that haven't finished yet or has been removed doesn't have reward."]
                pub fn eras_validator_reward_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ErasValidatorReward<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasValidatorReward>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                87u8, 80u8, 156u8, 123u8, 107u8, 77u8, 203u8, 37u8, 231u8, 84u8,
                                124u8, 155u8, 227u8, 212u8, 212u8, 179u8, 84u8, 161u8, 223u8,
                                255u8, 254u8, 107u8, 52u8, 89u8, 98u8, 169u8, 136u8, 241u8, 104u8,
                                3u8, 244u8, 161u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
                #[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]
                pub fn eras_reward_points(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_octopus_lpos::EraRewardPoints<
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasRewardPoints>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                76u8, 221u8, 158u8, 62u8, 3u8, 254u8, 139u8, 170u8, 103u8, 218u8,
                                191u8, 103u8, 57u8, 212u8, 208u8, 7u8, 105u8, 52u8, 117u8, 173u8,
                                8u8, 34u8, 82u8, 141u8, 51u8, 72u8, 243u8, 56u8, 206u8, 206u8,
                                48u8, 140u8,
                            ]
                        {
                            let entry = ErasRewardPoints(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Rewards for the last `HISTORY_DEPTH` eras."]
                #[doc = " If reward hasn't been set or has been removed then 0 reward is returned."]
                pub fn eras_reward_points_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ErasRewardPoints<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasRewardPoints>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                76u8, 221u8, 158u8, 62u8, 3u8, 254u8, 139u8, 170u8, 103u8, 218u8,
                                191u8, 103u8, 57u8, 212u8, 208u8, 7u8, 105u8, 52u8, 117u8, 173u8,
                                8u8, 34u8, 82u8, 141u8, 51u8, 72u8, 243u8, 56u8, 206u8, 206u8,
                                48u8, 140u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
                #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
                pub fn eras_total_stake(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasTotalStake>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                224u8, 240u8, 168u8, 69u8, 148u8, 140u8, 249u8, 240u8, 4u8, 46u8,
                                77u8, 11u8, 224u8, 65u8, 26u8, 239u8, 1u8, 110u8, 53u8, 11u8,
                                247u8, 235u8, 142u8, 234u8, 22u8, 43u8, 24u8, 36u8, 37u8, 43u8,
                                170u8, 40u8,
                            ]
                        {
                            let entry = ErasTotalStake(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The total amount staked for the last `HISTORY_DEPTH` eras."]
                #[doc = " If total hasn't been set or has been removed then 0 stake is returned."]
                pub fn eras_total_stake_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ErasTotalStake<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ErasTotalStake>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                224u8, 240u8, 168u8, 69u8, 148u8, 140u8, 249u8, 240u8, 4u8, 46u8,
                                77u8, 11u8, 224u8, 65u8, 26u8, 239u8, 1u8, 110u8, 53u8, 11u8,
                                247u8, 235u8, 142u8, 234u8, 22u8, 43u8, 24u8, 36u8, 37u8, 43u8,
                                170u8, 40u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " A mapping from still-bonded eras to the first session index of that era."]
                #[doc = ""]
                #[doc = " Must contains information for eras for the range:"]
                #[doc = " `[active_era - bounding_duration; active_era]`"]
                pub fn bonded_eras(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<(::core::primitive::u32, ::core::primitive::u32)>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<BondedEras>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                243u8, 162u8, 236u8, 198u8, 122u8, 182u8, 37u8, 55u8, 171u8, 156u8,
                                235u8, 223u8, 226u8, 129u8, 89u8, 206u8, 2u8, 155u8, 222u8, 154u8,
                                116u8, 124u8, 4u8, 119u8, 155u8, 94u8, 248u8, 30u8, 171u8, 51u8,
                                78u8, 106u8,
                            ]
                        {
                            let entry = BondedEras;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The last planned session scheduled by the session pallet."]
                #[doc = ""]
                #[doc = " This is basically in sync with the call to [`SessionManager::new_session`]."]
                pub fn current_planned_session(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<CurrentPlannedSession>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                38u8, 22u8, 56u8, 250u8, 17u8, 154u8, 99u8, 37u8, 155u8, 253u8,
                                100u8, 117u8, 5u8, 239u8, 31u8, 190u8, 53u8, 241u8, 11u8, 185u8,
                                163u8, 227u8, 10u8, 77u8, 210u8, 64u8, 156u8, 218u8, 105u8, 16u8,
                                1u8, 57u8,
                            ]
                        {
                            let entry = CurrentPlannedSession;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The payout for validators and the system for the current era."]
                pub fn era_payout(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<EraPayout>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                170u8, 205u8, 212u8, 96u8, 48u8, 137u8, 153u8, 23u8, 221u8, 85u8,
                                55u8, 48u8, 57u8, 151u8, 98u8, 86u8, 82u8, 140u8, 29u8, 186u8,
                                244u8, 84u8, 188u8, 25u8, 69u8, 183u8, 21u8, 189u8, 164u8, 101u8,
                                25u8, 233u8,
                            ]
                        {
                            let entry = EraPayout;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Number of sessions per era."]
                pub fn sessions_per_era(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("OctopusLpos", "SessionsPerEra")?
                        == [
                            73u8, 207u8, 178u8, 212u8, 159u8, 9u8, 41u8, 31u8, 205u8, 221u8, 166u8,
                            159u8, 104u8, 218u8, 113u8, 160u8, 174u8, 66u8, 95u8, 0u8, 237u8, 42u8,
                            120u8, 171u8, 68u8, 78u8, 136u8, 162u8, 163u8, 225u8, 199u8, 138u8,
                        ]
                    {
                        let pallet = metadata.pallet("OctopusLpos")?;
                        let constant = pallet.constant("SessionsPerEra")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn blocks_per_era(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("OctopusLpos", "BlocksPerEra")?
                        == [
                            237u8, 188u8, 9u8, 53u8, 207u8, 253u8, 43u8, 105u8, 115u8, 126u8,
                            252u8, 130u8, 131u8, 190u8, 103u8, 88u8, 221u8, 34u8, 253u8, 92u8,
                            121u8, 214u8, 5u8, 229u8, 245u8, 21u8, 34u8, 114u8, 115u8, 16u8, 69u8,
                            166u8,
                        ]
                    {
                        let pallet = metadata.pallet("OctopusLpos")?;
                        let constant = pallet.constant("BlocksPerEra")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " Number of eras that staked funds must remain bonded for."]
                pub fn bonding_duration(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("OctopusLpos", "BondingDuration")?
                        == [
                            117u8, 2u8, 56u8, 16u8, 159u8, 102u8, 149u8, 196u8, 2u8, 213u8, 25u8,
                            224u8, 92u8, 126u8, 224u8, 29u8, 59u8, 121u8, 215u8, 129u8, 144u8,
                            144u8, 128u8, 154u8, 133u8, 111u8, 55u8, 39u8, 28u8, 45u8, 198u8, 55u8,
                        ]
                    {
                        let pallet = metadata.pallet("OctopusLpos")?;
                        let constant = pallet.constant("BondingDuration")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod octopus_upward_messages {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_octopus_upward_messages::pallet::Event;
        pub mod events {
            use super::runtime_types;
        }
        pub mod storage {
            use super::runtime_types;
            pub struct MessageQueue;
            impl ::subxt::StorageEntry for MessageQueue {
                const PALLET: &'static str = "OctopusUpwardMessages";
                const STORAGE: &'static str = "MessageQueue";
                type Value =
                    ::std::vec::Vec<runtime_types::pallet_octopus_upward_messages::Message>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Nonce;
            impl ::subxt::StorageEntry for Nonce {
                const PALLET: &'static str = "OctopusUpwardMessages";
                const STORAGE: &'static str = "Nonce";
                type Value = ::core::primitive::u64;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                pub fn message_queue(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<runtime_types::pallet_octopus_upward_messages::Message>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<MessageQueue>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                98u8, 100u8, 179u8, 90u8, 110u8, 117u8, 84u8, 9u8, 143u8, 123u8,
                                220u8, 16u8, 230u8, 228u8, 144u8, 88u8, 88u8, 8u8, 108u8, 82u8,
                                49u8, 222u8, 248u8, 53u8, 166u8, 68u8, 94u8, 104u8, 17u8, 143u8,
                                95u8, 139u8,
                            ]
                        {
                            let entry = MessageQueue;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn nonce(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Nonce>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                122u8, 169u8, 95u8, 131u8, 85u8, 32u8, 154u8, 114u8, 143u8, 56u8,
                                12u8, 182u8, 64u8, 150u8, 241u8, 249u8, 254u8, 251u8, 160u8, 235u8,
                                192u8, 41u8, 101u8, 232u8, 186u8, 108u8, 187u8, 149u8, 210u8, 91u8,
                                179u8, 98u8,
                            ]
                        {
                            let entry = Nonce;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The limit for submit messages."]
                pub fn upward_messages_limit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("OctopusUpwardMessages", "UpwardMessagesLimit")?
                        == [
                            58u8, 44u8, 120u8, 149u8, 124u8, 229u8, 134u8, 99u8, 16u8, 140u8,
                            161u8, 12u8, 225u8, 2u8, 2u8, 38u8, 10u8, 84u8, 178u8, 88u8, 209u8,
                            83u8, 147u8, 164u8, 33u8, 119u8, 56u8, 118u8, 210u8, 182u8, 56u8, 79u8,
                        ]
                    {
                        let pallet = metadata.pallet("OctopusUpwardMessages")?;
                        let constant = pallet.constant("UpwardMessagesLimit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod session {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SetKeys {
                pub keys: runtime_types::appchain_deip_runtime::opaque::SessionKeys,
                pub proof: ::std::vec::Vec<::core::primitive::u8>,
            }
            impl ::subxt::Call for SetKeys {
                const PALLET: &'static str = "Session";
                const FUNCTION: &'static str = "set_keys";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct PurgeKeys;
            impl ::subxt::Call for PurgeKeys {
                const PALLET: &'static str = "Session";
                const FUNCTION: &'static str = "purge_keys";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Sets the session key(s) of the function caller to `keys`."]
                #[doc = "Allows an account to set its session key prior to becoming a validator."]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be signed."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
                #[doc = "  `T::Keys::key_ids()` which is fixed."]
                #[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
                #[doc = "- DbWrites: `origin account`, `NextKeys`"]
                #[doc = "- DbReads per key id: `KeyOwner`"]
                #[doc = "- DbWrites per key id: `KeyOwner`"]
                #[doc = "# </weight>"]
                pub fn set_keys(
                    &self,
                    keys: runtime_types::appchain_deip_runtime::opaque::SessionKeys,
                    proof: ::std::vec::Vec<::core::primitive::u8>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SetKeys,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SetKeys>()?
                    };
                    if runtime_call_hash
                        == [
                            224u8, 124u8, 236u8, 244u8, 237u8, 183u8, 209u8, 133u8, 254u8, 17u8,
                            41u8, 153u8, 177u8, 1u8, 127u8, 11u8, 170u8, 233u8, 53u8, 216u8, 222u8,
                            230u8, 87u8, 129u8, 104u8, 215u8, 162u8, 68u8, 110u8, 4u8, 108u8, 0u8,
                        ]
                    {
                        let call = SetKeys { keys, proof };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Removes any session key(s) of the function caller."]
                #[doc = ""]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                #[doc = "usually means being a stash account)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
                #[doc = "  of `T::Keys::key_ids()` which is fixed."]
                #[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
                #[doc = "- DbWrites: `NextKeys`, `origin account`"]
                #[doc = "- DbWrites per key id: `KeyOwner`"]
                #[doc = "# </weight>"]
                pub fn purge_keys(
                    &self,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        PurgeKeys,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<PurgeKeys>()?
                    };
                    if runtime_call_hash
                        == [
                            200u8, 255u8, 4u8, 213u8, 188u8, 92u8, 99u8, 116u8, 163u8, 152u8, 29u8,
                            35u8, 133u8, 119u8, 246u8, 44u8, 91u8, 31u8, 145u8, 23u8, 213u8, 64u8,
                            71u8, 242u8, 207u8, 239u8, 231u8, 37u8, 61u8, 63u8, 190u8, 35u8,
                        ]
                    {
                        let call = PurgeKeys {};
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_session::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "New session has happened. Note that the argument is the session index, not the"]
            #[doc = "block number as the type might suggest."]
            pub struct NewSession {
                pub session_index: ::core::primitive::u32,
            }
            impl ::subxt::Event for NewSession {
                const PALLET: &'static str = "Session";
                const EVENT: &'static str = "NewSession";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct Validators;
            impl ::subxt::StorageEntry for Validators {
                const PALLET: &'static str = "Session";
                const STORAGE: &'static str = "Validators";
                type Value = ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct CurrentIndex;
            impl ::subxt::StorageEntry for CurrentIndex {
                const PALLET: &'static str = "Session";
                const STORAGE: &'static str = "CurrentIndex";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct QueuedChanged;
            impl ::subxt::StorageEntry for QueuedChanged {
                const PALLET: &'static str = "Session";
                const STORAGE: &'static str = "QueuedChanged";
                type Value = ::core::primitive::bool;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct QueuedKeys;
            impl ::subxt::StorageEntry for QueuedKeys {
                const PALLET: &'static str = "Session";
                const STORAGE: &'static str = "QueuedKeys";
                type Value = ::std::vec::Vec<(
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::appchain_deip_runtime::opaque::SessionKeys,
                )>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct DisabledValidators;
            impl ::subxt::StorageEntry for DisabledValidators {
                const PALLET: &'static str = "Session";
                const STORAGE: &'static str = "DisabledValidators";
                type Value = ::std::vec::Vec<::core::primitive::u32>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NextKeys<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::StorageEntry for NextKeys<'_> {
                const PALLET: &'static str = "Session";
                const STORAGE: &'static str = "NextKeys";
                type Value = runtime_types::appchain_deip_runtime::opaque::SessionKeys;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct KeyOwner<'a>(
                pub &'a runtime_types::sp_core::crypto::KeyTypeId,
                pub &'a [::core::primitive::u8],
            );
            impl ::subxt::StorageEntry for KeyOwner<'_> {
                const PALLET: &'static str = "Session";
                const STORAGE: &'static str = "KeyOwner";
                type Value = ::subxt::sp_core::crypto::AccountId32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &(&self.0, &self.1),
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The current set of validators."]
                pub fn validators(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Validators>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                186u8, 248u8, 234u8, 74u8, 245u8, 141u8, 90u8, 152u8, 226u8, 220u8,
                                255u8, 104u8, 174u8, 1u8, 37u8, 152u8, 23u8, 208u8, 25u8, 49u8,
                                33u8, 253u8, 254u8, 251u8, 141u8, 16u8, 18u8, 175u8, 196u8, 188u8,
                                163u8, 209u8,
                            ]
                        {
                            let entry = Validators;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Current index of the session."]
                pub fn current_index(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<CurrentIndex>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                148u8, 179u8, 159u8, 15u8, 197u8, 95u8, 214u8, 30u8, 209u8, 251u8,
                                183u8, 231u8, 91u8, 25u8, 181u8, 191u8, 143u8, 252u8, 227u8, 80u8,
                                159u8, 66u8, 194u8, 67u8, 113u8, 74u8, 111u8, 91u8, 218u8, 187u8,
                                130u8, 40u8,
                            ]
                        {
                            let entry = CurrentIndex;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " True if the underlying economic identities or weighting behind the validators"]
                #[doc = " has changed in the queued validator set."]
                pub fn queued_changed(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::bool, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<QueuedChanged>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                105u8, 140u8, 235u8, 218u8, 96u8, 100u8, 252u8, 10u8, 58u8, 221u8,
                                244u8, 251u8, 67u8, 91u8, 80u8, 202u8, 152u8, 42u8, 50u8, 113u8,
                                200u8, 247u8, 59u8, 213u8, 77u8, 195u8, 1u8, 150u8, 220u8, 18u8,
                                245u8, 46u8,
                            ]
                        {
                            let entry = QueuedChanged;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The queued keys for the next session. When the next session begins, these keys"]
                #[doc = " will be used to determine the validator's session keys."]
                pub fn queued_keys(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<(
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::appchain_deip_runtime::opaque::SessionKeys,
                        )>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<QueuedKeys>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                139u8, 177u8, 78u8, 136u8, 47u8, 183u8, 45u8, 83u8, 48u8, 164u8,
                                218u8, 50u8, 51u8, 203u8, 196u8, 246u8, 48u8, 241u8, 9u8, 157u8,
                                254u8, 22u8, 123u8, 219u8, 243u8, 42u8, 36u8, 175u8, 159u8, 238u8,
                                242u8, 204u8,
                            ]
                        {
                            let entry = QueuedKeys;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Indices of disabled validators."]
                #[doc = ""]
                #[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
                #[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
                #[doc = " a new set of identities."]
                pub fn disabled_validators(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<::core::primitive::u32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DisabledValidators>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                135u8, 22u8, 22u8, 97u8, 82u8, 217u8, 144u8, 141u8, 121u8, 240u8,
                                189u8, 16u8, 176u8, 88u8, 177u8, 31u8, 20u8, 242u8, 73u8, 104u8,
                                11u8, 110u8, 214u8, 34u8, 52u8, 217u8, 106u8, 33u8, 174u8, 174u8,
                                198u8, 84u8,
                            ]
                        {
                            let entry = DisabledValidators;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::appchain_deip_runtime::opaque::SessionKeys,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextKeys>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                25u8, 113u8, 96u8, 196u8, 191u8, 47u8, 173u8, 101u8, 50u8, 237u8,
                                231u8, 247u8, 60u8, 130u8, 31u8, 185u8, 57u8, 206u8, 185u8, 84u8,
                                45u8, 32u8, 242u8, 196u8, 181u8, 159u8, 121u8, 140u8, 12u8, 53u8,
                                174u8, 144u8,
                            ]
                        {
                            let entry = NextKeys(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, NextKeys<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextKeys>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                25u8, 113u8, 96u8, 196u8, 191u8, 47u8, 173u8, 101u8, 50u8, 237u8,
                                231u8, 247u8, 60u8, 130u8, 31u8, 185u8, 57u8, 206u8, 185u8, 84u8,
                                45u8, 32u8, 242u8, 196u8, 181u8, 159u8, 121u8, 140u8, 12u8, 53u8,
                                174u8, 144u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner(
                    &self,
                    _0: &'a runtime_types::sp_core::crypto::KeyTypeId,
                    _1: &'a [::core::primitive::u8],
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<KeyOwner>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                49u8, 245u8, 212u8, 141u8, 211u8, 208u8, 109u8, 102u8, 249u8,
                                161u8, 41u8, 93u8, 220u8, 230u8, 14u8, 59u8, 251u8, 176u8, 33u8,
                                127u8, 93u8, 149u8, 205u8, 229u8, 113u8, 129u8, 162u8, 177u8,
                                155u8, 216u8, 151u8, 57u8,
                            ]
                        {
                            let entry = KeyOwner(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, KeyOwner<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<KeyOwner>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                49u8, 245u8, 212u8, 141u8, 211u8, 208u8, 109u8, 102u8, 249u8,
                                161u8, 41u8, 93u8, 220u8, 230u8, 14u8, 59u8, 251u8, 176u8, 33u8,
                                127u8, 93u8, 149u8, 205u8, 229u8, 113u8, 129u8, 162u8, 177u8,
                                155u8, 216u8, 151u8, 57u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
    }
    pub mod grandpa {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ReportEquivocation {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_finality_grandpa::EquivocationProof<
                        ::subxt::sp_core::H256,
                        ::core::primitive::u32,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            impl ::subxt::Call for ReportEquivocation {
                const PALLET: &'static str = "Grandpa";
                const FUNCTION: &'static str = "report_equivocation";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ReportEquivocationUnsigned {
                pub equivocation_proof: ::std::boxed::Box<
                    runtime_types::sp_finality_grandpa::EquivocationProof<
                        ::subxt::sp_core::H256,
                        ::core::primitive::u32,
                    >,
                >,
                pub key_owner_proof: runtime_types::sp_session::MembershipProof,
            }
            impl ::subxt::Call for ReportEquivocationUnsigned {
                const PALLET: &'static str = "Grandpa";
                const FUNCTION: &'static str = "report_equivocation_unsigned";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct NoteStalled {
                pub delay: ::core::primitive::u32,
                pub best_finalized_block_number: ::core::primitive::u32,
            }
            impl ::subxt::Call for NoteStalled {
                const PALLET: &'static str = "Grandpa";
                const FUNCTION: &'static str = "note_stalled";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                pub fn report_equivocation(
                    &self,
                    equivocation_proof: runtime_types::sp_finality_grandpa::EquivocationProof<
                        ::subxt::sp_core::H256,
                        ::core::primitive::u32,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ReportEquivocation,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ReportEquivocation>()?
                    };
                    if runtime_call_hash
                        == [
                            230u8, 252u8, 24u8, 207u8, 164u8, 127u8, 177u8, 30u8, 113u8, 175u8,
                            207u8, 252u8, 230u8, 225u8, 181u8, 190u8, 236u8, 110u8, 145u8, 168u8,
                            200u8, 134u8, 88u8, 234u8, 231u8, 45u8, 149u8, 169u8, 155u8, 114u8,
                            62u8, 65u8,
                        ]
                    {
                        let call = ReportEquivocation {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                #[doc = ""]
                #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                #[doc = "if the block author is defined it will be defined as the equivocation"]
                #[doc = "reporter."]
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof: runtime_types::sp_finality_grandpa::EquivocationProof<
                        ::subxt::sp_core::H256,
                        ::core::primitive::u32,
                    >,
                    key_owner_proof: runtime_types::sp_session::MembershipProof,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ReportEquivocationUnsigned,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ReportEquivocationUnsigned>()?
                    };
                    if runtime_call_hash
                        == [
                            141u8, 235u8, 27u8, 135u8, 124u8, 124u8, 234u8, 51u8, 100u8, 105u8,
                            188u8, 248u8, 133u8, 10u8, 84u8, 14u8, 40u8, 235u8, 14u8, 107u8, 63u8,
                            148u8, 107u8, 172u8, 136u8, 159u8, 86u8, 23u8, 145u8, 221u8, 93u8,
                            206u8,
                        ]
                    {
                        let call = ReportEquivocationUnsigned {
                            equivocation_proof: ::std::boxed::Box::new(equivocation_proof),
                            key_owner_proof,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Note that the current authority set of the GRANDPA finality gadget has"]
                #[doc = "stalled. This will trigger a forced authority set change at the beginning"]
                #[doc = "of the next session, to be enacted `delay` blocks after that. The delay"]
                #[doc = "should be high enough to safely assume that the block signalling the"]
                #[doc = "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters"]
                #[doc = "will start the new authority set using the given finalized block as base."]
                #[doc = "Only callable by root."]
                pub fn note_stalled(
                    &self,
                    delay: ::core::primitive::u32,
                    best_finalized_block_number: ::core::primitive::u32,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        NoteStalled,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<NoteStalled>()?
                    };
                    if runtime_call_hash
                        == [
                            227u8, 98u8, 249u8, 158u8, 96u8, 124u8, 72u8, 188u8, 27u8, 215u8, 73u8,
                            62u8, 103u8, 79u8, 38u8, 48u8, 212u8, 88u8, 233u8, 187u8, 11u8, 95u8,
                            39u8, 247u8, 55u8, 184u8, 228u8, 102u8, 13u8, 251u8, 52u8, 206u8,
                        ]
                    {
                        let call = NoteStalled {
                            delay,
                            best_finalized_block_number,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_grandpa::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "New authority set has been applied."]
            pub struct NewAuthorities {
                pub authority_set: ::std::vec::Vec<(
                    runtime_types::sp_finality_grandpa::app::Public,
                    ::core::primitive::u64,
                )>,
            }
            impl ::subxt::Event for NewAuthorities {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "NewAuthorities";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Current authority set has been paused."]
            pub struct Paused;
            impl ::subxt::Event for Paused {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Paused";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Current authority set has been resumed."]
            pub struct Resumed;
            impl ::subxt::Event for Resumed {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Resumed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct State;
            impl ::subxt::StorageEntry for State {
                const PALLET: &'static str = "Grandpa";
                const STORAGE: &'static str = "State";
                type Value = runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct PendingChange;
            impl ::subxt::StorageEntry for PendingChange {
                const PALLET: &'static str = "Grandpa";
                const STORAGE: &'static str = "PendingChange";
                type Value =
                    runtime_types::pallet_grandpa::StoredPendingChange<::core::primitive::u32>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NextForced;
            impl ::subxt::StorageEntry for NextForced {
                const PALLET: &'static str = "Grandpa";
                const STORAGE: &'static str = "NextForced";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Stalled;
            impl ::subxt::StorageEntry for Stalled {
                const PALLET: &'static str = "Grandpa";
                const STORAGE: &'static str = "Stalled";
                type Value = (::core::primitive::u32, ::core::primitive::u32);
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct CurrentSetId;
            impl ::subxt::StorageEntry for CurrentSetId {
                const PALLET: &'static str = "Grandpa";
                const STORAGE: &'static str = "CurrentSetId";
                type Value = ::core::primitive::u64;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct SetIdSession<'a>(pub &'a ::core::primitive::u64);
            impl ::subxt::StorageEntry for SetIdSession<'_> {
                const PALLET: &'static str = "Grandpa";
                const STORAGE: &'static str = "SetIdSession";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Twox64Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " State of the current authority set."]
                pub fn state(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<State>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                159u8, 75u8, 78u8, 23u8, 98u8, 89u8, 239u8, 230u8, 192u8, 67u8,
                                139u8, 222u8, 151u8, 237u8, 216u8, 20u8, 235u8, 247u8, 180u8, 24u8,
                                64u8, 160u8, 58u8, 15u8, 205u8, 191u8, 120u8, 68u8, 32u8, 5u8,
                                161u8, 106u8,
                            ]
                        {
                            let entry = State;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Pending change: (signaled at, scheduled change)."]
                pub fn pending_change(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_grandpa::StoredPendingChange<
                                ::core::primitive::u32,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PendingChange>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                128u8, 176u8, 209u8, 41u8, 231u8, 111u8, 205u8, 198u8, 154u8, 44u8,
                                228u8, 231u8, 44u8, 110u8, 74u8, 9u8, 31u8, 86u8, 128u8, 244u8,
                                112u8, 21u8, 120u8, 176u8, 50u8, 213u8, 122u8, 46u8, 85u8, 255u8,
                                40u8, 173u8,
                            ]
                        {
                            let entry = PendingChange;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " next block number where we can force a change."]
                pub fn next_forced(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::core::primitive::u32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextForced>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                99u8, 43u8, 245u8, 201u8, 60u8, 9u8, 122u8, 99u8, 188u8, 29u8,
                                67u8, 6u8, 193u8, 133u8, 179u8, 67u8, 202u8, 208u8, 62u8, 179u8,
                                19u8, 169u8, 196u8, 119u8, 107u8, 75u8, 100u8, 3u8, 121u8, 18u8,
                                80u8, 156u8,
                            ]
                        {
                            let entry = NextForced;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " `true` if we are currently stalled."]
                pub fn stalled(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Stalled>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                219u8, 8u8, 37u8, 78u8, 150u8, 55u8, 0u8, 57u8, 201u8, 170u8,
                                186u8, 189u8, 56u8, 161u8, 44u8, 15u8, 53u8, 178u8, 224u8, 208u8,
                                231u8, 109u8, 14u8, 209u8, 57u8, 205u8, 237u8, 153u8, 231u8, 156u8,
                                24u8, 185u8,
                            ]
                        {
                            let entry = Stalled;
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The number of changes (both in terms of keys and underlying economic responsibilities)"]
                #[doc = " in the \"set\" of Grandpa validators from genesis."]
                pub fn current_set_id(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<CurrentSetId>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                129u8, 7u8, 62u8, 101u8, 199u8, 60u8, 56u8, 33u8, 54u8, 158u8,
                                20u8, 178u8, 244u8, 145u8, 189u8, 197u8, 157u8, 163u8, 116u8, 36u8,
                                105u8, 52u8, 149u8, 244u8, 108u8, 94u8, 109u8, 111u8, 244u8, 137u8,
                                7u8, 108u8,
                            ]
                        {
                            let entry = CurrentSetId;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]
                pub fn set_id_session(
                    &self,
                    _0: &'a ::core::primitive::u64,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::core::primitive::u32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<SetIdSession>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
                                166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
                                108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8,
                                53u8, 134u8,
                            ]
                        {
                            let entry = SetIdSession(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]
                pub fn set_id_session_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, SetIdSession<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<SetIdSession>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                91u8, 175u8, 145u8, 127u8, 242u8, 81u8, 13u8, 231u8, 110u8, 11u8,
                                166u8, 169u8, 103u8, 146u8, 123u8, 133u8, 157u8, 15u8, 33u8, 234u8,
                                108u8, 13u8, 88u8, 115u8, 254u8, 9u8, 145u8, 199u8, 102u8, 47u8,
                                53u8, 134u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Max Authorities in use"]
                pub fn max_authorities(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Grandpa", "MaxAuthorities")?
                        == [
                            205u8, 23u8, 62u8, 93u8, 110u8, 248u8, 109u8, 245u8, 1u8, 57u8, 144u8,
                            146u8, 103u8, 0u8, 178u8, 246u8, 63u8, 80u8, 77u8, 155u8, 202u8, 208u8,
                            73u8, 194u8, 210u8, 49u8, 121u8, 99u8, 101u8, 222u8, 127u8, 206u8,
                        ]
                    {
                        let pallet = metadata.pallet("Grandpa")?;
                        let constant = pallet.constant("MaxAuthorities")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod sudo {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Sudo {
                pub call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for Sudo {
                const PALLET: &'static str = "Sudo";
                const FUNCTION: &'static str = "sudo";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SudoUncheckedWeight {
                pub call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
                pub weight: ::core::primitive::u64,
            }
            impl ::subxt::Call for SudoUncheckedWeight {
                const PALLET: &'static str = "Sudo";
                const FUNCTION: &'static str = "sudo_unchecked_weight";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SetKey {
                pub new:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
            }
            impl ::subxt::Call for SetKey {
                const PALLET: &'static str = "Sudo";
                const FUNCTION: &'static str = "set_key";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SudoAs {
                pub who:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
                pub call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for SudoAs {
                const PALLET: &'static str = "Sudo";
                const FUNCTION: &'static str = "sudo_as";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub fn sudo(
                    &self,
                    call: runtime_types::appchain_deip_runtime::Call,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Sudo, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Sudo>()?
                    };
                    if runtime_call_hash
                        == [
                            140u8, 207u8, 172u8, 215u8, 189u8, 3u8, 188u8, 239u8, 40u8, 250u8,
                            174u8, 199u8, 35u8, 168u8, 176u8, 215u8, 216u8, 181u8, 158u8, 175u8,
                            38u8, 213u8, 92u8, 166u8, 203u8, 55u8, 232u8, 192u8, 181u8, 176u8,
                            141u8, 70u8,
                        ]
                    {
                        let call = Sudo {
                            call: ::std::boxed::Box::new(call),
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- The weight of this call is defined by the caller."]
                #[doc = "# </weight>"]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: runtime_types::appchain_deip_runtime::Call,
                    weight: ::core::primitive::u64,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        SudoUncheckedWeight,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SudoUncheckedWeight>()?
                    };
                    if runtime_call_hash
                        == [
                            87u8, 239u8, 245u8, 254u8, 124u8, 117u8, 9u8, 102u8, 78u8, 216u8, 69u8,
                            57u8, 122u8, 101u8, 174u8, 191u8, 44u8, 29u8, 210u8, 220u8, 161u8,
                            199u8, 141u8, 54u8, 3u8, 117u8, 215u8, 189u8, 40u8, 51u8, 152u8, 234u8,
                        ]
                    {
                        let call = SudoUncheckedWeight {
                            call: ::std::boxed::Box::new(call),
                            weight,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB change."]
                #[doc = "# </weight>"]
                pub fn set_key(
                    &self,
                    new: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, SetKey, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SetKey>()?
                    };
                    if runtime_call_hash
                        == [
                            77u8, 253u8, 211u8, 157u8, 74u8, 92u8, 1u8, 102u8, 178u8, 103u8, 126u8,
                            56u8, 156u8, 105u8, 45u8, 44u8, 64u8, 154u8, 163u8, 102u8, 93u8, 93u8,
                            212u8, 5u8, 148u8, 184u8, 22u8, 135u8, 110u8, 102u8, 44u8, 172u8,
                        ]
                    {
                        let call = SetKey { new };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub fn sudo_as(
                    &self,
                    who: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                    call: runtime_types::appchain_deip_runtime::Call,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, SudoAs, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<SudoAs>()?
                    };
                    if runtime_call_hash
                        == [
                            236u8, 96u8, 102u8, 252u8, 193u8, 219u8, 109u8, 50u8, 92u8, 192u8,
                            113u8, 105u8, 187u8, 118u8, 154u8, 200u8, 239u8, 224u8, 252u8, 123u8,
                            28u8, 227u8, 131u8, 251u8, 162u8, 131u8, 50u8, 248u8, 44u8, 106u8,
                            77u8, 233u8,
                        ]
                    {
                        let call = SudoAs {
                            who,
                            call: ::std::boxed::Box::new(call),
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_sudo::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct Sudid {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::Event for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied."]
            pub struct KeyChanged {
                pub new_sudoer: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct SudoAsDone {
                pub sudo_result:
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::Event for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct Key;
            impl ::subxt::StorageEntry for Key {
                const PALLET: &'static str = "Sudo";
                const STORAGE: &'static str = "Key";
                type Value = ::subxt::sp_core::crypto::AccountId32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The `AccountId` of the sudo key."]
                pub fn key(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::sp_core::crypto::AccountId32,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Key>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                27u8, 145u8, 220u8, 130u8, 100u8, 142u8, 37u8, 251u8, 22u8, 117u8,
                                53u8, 141u8, 203u8, 109u8, 197u8, 210u8, 164u8, 142u8, 250u8,
                                229u8, 155u8, 177u8, 63u8, 167u8, 166u8, 197u8, 109u8, 42u8, 5u8,
                                117u8, 156u8, 12u8,
                            ]
                        {
                            let entry = Key;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
    }
    pub mod im_online {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Heartbeat {
                pub heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
                pub signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
            }
            impl ::subxt::Call for Heartbeat {
                const PALLET: &'static str = "ImOnline";
                const FUNCTION: &'static str = "heartbeat";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "# <weight>"]
                #[doc = "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is"]
                #[doc = "  length of `heartbeat.network_state.external_address`"]
                #[doc = "  - `O(K)`: decoding of length `K`"]
                #[doc = "  - `O(E)`: decoding/encoding of length `E`"]
                #[doc = "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,"]
                #[doc = "  `ReceivedHeartbeats`"]
                #[doc = "- DbWrites: `ReceivedHeartbeats`"]
                #[doc = "# </weight>"]
                pub fn heartbeat(
                    &self,
                    heartbeat: runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
                    signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        Heartbeat,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Heartbeat>()?
                    };
                    if runtime_call_hash
                        == [
                            246u8, 83u8, 28u8, 233u8, 69u8, 55u8, 28u8, 178u8, 82u8, 159u8, 56u8,
                            241u8, 111u8, 78u8, 194u8, 15u8, 14u8, 250u8, 172u8, 148u8, 208u8,
                            52u8, 33u8, 106u8, 159u8, 210u8, 196u8, 79u8, 138u8, 194u8, 150u8,
                            201u8,
                        ]
                    {
                        let call = Heartbeat {
                            heartbeat,
                            signature,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_im_online::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A new heartbeat was received from `AuthorityId`."]
            pub struct HeartbeatReceived {
                pub authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
            }
            impl ::subxt::Event for HeartbeatReceived {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "HeartbeatReceived";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "At the end of the session, no offence was committed."]
            pub struct AllGood;
            impl ::subxt::Event for AllGood {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "AllGood";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "At the end of the session, at least one validator was found to be offline."]
            pub struct SomeOffline {
                pub offline: ::std::vec::Vec<(
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u128,
                )>,
            }
            impl ::subxt::Event for SomeOffline {
                const PALLET: &'static str = "ImOnline";
                const EVENT: &'static str = "SomeOffline";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct HeartbeatAfter;
            impl ::subxt::StorageEntry for HeartbeatAfter {
                const PALLET: &'static str = "ImOnline";
                const STORAGE: &'static str = "HeartbeatAfter";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Keys;
            impl ::subxt::StorageEntry for Keys {
                const PALLET: &'static str = "ImOnline";
                const STORAGE: &'static str = "Keys";
                type Value =
                    runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                    >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct ReceivedHeartbeats<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a ::core::primitive::u32,
            );
            impl ::subxt::StorageEntry for ReceivedHeartbeats<'_> {
                const PALLET: &'static str = "ImOnline";
                const STORAGE: &'static str = "ReceivedHeartbeats";
                type Value = runtime_types::frame_support::traits::misc::WrapperOpaque<
                    runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
                        ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
                    ])
                }
            }
            pub struct AuthoredBlocks<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::StorageEntry for AuthoredBlocks<'_> {
                const PALLET: &'static str = "ImOnline";
                const STORAGE: &'static str = "AuthoredBlocks";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
                        ::subxt::StorageMapKey::new(&self.1, ::subxt::StorageHasher::Twox64Concat),
                    ])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The block number after which it's ok to send heartbeats in the current"]
                #[doc = " session."]
                #[doc = ""]
                #[doc = " At the beginning of each session we set this to a value that should fall"]
                #[doc = " roughly in the middle of the session duration. The idea is to first wait for"]
                #[doc = " the validators to produce a block in the current session, so that the"]
                #[doc = " heartbeat later on will not be necessary."]
                #[doc = ""]
                #[doc = " This value will only be used as a fallback if we fail to get a proper session"]
                #[doc = " progress estimate from `NextSessionRotation`, as those estimates should be"]
                #[doc = " more accurate then the value we calculate for `HeartbeatAfter`."]
                pub fn heartbeat_after(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<HeartbeatAfter>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                108u8, 100u8, 85u8, 198u8, 226u8, 122u8, 94u8, 225u8, 97u8, 154u8,
                                135u8, 95u8, 106u8, 28u8, 185u8, 78u8, 192u8, 196u8, 35u8, 191u8,
                                12u8, 19u8, 163u8, 46u8, 232u8, 235u8, 193u8, 81u8, 126u8, 204u8,
                                25u8, 228u8,
                            ]
                        {
                            let entry = HeartbeatAfter;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The current set of keys that may issue a heartbeat."]
                pub fn keys(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
                            runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Keys>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                105u8, 250u8, 99u8, 106u8, 9u8, 29u8, 73u8, 176u8, 158u8, 247u8,
                                28u8, 171u8, 95u8, 1u8, 109u8, 11u8, 231u8, 52u8, 54u8, 102u8,
                                142u8, 105u8, 209u8, 31u8, 132u8, 60u8, 89u8, 181u8, 89u8, 193u8,
                                241u8, 130u8,
                            ]
                        {
                            let entry = Keys;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to"]
                #[doc = " `WrapperOpaque<BoundedOpaqueNetworkState>`."]
                pub fn received_heartbeats(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    _1: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::frame_support::traits::misc::WrapperOpaque<
                                runtime_types::pallet_im_online::BoundedOpaqueNetworkState,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReceivedHeartbeats>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                29u8, 40u8, 67u8, 222u8, 59u8, 104u8, 24u8, 193u8, 249u8, 200u8,
                                152u8, 225u8, 72u8, 243u8, 140u8, 114u8, 121u8, 216u8, 54u8, 145u8,
                                205u8, 82u8, 133u8, 128u8, 109u8, 54u8, 153u8, 118u8, 66u8, 147u8,
                                251u8, 148u8,
                            ]
                        {
                            let entry = ReceivedHeartbeats(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " For each session index, we keep a mapping of `SessionIndex` and `AuthIndex` to"]
                #[doc = " `WrapperOpaque<BoundedOpaqueNetworkState>`."]
                pub fn received_heartbeats_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ReceivedHeartbeats<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReceivedHeartbeats>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                29u8, 40u8, 67u8, 222u8, 59u8, 104u8, 24u8, 193u8, 249u8, 200u8,
                                152u8, 225u8, 72u8, 243u8, 140u8, 114u8, 121u8, 216u8, 54u8, 145u8,
                                205u8, 82u8, 133u8, 128u8, 109u8, 54u8, 153u8, 118u8, 66u8, 147u8,
                                251u8, 148u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
                #[doc = " number of blocks authored by the given authority."]
                pub fn authored_blocks(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    _1: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<AuthoredBlocks>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                94u8, 193u8, 107u8, 126u8, 3u8, 13u8, 28u8, 151u8, 197u8, 226u8,
                                224u8, 48u8, 138u8, 113u8, 31u8, 57u8, 111u8, 184u8, 218u8, 215u8,
                                185u8, 83u8, 209u8, 139u8, 114u8, 241u8, 68u8, 110u8, 157u8, 208u8,
                                16u8, 22u8,
                            ]
                        {
                            let entry = AuthoredBlocks(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " For each session index, we keep a mapping of `ValidatorId<T>` to the"]
                #[doc = " number of blocks authored by the given authority."]
                pub fn authored_blocks_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, AuthoredBlocks<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<AuthoredBlocks>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                94u8, 193u8, 107u8, 126u8, 3u8, 13u8, 28u8, 151u8, 197u8, 226u8,
                                224u8, 48u8, 138u8, 113u8, 31u8, 57u8, 111u8, 184u8, 218u8, 215u8,
                                185u8, 83u8, 209u8, 139u8, 114u8, 241u8, 68u8, 110u8, 157u8, 208u8,
                                16u8, 22u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " A configuration for base priority of unsigned transactions."]
                #[doc = ""]
                #[doc = " This is exposed so that it can be tuned for particular runtime, when"]
                #[doc = " multiple pallets send unsigned transactions."]
                pub fn unsigned_priority(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("ImOnline", "UnsignedPriority")?
                        == [
                            78u8, 226u8, 84u8, 70u8, 162u8, 23u8, 167u8, 100u8, 156u8, 228u8,
                            119u8, 16u8, 28u8, 202u8, 21u8, 71u8, 72u8, 244u8, 3u8, 255u8, 243u8,
                            55u8, 109u8, 238u8, 26u8, 180u8, 207u8, 175u8, 221u8, 27u8, 213u8,
                            217u8,
                        ]
                    {
                        let pallet = metadata.pallet("ImOnline")?;
                        let constant = pallet.constant("UnsignedPriority")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod historical {
        use super::root_mod;
        use super::runtime_types;
    }
    pub mod randomness_collective_flip {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct RandomMaterial;
            impl ::subxt::StorageEntry for RandomMaterial {
                const PALLET: &'static str = "RandomnessCollectiveFlip";
                const STORAGE: &'static str = "RandomMaterial";
                type Value = ::std::vec::Vec<::subxt::sp_core::H256>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Series of block headers from the last 81 blocks that acts as random seed material. This"]
                #[doc = " is arranged as a ring buffer with `block_number % 81` being the index into the `Vec` of"]
                #[doc = " the oldest hash."]
                pub fn random_material(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<::subxt::sp_core::H256>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<RandomMaterial>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                40u8, 29u8, 216u8, 175u8, 194u8, 61u8, 254u8, 46u8, 29u8, 39u8,
                                76u8, 190u8, 110u8, 149u8, 60u8, 177u8, 79u8, 88u8, 248u8, 199u8,
                                208u8, 246u8, 37u8, 166u8, 84u8, 58u8, 120u8, 6u8, 98u8, 83u8,
                                192u8, 36u8,
                            ]
                        {
                            let entry = RandomMaterial;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
    }
    pub mod assets {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_assets::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some asset class was created."]
            pub struct Created {
                pub asset_id: ::core::primitive::u32,
                pub creator: ::subxt::sp_core::crypto::AccountId32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for Created {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Created";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some assets were issued."]
            pub struct Issued {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
                pub total_supply: ::core::primitive::u128,
            }
            impl ::subxt::Event for Issued {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Issued";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some assets were transferred."]
            pub struct Transferred {
                pub asset_id: ::core::primitive::u32,
                pub from: ::subxt::sp_core::crypto::AccountId32,
                pub to: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for Transferred {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some assets were destroyed."]
            pub struct Burned {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
                pub balance: ::core::primitive::u128,
            }
            impl ::subxt::Event for Burned {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Burned";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub asset_id: ::core::primitive::u32,
                pub issuer: ::subxt::sp_core::crypto::AccountId32,
                pub admin: ::subxt::sp_core::crypto::AccountId32,
                pub freezer: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for TeamChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for OwnerChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some account `who` was frozen."]
            pub struct Frozen {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for Frozen {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some account `who` was thawed."]
            pub struct Thawed {
                pub asset_id: ::core::primitive::u32,
                pub who: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for Thawed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "Some asset `asset_id` was frozen."]
            pub struct AssetFrozen {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::Event for AssetFrozen {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetFrozen";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "Some asset `asset_id` was thawed."]
            pub struct AssetThawed {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::Event for AssetThawed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetThawed";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "An asset class was destroyed."]
            pub struct Destroyed {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::Event for Destroyed {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some asset class was force-created."]
            pub struct ForceCreated {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for ForceCreated {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "New metadata has been set for an asset."]
            pub struct MetadataSet {
                pub asset_id: ::core::primitive::u32,
                pub name: ::std::vec::Vec<::core::primitive::u8>,
                pub symbol: ::std::vec::Vec<::core::primitive::u8>,
                pub decimals: ::core::primitive::u8,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::Event for MetadataSet {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "Metadata has been cleared for an asset."]
            pub struct MetadataCleared {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::Event for MetadataCleared {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "(Additional) funds have been approved for transfer to a destination account."]
            pub struct ApprovedTransfer {
                pub asset_id: ::core::primitive::u32,
                pub source: ::subxt::sp_core::crypto::AccountId32,
                pub delegate: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for ApprovedTransfer {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovedTransfer";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An approval for account `delegate` was cancelled by `owner`."]
            pub struct ApprovalCancelled {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
                pub delegate: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for ApprovalCancelled {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
            #[doc = "the approved `delegate`."]
            pub struct TransferredApproved {
                pub asset_id: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
                pub delegate: ::subxt::sp_core::crypto::AccountId32,
                pub destination: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for TransferredApproved {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "TransferredApproved";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "An asset has had its attributes changed by the `Force` origin."]
            pub struct AssetStatusChanged {
                pub asset_id: ::core::primitive::u32,
            }
            impl ::subxt::Event for AssetStatusChanged {
                const PALLET: &'static str = "Assets";
                const EVENT: &'static str = "AssetStatusChanged";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct Asset<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for Asset<'_> {
                const PALLET: &'static str = "Assets";
                const STORAGE: &'static str = "Asset";
                type Value = runtime_types::pallet_assets::types::AssetDetails<
                    ::core::primitive::u128,
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u128,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct Account<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::StorageEntry for Account<'_> {
                const PALLET: &'static str = "Assets";
                const STORAGE: &'static str = "Account";
                type Value =
                    runtime_types::pallet_assets::types::AssetBalance<::core::primitive::u128, ()>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct Approvals<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::StorageEntry for Approvals<'_> {
                const PALLET: &'static str = "Assets";
                const STORAGE: &'static str = "Approvals";
                type Value = runtime_types::pallet_assets::types::Approval<
                    ::core::primitive::u128,
                    ::core::primitive::u128,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.2,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct Metadata<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for Metadata<'_> {
                const PALLET: &'static str = "Assets";
                const STORAGE: &'static str = "Metadata";
                type Value = runtime_types::pallet_assets::types::AssetMetadata<
                    ::core::primitive::u128,
                    runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Details of an asset."]
                pub fn asset(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_assets::types::AssetDetails<
                                ::core::primitive::u128,
                                ::subxt::sp_core::crypto::AccountId32,
                                ::core::primitive::u128,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Asset>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                171u8, 171u8, 67u8, 144u8, 214u8, 143u8, 54u8, 233u8, 197u8, 111u8,
                                154u8, 139u8, 7u8, 231u8, 194u8, 246u8, 190u8, 109u8, 168u8, 154u8,
                                247u8, 28u8, 227u8, 53u8, 108u8, 48u8, 4u8, 89u8, 119u8, 8u8, 79u8,
                                76u8,
                            ]
                        {
                            let entry = Asset(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Details of an asset."]
                pub fn asset_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Asset<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Asset>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                171u8, 171u8, 67u8, 144u8, 214u8, 143u8, 54u8, 233u8, 197u8, 111u8,
                                154u8, 139u8, 7u8, 231u8, 194u8, 246u8, 190u8, 109u8, 168u8, 154u8,
                                247u8, 28u8, 227u8, 53u8, 108u8, 48u8, 4u8, 89u8, 119u8, 8u8, 79u8,
                                76u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The number of units of assets held by any given account."]
                pub fn account(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    _1: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_assets::types::AssetBalance<
                            ::core::primitive::u128,
                            (),
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Account>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                168u8, 97u8, 94u8, 78u8, 49u8, 71u8, 173u8, 49u8, 113u8, 100u8,
                                62u8, 196u8, 27u8, 166u8, 5u8, 61u8, 213u8, 121u8, 29u8, 141u8,
                                174u8, 0u8, 220u8, 55u8, 198u8, 7u8, 16u8, 56u8, 97u8, 252u8,
                                199u8, 135u8,
                            ]
                        {
                            let entry = Account(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The number of units of assets held by any given account."]
                pub fn account_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Account<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Account>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                168u8, 97u8, 94u8, 78u8, 49u8, 71u8, 173u8, 49u8, 113u8, 100u8,
                                62u8, 196u8, 27u8, 166u8, 5u8, 61u8, 213u8, 121u8, 29u8, 141u8,
                                174u8, 0u8, 220u8, 55u8, 198u8, 7u8, 16u8, 56u8, 97u8, 252u8,
                                199u8, 135u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    _1: &'a ::subxt::sp_core::crypto::AccountId32,
                    _2: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_assets::types::Approval<
                                ::core::primitive::u128,
                                ::core::primitive::u128,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Approvals>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                237u8, 98u8, 160u8, 91u8, 202u8, 124u8, 226u8, 49u8, 184u8, 96u8,
                                90u8, 61u8, 79u8, 66u8, 54u8, 237u8, 156u8, 232u8, 140u8, 67u8,
                                81u8, 55u8, 89u8, 132u8, 68u8, 125u8, 47u8, 254u8, 11u8, 104u8,
                                207u8, 96u8,
                            ]
                        {
                            let entry = Approvals(_0, _1, _2);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Approved balance transfers. First balance is the amount approved for transfer. Second"]
                #[doc = " is the amount of `T::Currency` reserved for storing this."]
                #[doc = " First key is the asset ID, second key is the owner and third key is the delegate."]
                pub fn approvals_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Approvals<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Approvals>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                237u8, 98u8, 160u8, 91u8, 202u8, 124u8, 226u8, 49u8, 184u8, 96u8,
                                90u8, 61u8, 79u8, 66u8, 54u8, 237u8, 156u8, 232u8, 140u8, 67u8,
                                81u8, 55u8, 89u8, 132u8, 68u8, 125u8, 47u8, 254u8, 11u8, 104u8,
                                207u8, 96u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_assets::types::AssetMetadata<
                            ::core::primitive::u128,
                            runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Metadata>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                209u8, 23u8, 7u8, 106u8, 173u8, 10u8, 115u8, 39u8, 138u8, 26u8,
                                54u8, 230u8, 183u8, 233u8, 249u8, 85u8, 76u8, 84u8, 184u8, 54u8,
                                114u8, 213u8, 38u8, 238u8, 109u8, 30u8, 0u8, 246u8, 123u8, 200u8,
                                40u8, 34u8,
                            ]
                        {
                            let entry = Metadata(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Metadata of an asset."]
                pub fn metadata_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Metadata<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Metadata>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                209u8, 23u8, 7u8, 106u8, 173u8, 10u8, 115u8, 39u8, 138u8, 26u8,
                                54u8, 230u8, 183u8, 233u8, 249u8, 85u8, 76u8, 84u8, 184u8, 54u8,
                                114u8, 213u8, 38u8, 238u8, 109u8, 30u8, 0u8, 246u8, 123u8, 200u8,
                                40u8, 34u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The basic amount of funds that must be reserved for an asset."]
                pub fn asset_deposit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Assets", "AssetDeposit")?
                        == [
                            120u8, 251u8, 49u8, 189u8, 118u8, 126u8, 35u8, 7u8, 192u8, 36u8, 209u8,
                            166u8, 76u8, 186u8, 19u8, 231u8, 236u8, 176u8, 226u8, 77u8, 214u8,
                            84u8, 210u8, 31u8, 67u8, 246u8, 12u8, 191u8, 209u8, 37u8, 166u8, 49u8,
                        ]
                    {
                        let pallet = metadata.pallet("Assets")?;
                        let constant = pallet.constant("AssetDeposit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your asset."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Assets", "MetadataDepositBase")?
                        == [
                            206u8, 201u8, 26u8, 198u8, 159u8, 174u8, 212u8, 81u8, 73u8, 223u8,
                            96u8, 44u8, 229u8, 140u8, 251u8, 240u8, 199u8, 30u8, 40u8, 52u8, 229u8,
                            249u8, 104u8, 111u8, 138u8, 45u8, 97u8, 78u8, 131u8, 205u8, 119u8,
                            151u8,
                        ]
                    {
                        let pallet = metadata.pallet("Assets")?;
                        let constant = pallet.constant("MetadataDepositBase")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The additional funds that must be reserved for the number of bytes you store in your"]
                #[doc = " metadata."]
                pub fn metadata_deposit_per_byte(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Assets", "MetadataDepositPerByte")?
                        == [
                            151u8, 19u8, 126u8, 167u8, 151u8, 217u8, 225u8, 213u8, 132u8, 62u8,
                            163u8, 83u8, 72u8, 11u8, 37u8, 124u8, 0u8, 55u8, 119u8, 47u8, 9u8,
                            106u8, 184u8, 68u8, 74u8, 62u8, 87u8, 57u8, 5u8, 91u8, 85u8, 255u8,
                        ]
                    {
                        let pallet = metadata.pallet("Assets")?;
                        let constant = pallet.constant("MetadataDepositPerByte")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The amount of funds that must be reserved when creating a new approval."]
                pub fn approval_deposit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Assets", "ApprovalDeposit")?
                        == [
                            203u8, 2u8, 76u8, 21u8, 80u8, 235u8, 119u8, 243u8, 16u8, 127u8, 215u8,
                            34u8, 196u8, 158u8, 88u8, 86u8, 223u8, 34u8, 253u8, 1u8, 125u8, 249u8,
                            157u8, 188u8, 94u8, 237u8, 100u8, 0u8, 103u8, 145u8, 166u8, 124u8,
                        ]
                    {
                        let pallet = metadata.pallet("Assets")?;
                        let constant = pallet.constant("ApprovalDeposit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The maximum length of a name or symbol stored on-chain."]
                pub fn string_limit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Assets", "StringLimit")?
                        == [
                            185u8, 158u8, 131u8, 4u8, 68u8, 198u8, 243u8, 101u8, 233u8, 236u8,
                            201u8, 130u8, 49u8, 92u8, 228u8, 66u8, 26u8, 197u8, 252u8, 77u8, 120u8,
                            251u8, 47u8, 167u8, 241u8, 5u8, 4u8, 181u8, 255u8, 228u8, 244u8, 129u8,
                        ]
                    {
                        let pallet = metadata.pallet("Assets")?;
                        let constant = pallet.constant("StringLimit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod uniques {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_uniques::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An asset class was created."]
            pub struct Created {
                pub class: ::core::primitive::u32,
                pub creator: ::subxt::sp_core::crypto::AccountId32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for Created {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Created";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An asset class was force-created."]
            pub struct ForceCreated {
                pub class: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for ForceCreated {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ForceCreated";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "An asset `class` was destroyed."]
            pub struct Destroyed {
                pub class: ::core::primitive::u32,
            }
            impl ::subxt::Event for Destroyed {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Destroyed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An asset `instance` was issued."]
            pub struct Issued {
                pub class: ::core::primitive::u32,
                pub instance: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for Issued {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Issued";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An asset `instance` was transferred."]
            pub struct Transferred {
                pub class: ::core::primitive::u32,
                pub instance: ::core::primitive::u32,
                pub from: ::subxt::sp_core::crypto::AccountId32,
                pub to: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for Transferred {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Transferred";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An asset `instance` was destroyed."]
            pub struct Burned {
                pub class: ::core::primitive::u32,
                pub instance: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for Burned {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Burned";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some asset `instance` was frozen."]
            pub struct Frozen {
                pub class: ::core::primitive::u32,
                pub instance: ::core::primitive::u32,
            }
            impl ::subxt::Event for Frozen {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Frozen";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Some asset `instance` was thawed."]
            pub struct Thawed {
                pub class: ::core::primitive::u32,
                pub instance: ::core::primitive::u32,
            }
            impl ::subxt::Event for Thawed {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Thawed";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "Some asset `class` was frozen."]
            pub struct ClassFrozen {
                pub class: ::core::primitive::u32,
            }
            impl ::subxt::Event for ClassFrozen {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ClassFrozen";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "Some asset `class` was thawed."]
            pub struct ClassThawed {
                pub class: ::core::primitive::u32,
            }
            impl ::subxt::Event for ClassThawed {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ClassThawed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "The owner changed."]
            pub struct OwnerChanged {
                pub class: ::core::primitive::u32,
                pub new_owner: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for OwnerChanged {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "OwnerChanged";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "The management team changed."]
            pub struct TeamChanged {
                pub class: ::core::primitive::u32,
                pub issuer: ::subxt::sp_core::crypto::AccountId32,
                pub admin: ::subxt::sp_core::crypto::AccountId32,
                pub freezer: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for TeamChanged {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "TeamChanged";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An `instance` of an asset `class` has been approved by the `owner` for transfer by a"]
            #[doc = "`delegate`."]
            pub struct ApprovedTransfer {
                pub class: ::core::primitive::u32,
                pub instance: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
                pub delegate: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for ApprovedTransfer {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ApprovedTransfer";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "An approval for a `delegate` account to transfer the `instance` of an asset `class` was"]
            #[doc = "cancelled by its `owner`."]
            pub struct ApprovalCancelled {
                pub class: ::core::primitive::u32,
                pub instance: ::core::primitive::u32,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
                pub delegate: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for ApprovalCancelled {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ApprovalCancelled";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "An asset `class` has had its attributes changed by the `Force` origin."]
            pub struct AssetStatusChanged {
                pub class: ::core::primitive::u32,
            }
            impl ::subxt::Event for AssetStatusChanged {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "AssetStatusChanged";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "New metadata has been set for an asset class."]
            pub struct ClassMetadataSet {
                pub class: ::core::primitive::u32,
                pub data: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::Event for ClassMetadataSet {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ClassMetadataSet";
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            #[doc = "Metadata has been cleared for an asset class."]
            pub struct ClassMetadataCleared {
                pub class: ::core::primitive::u32,
            }
            impl ::subxt::Event for ClassMetadataCleared {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "ClassMetadataCleared";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "New metadata has been set for an asset instance."]
            pub struct MetadataSet {
                pub class: ::core::primitive::u32,
                pub instance: ::core::primitive::u32,
                pub data: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub is_frozen: ::core::primitive::bool,
            }
            impl ::subxt::Event for MetadataSet {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "MetadataSet";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Metadata has been cleared for an asset instance."]
            pub struct MetadataCleared {
                pub class: ::core::primitive::u32,
                pub instance: ::core::primitive::u32,
            }
            impl ::subxt::Event for MetadataCleared {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "MetadataCleared";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Metadata has been cleared for an asset instance."]
            pub struct Redeposited {
                pub class: ::core::primitive::u32,
                pub successful_instances: ::std::vec::Vec<::core::primitive::u32>,
            }
            impl ::subxt::Event for Redeposited {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "Redeposited";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "New attribute metadata has been set for an asset class or instance."]
            pub struct AttributeSet {
                pub class: ::core::primitive::u32,
                pub maybe_instance: ::core::option::Option<::core::primitive::u32>,
                pub key: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
                pub value: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            impl ::subxt::Event for AttributeSet {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "AttributeSet";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Attribute metadata has been cleared for an asset class or instance."]
            pub struct AttributeCleared {
                pub class: ::core::primitive::u32,
                pub maybe_instance: ::core::option::Option<::core::primitive::u32>,
                pub key: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            }
            impl ::subxt::Event for AttributeCleared {
                const PALLET: &'static str = "Uniques";
                const EVENT: &'static str = "AttributeCleared";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct Class<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for Class<'_> {
                const PALLET: &'static str = "Uniques";
                const STORAGE: &'static str = "Class";
                type Value = runtime_types::pallet_uniques::types::ClassDetails<
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u128,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct Account<'a>(
                pub &'a ::subxt::sp_core::crypto::AccountId32,
                pub &'a ::core::primitive::u32,
                pub &'a ::core::primitive::u32,
            );
            impl ::subxt::StorageEntry for Account<'_> {
                const PALLET: &'static str = "Uniques";
                const STORAGE: &'static str = "Account";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.2,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct Asset<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a ::core::primitive::u32,
            );
            impl ::subxt::StorageEntry for Asset<'_> {
                const PALLET: &'static str = "Uniques";
                const STORAGE: &'static str = "Asset";
                type Value = runtime_types::pallet_uniques::types::InstanceDetails<
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u128,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct ClassMetadataOf<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for ClassMetadataOf<'_> {
                const PALLET: &'static str = "Uniques";
                const STORAGE: &'static str = "ClassMetadataOf";
                type Value =
                    runtime_types::pallet_uniques::types::ClassMetadata<::core::primitive::u128>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct InstanceMetadataOf<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a ::core::primitive::u32,
            );
            impl ::subxt::StorageEntry for InstanceMetadataOf<'_> {
                const PALLET: &'static str = "Uniques";
                const STORAGE: &'static str = "InstanceMetadataOf";
                type Value =
                    runtime_types::pallet_uniques::types::InstanceMetadata<::core::primitive::u128>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct Attribute<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a ::core::option::Option<::core::primitive::u32>,
                pub  &'a runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >,
            );
            impl ::subxt::StorageEntry for Attribute<'_> {
                const PALLET: &'static str = "Uniques";
                const STORAGE: &'static str = "Attribute";
                type Value = (
                    runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    ::core::primitive::u128,
                );
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.2,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Details of an asset class."]
                pub fn class(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_uniques::types::ClassDetails<
                                ::subxt::sp_core::crypto::AccountId32,
                                ::core::primitive::u128,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Class>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                206u8, 218u8, 251u8, 143u8, 210u8, 13u8, 74u8, 165u8, 190u8, 98u8,
                                254u8, 71u8, 52u8, 160u8, 5u8, 245u8, 182u8, 60u8, 249u8, 88u8,
                                241u8, 230u8, 199u8, 252u8, 88u8, 78u8, 206u8, 77u8, 136u8, 208u8,
                                219u8, 121u8,
                            ]
                        {
                            let entry = Class(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Details of an asset class."]
                pub fn class_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Class<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Class>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                206u8, 218u8, 251u8, 143u8, 210u8, 13u8, 74u8, 165u8, 190u8, 98u8,
                                254u8, 71u8, 52u8, 160u8, 5u8, 245u8, 182u8, 60u8, 249u8, 88u8,
                                241u8, 230u8, 199u8, 252u8, 88u8, 78u8, 206u8, 77u8, 136u8, 208u8,
                                219u8, 121u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The assets held by any given account; set out this way so that assets owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    _1: &'a ::core::primitive::u32,
                    _2: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<()>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Account>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                99u8, 220u8, 103u8, 91u8, 35u8, 240u8, 1u8, 10u8, 88u8, 54u8,
                                112u8, 230u8, 158u8, 137u8, 142u8, 44u8, 240u8, 113u8, 197u8,
                                135u8, 27u8, 122u8, 61u8, 34u8, 143u8, 65u8, 164u8, 37u8, 105u8,
                                234u8, 238u8, 221u8,
                            ]
                        {
                            let entry = Account(_0, _1, _2);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The assets held by any given account; set out this way so that assets owned by a single"]
                #[doc = " account can be enumerated."]
                pub fn account_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Account<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Account>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                99u8, 220u8, 103u8, 91u8, 35u8, 240u8, 1u8, 10u8, 88u8, 54u8,
                                112u8, 230u8, 158u8, 137u8, 142u8, 44u8, 240u8, 113u8, 197u8,
                                135u8, 27u8, 122u8, 61u8, 34u8, 143u8, 65u8, 164u8, 37u8, 105u8,
                                234u8, 238u8, 221u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The assets in existence and their ownership details."]
                pub fn asset(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    _1: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_uniques::types::InstanceDetails<
                                ::subxt::sp_core::crypto::AccountId32,
                                ::core::primitive::u128,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Asset>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                228u8, 10u8, 215u8, 118u8, 8u8, 23u8, 144u8, 180u8, 111u8, 246u8,
                                243u8, 235u8, 3u8, 224u8, 10u8, 232u8, 253u8, 130u8, 93u8, 244u8,
                                44u8, 209u8, 188u8, 124u8, 246u8, 200u8, 126u8, 171u8, 93u8, 136u8,
                                162u8, 21u8,
                            ]
                        {
                            let entry = Asset(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The assets in existence and their ownership details."]
                pub fn asset_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Asset<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Asset>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                228u8, 10u8, 215u8, 118u8, 8u8, 23u8, 144u8, 180u8, 111u8, 246u8,
                                243u8, 235u8, 3u8, 224u8, 10u8, 232u8, 253u8, 130u8, 93u8, 244u8,
                                44u8, 209u8, 188u8, 124u8, 246u8, 200u8, 126u8, 171u8, 93u8, 136u8,
                                162u8, 21u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Metadata of an asset class."]
                pub fn class_metadata_of(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_uniques::types::ClassMetadata<
                                ::core::primitive::u128,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ClassMetadataOf>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                15u8, 92u8, 147u8, 178u8, 163u8, 92u8, 5u8, 65u8, 77u8, 199u8,
                                119u8, 23u8, 36u8, 81u8, 161u8, 151u8, 8u8, 68u8, 205u8, 160u8,
                                168u8, 67u8, 214u8, 58u8, 134u8, 206u8, 181u8, 117u8, 64u8, 217u8,
                                190u8, 92u8,
                            ]
                        {
                            let entry = ClassMetadataOf(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Metadata of an asset class."]
                pub fn class_metadata_of_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ClassMetadataOf<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ClassMetadataOf>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                15u8, 92u8, 147u8, 178u8, 163u8, 92u8, 5u8, 65u8, 77u8, 199u8,
                                119u8, 23u8, 36u8, 81u8, 161u8, 151u8, 8u8, 68u8, 205u8, 160u8,
                                168u8, 67u8, 214u8, 58u8, 134u8, 206u8, 181u8, 117u8, 64u8, 217u8,
                                190u8, 92u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Metadata of an asset instance."]
                pub fn instance_metadata_of(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    _1: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_uniques::types::InstanceMetadata<
                                ::core::primitive::u128,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<InstanceMetadataOf>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                36u8, 10u8, 34u8, 223u8, 181u8, 179u8, 64u8, 107u8, 38u8, 149u8,
                                153u8, 86u8, 152u8, 18u8, 147u8, 93u8, 124u8, 138u8, 92u8, 192u8,
                                224u8, 72u8, 185u8, 254u8, 62u8, 93u8, 16u8, 17u8, 78u8, 217u8,
                                135u8, 205u8,
                            ]
                        {
                            let entry = InstanceMetadataOf(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Metadata of an asset instance."]
                pub fn instance_metadata_of_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, InstanceMetadataOf<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<InstanceMetadataOf>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                36u8, 10u8, 34u8, 223u8, 181u8, 179u8, 64u8, 107u8, 38u8, 149u8,
                                153u8, 86u8, 152u8, 18u8, 147u8, 93u8, 124u8, 138u8, 92u8, 192u8,
                                224u8, 72u8, 185u8, 254u8, 62u8, 93u8, 16u8, 17u8, 78u8, 217u8,
                                135u8, 205u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Metadata of an asset class."]
                pub fn attribute(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    _1: &'a ::core::option::Option<::core::primitive::u32>,
                    _2: &'a runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<(
                            runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                            ::core::primitive::u128,
                        )>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Attribute>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                232u8, 113u8, 184u8, 243u8, 249u8, 100u8, 206u8, 178u8, 45u8,
                                222u8, 71u8, 187u8, 155u8, 68u8, 49u8, 76u8, 120u8, 98u8, 205u8,
                                28u8, 209u8, 38u8, 45u8, 74u8, 134u8, 241u8, 155u8, 63u8, 203u8,
                                90u8, 110u8, 47u8,
                            ]
                        {
                            let entry = Attribute(_0, _1, _2);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Metadata of an asset class."]
                pub fn attribute_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Attribute<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Attribute>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                232u8, 113u8, 184u8, 243u8, 249u8, 100u8, 206u8, 178u8, 45u8,
                                222u8, 71u8, 187u8, 155u8, 68u8, 49u8, 76u8, 120u8, 98u8, 205u8,
                                28u8, 209u8, 38u8, 45u8, 74u8, 134u8, 241u8, 155u8, 63u8, 203u8,
                                90u8, 110u8, 47u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The basic amount of funds that must be reserved for an asset class."]
                pub fn class_deposit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Uniques", "ClassDeposit")?
                        == [
                            12u8, 89u8, 138u8, 176u8, 179u8, 53u8, 118u8, 144u8, 212u8, 107u8,
                            255u8, 8u8, 110u8, 52u8, 145u8, 199u8, 49u8, 180u8, 40u8, 38u8, 185u8,
                            161u8, 71u8, 9u8, 1u8, 97u8, 189u8, 114u8, 144u8, 202u8, 18u8, 196u8,
                        ]
                    {
                        let pallet = metadata.pallet("Uniques")?;
                        let constant = pallet.constant("ClassDeposit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The basic amount of funds that must be reserved for an asset instance."]
                pub fn instance_deposit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Uniques", "InstanceDeposit")?
                        == [
                            110u8, 211u8, 217u8, 127u8, 246u8, 227u8, 227u8, 37u8, 17u8, 162u8,
                            84u8, 160u8, 50u8, 209u8, 141u8, 88u8, 247u8, 39u8, 8u8, 175u8, 54u8,
                            52u8, 172u8, 210u8, 89u8, 88u8, 193u8, 179u8, 104u8, 125u8, 175u8,
                            96u8,
                        ]
                    {
                        let pallet = metadata.pallet("Uniques")?;
                        let constant = pallet.constant("InstanceDeposit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The basic amount of funds that must be reserved when adding metadata to your asset."]
                pub fn metadata_deposit_base(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Uniques", "MetadataDepositBase")?
                        == [
                            206u8, 201u8, 26u8, 198u8, 159u8, 174u8, 212u8, 81u8, 73u8, 223u8,
                            96u8, 44u8, 229u8, 140u8, 251u8, 240u8, 199u8, 30u8, 40u8, 52u8, 229u8,
                            249u8, 104u8, 111u8, 138u8, 45u8, 97u8, 78u8, 131u8, 205u8, 119u8,
                            151u8,
                        ]
                    {
                        let pallet = metadata.pallet("Uniques")?;
                        let constant = pallet.constant("MetadataDepositBase")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The basic amount of funds that must be reserved when adding an attribute to an asset."]
                pub fn attribute_deposit_base(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Uniques", "AttributeDepositBase")?
                        == [
                            63u8, 111u8, 114u8, 85u8, 48u8, 17u8, 244u8, 44u8, 74u8, 218u8, 209u8,
                            150u8, 227u8, 58u8, 148u8, 159u8, 91u8, 152u8, 25u8, 216u8, 50u8,
                            101u8, 24u8, 246u8, 1u8, 166u8, 198u8, 151u8, 50u8, 153u8, 93u8, 102u8,
                        ]
                    {
                        let pallet = metadata.pallet("Uniques")?;
                        let constant = pallet.constant("AttributeDepositBase")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The additional funds that must be reserved for the number of bytes store in metadata,"]
                #[doc = " either \"normal\" metadata or attribute metadata."]
                pub fn deposit_per_byte(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Uniques", "DepositPerByte")?
                        == [
                            29u8, 209u8, 163u8, 159u8, 222u8, 115u8, 30u8, 151u8, 191u8, 16u8,
                            245u8, 164u8, 149u8, 67u8, 195u8, 183u8, 34u8, 100u8, 83u8, 221u8,
                            58u8, 112u8, 201u8, 209u8, 121u8, 59u8, 71u8, 66u8, 110u8, 166u8,
                            119u8, 126u8,
                        ]
                    {
                        let pallet = metadata.pallet("Uniques")?;
                        let constant = pallet.constant("DepositPerByte")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The maximum length of data stored on-chain."]
                pub fn string_limit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Uniques", "StringLimit")?
                        == [
                            185u8, 158u8, 131u8, 4u8, 68u8, 198u8, 243u8, 101u8, 233u8, 236u8,
                            201u8, 130u8, 49u8, 92u8, 228u8, 66u8, 26u8, 197u8, 252u8, 77u8, 120u8,
                            251u8, 47u8, 167u8, 241u8, 5u8, 4u8, 181u8, 255u8, 228u8, 244u8, 129u8,
                        ]
                    {
                        let pallet = metadata.pallet("Uniques")?;
                        let constant = pallet.constant("StringLimit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The maximum length of an attribute key."]
                pub fn key_limit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Uniques", "KeyLimit")?
                        == [
                            184u8, 8u8, 187u8, 92u8, 247u8, 28u8, 124u8, 183u8, 251u8, 56u8, 79u8,
                            64u8, 166u8, 142u8, 28u8, 240u8, 70u8, 182u8, 197u8, 239u8, 235u8,
                            139u8, 3u8, 238u8, 232u8, 151u8, 99u8, 189u8, 142u8, 37u8, 216u8, 36u8,
                        ]
                    {
                        let pallet = metadata.pallet("Uniques")?;
                        let constant = pallet.constant("KeyLimit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The maximum length of an attribute value."]
                pub fn value_limit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Uniques", "ValueLimit")?
                        == [
                            248u8, 199u8, 96u8, 134u8, 148u8, 137u8, 254u8, 162u8, 6u8, 204u8,
                            247u8, 240u8, 111u8, 150u8, 250u8, 217u8, 160u8, 240u8, 226u8, 137u8,
                            110u8, 202u8, 188u8, 247u8, 127u8, 0u8, 111u8, 94u8, 176u8, 230u8,
                            13u8, 179u8,
                        ]
                    {
                        let pallet = metadata.pallet("Uniques")?;
                        let constant = pallet.constant("ValueLimit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod mmr {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct RootHash;
            impl ::subxt::StorageEntry for RootHash {
                const PALLET: &'static str = "Mmr";
                const STORAGE: &'static str = "RootHash";
                type Value = ::subxt::sp_core::H256;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NumberOfLeaves;
            impl ::subxt::StorageEntry for NumberOfLeaves {
                const PALLET: &'static str = "Mmr";
                const STORAGE: &'static str = "NumberOfLeaves";
                type Value = ::core::primitive::u64;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct Nodes<'a>(pub &'a ::core::primitive::u64);
            impl ::subxt::StorageEntry for Nodes<'_> {
                const PALLET: &'static str = "Mmr";
                const STORAGE: &'static str = "Nodes";
                type Value = ::subxt::sp_core::H256;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Identity,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Latest MMR Root hash."]
                pub fn root_hash(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::subxt::sp_core::H256, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<RootHash>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                156u8, 176u8, 7u8, 77u8, 96u8, 23u8, 240u8, 140u8, 74u8, 33u8,
                                12u8, 124u8, 160u8, 228u8, 78u8, 8u8, 139u8, 164u8, 109u8, 52u8,
                                168u8, 234u8, 221u8, 194u8, 100u8, 2u8, 250u8, 5u8, 188u8, 203u8,
                                13u8, 117u8,
                            ]
                        {
                            let entry = RootHash;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Current size of the MMR (number of leaves)."]
                pub fn number_of_leaves(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NumberOfLeaves>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                138u8, 124u8, 23u8, 186u8, 255u8, 231u8, 187u8, 122u8, 213u8,
                                160u8, 29u8, 24u8, 88u8, 98u8, 171u8, 36u8, 195u8, 216u8, 27u8,
                                190u8, 192u8, 152u8, 8u8, 13u8, 210u8, 232u8, 45u8, 184u8, 240u8,
                                255u8, 156u8, 204u8,
                            ]
                        {
                            let entry = NumberOfLeaves;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Hashes of the nodes in the MMR."]
                #[doc = ""]
                #[doc = " Note this collection only contains MMR peaks, the inner nodes (and leaves)"]
                #[doc = " are pruned and only stored in the Offchain DB."]
                pub fn nodes(
                    &self,
                    _0: &'a ::core::primitive::u64,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::subxt::sp_core::H256>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Nodes>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                150u8, 135u8, 92u8, 131u8, 236u8, 239u8, 244u8, 0u8, 254u8, 50u8,
                                117u8, 224u8, 131u8, 70u8, 100u8, 212u8, 191u8, 58u8, 146u8, 207u8,
                                94u8, 72u8, 187u8, 139u8, 80u8, 136u8, 215u8, 68u8, 131u8, 249u8,
                                190u8, 247u8,
                            ]
                        {
                            let entry = Nodes(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Hashes of the nodes in the MMR."]
                #[doc = ""]
                #[doc = " Note this collection only contains MMR peaks, the inner nodes (and leaves)"]
                #[doc = " are pruned and only stored in the Offchain DB."]
                pub fn nodes_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Nodes<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Nodes>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                150u8, 135u8, 92u8, 131u8, 236u8, 239u8, 244u8, 0u8, 254u8, 50u8,
                                117u8, 224u8, 131u8, 70u8, 100u8, 212u8, 191u8, 58u8, 146u8, 207u8,
                                94u8, 72u8, 187u8, 139u8, 80u8, 136u8, 215u8, 68u8, 131u8, 249u8,
                                190u8, 247u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
    }
    pub mod beefy {
        use super::root_mod;
        use super::runtime_types;
    }
    pub mod mmr_leaf {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct BeefyNextAuthorities;
            impl ::subxt::StorageEntry for BeefyNextAuthorities {
                const PALLET: &'static str = "MmrLeaf";
                const STORAGE: &'static str = "BeefyNextAuthorities";
                type Value = runtime_types::beefy_primitives::mmr::BeefyNextAuthoritySet<
                    ::subxt::sp_core::H256,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Details of next BEEFY authority set."]
                #[doc = ""]
                #[doc = " This storage entry is used as cache for calls to `update_beefy_next_authority_set`."]
                pub fn beefy_next_authorities(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::beefy_primitives::mmr::BeefyNextAuthoritySet<
                            ::subxt::sp_core::H256,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<BeefyNextAuthorities>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                176u8, 52u8, 163u8, 20u8, 65u8, 149u8, 67u8, 119u8, 40u8, 134u8,
                                178u8, 89u8, 67u8, 6u8, 201u8, 226u8, 207u8, 218u8, 138u8, 14u8,
                                201u8, 41u8, 40u8, 110u8, 227u8, 200u8, 56u8, 164u8, 187u8, 168u8,
                                116u8, 127u8,
                            ]
                        {
                            let entry = BeefyNextAuthorities;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
    }
    pub mod multisig {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AsMultiThreshold1 {
                pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                pub call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for AsMultiThreshold1 {
                const PALLET: &'static str = "Multisig";
                const FUNCTION: &'static str = "as_multi_threshold_1";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                pub maybe_timepoint: ::core::option::Option<
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                >,
                pub call: ::subxt::WrapperKeepOpaque<runtime_types::appchain_deip_runtime::Call>,
                pub store_call: ::core::primitive::bool,
                pub max_weight: ::core::primitive::u64,
            }
            impl ::subxt::Call for AsMulti {
                const PALLET: &'static str = "Multisig";
                const FUNCTION: &'static str = "as_multi";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ApproveAsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                pub maybe_timepoint: ::core::option::Option<
                    runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                >,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub max_weight: ::core::primitive::u64,
            }
            impl ::subxt::Call for ApproveAsMulti {
                const PALLET: &'static str = "Multisig";
                const FUNCTION: &'static str = "approve_as_multi";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct CancelAsMulti {
                pub threshold: ::core::primitive::u16,
                pub other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::Call for CancelAsMulti {
                const PALLET: &'static str = "Multisig";
                const FUNCTION: &'static str = "cancel_as_multi";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                #[doc = "multi-signature, but do not participate in the approval process."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                #[doc = "-------------------------------"]
                #[doc = "- DB Weight: None"]
                #[doc = "- Plus Call Weight"]
                #[doc = "# </weight>"]
                pub fn as_multi_threshold_1(
                    &self,
                    other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                    call: runtime_types::appchain_deip_runtime::Call,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        AsMultiThreshold1,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<AsMultiThreshold1>()?
                    };
                    if runtime_call_hash
                        == [
                            13u8, 156u8, 122u8, 244u8, 42u8, 153u8, 188u8, 211u8, 99u8, 97u8,
                            255u8, 181u8, 2u8, 90u8, 179u8, 118u8, 155u8, 23u8, 138u8, 187u8,
                            149u8, 41u8, 221u8, 229u8, 117u8, 171u8, 230u8, 139u8, 191u8, 116u8,
                            246u8, 106u8,
                        ]
                    {
                        let call = AsMultiThreshold1 {
                            other_signatories,
                            call: ::std::boxed::Box::new(call),
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "If there are enough, then dispatch the call."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call`: The call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                #[doc = ""]
                #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                #[doc = "may be found in the deposited `MultisigExecuted` event."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(S + Z + Call)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- The weight of the `call`."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                #[doc = "-------------------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                #[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                #[doc = "- Plus Call Weight"]
                #[doc = "# </weight>"]
                pub fn as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call: ::subxt::WrapperKeepOpaque<runtime_types::appchain_deip_runtime::Call>,
                    store_call: ::core::primitive::bool,
                    max_weight: ::core::primitive::u64,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        AsMulti,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<AsMulti>()?
                    };
                    if runtime_call_hash
                        == [
                            197u8, 110u8, 215u8, 119u8, 46u8, 214u8, 173u8, 53u8, 53u8, 85u8, 27u8,
                            244u8, 176u8, 141u8, 191u8, 190u8, 233u8, 95u8, 159u8, 238u8, 234u8,
                            64u8, 31u8, 136u8, 185u8, 243u8, 75u8, 124u8, 171u8, 83u8, 72u8, 26u8,
                        ]
                    {
                        let call = AsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call,
                            store_call,
                            max_weight,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                #[doc = ""]
                #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                #[doc = "is cancelled."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                #[doc = "transaction index) of the first approval transaction."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                #[doc = "- One event."]
                #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                #[doc = "----------------------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Read: Multisig Storage, [Caller Account]"]
                #[doc = "    - Write: Multisig Storage, [Caller Account]"]
                #[doc = "# </weight>"]
                pub fn approve_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                    maybe_timepoint: ::core::option::Option<
                        runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    >,
                    call_hash: [::core::primitive::u8; 32usize],
                    max_weight: ::core::primitive::u64,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ApproveAsMulti,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ApproveAsMulti>()?
                    };
                    if runtime_call_hash
                        == [
                            114u8, 29u8, 118u8, 154u8, 91u8, 4u8, 127u8, 126u8, 190u8, 180u8, 57u8,
                            112u8, 72u8, 8u8, 248u8, 126u8, 25u8, 190u8, 130u8, 86u8, 160u8, 164u8,
                            76u8, 64u8, 25u8, 175u8, 132u8, 225u8, 147u8, 166u8, 12u8, 38u8,
                        ]
                    {
                        let call = ApproveAsMulti {
                            threshold,
                            other_signatories,
                            maybe_timepoint,
                            call_hash,
                            max_weight,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                #[doc = "for this operation will be unreserved on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                #[doc = "dispatch. May not be empty."]
                #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                #[doc = "transaction for this dispatch."]
                #[doc = "- `call_hash`: The hash of the call to be executed."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- `O(S)`."]
                #[doc = "- Up to one balance-reserve or unreserve operation."]
                #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                #[doc = "- One encode & hash, both of complexity `O(S)`."]
                #[doc = "- One event."]
                #[doc = "- I/O: 1 read `O(S)`, one remove."]
                #[doc = "- Storage: removes one item."]
                #[doc = "----------------------------------"]
                #[doc = "- DB Weight:"]
                #[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
                #[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
                #[doc = "# </weight>"]
                pub fn cancel_as_multi(
                    &self,
                    threshold: ::core::primitive::u16,
                    other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                    timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                    call_hash: [::core::primitive::u8; 32usize],
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        CancelAsMulti,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<CancelAsMulti>()?
                    };
                    if runtime_call_hash
                        == [
                            195u8, 216u8, 37u8, 179u8, 9u8, 19u8, 238u8, 94u8, 156u8, 5u8, 120u8,
                            78u8, 129u8, 99u8, 239u8, 142u8, 68u8, 12u8, 254u8, 46u8, 251u8, 8u8,
                            193u8, 43u8, 37u8, 68u8, 249u8, 85u8, 163u8, 85u8, 193u8, 47u8,
                        ]
                    {
                        let call = CancelAsMulti {
                            threshold,
                            other_signatories,
                            timepoint,
                            call_hash,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_multisig::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A new multisig operation has begun."]
            pub struct NewMultisig {
                pub approving: ::subxt::sp_core::crypto::AccountId32,
                pub multisig: ::subxt::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::Event for NewMultisig {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "NewMultisig";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A multisig operation has been approved by someone."]
            pub struct MultisigApproval {
                pub approving: ::subxt::sp_core::crypto::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: ::subxt::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::Event for MultisigApproval {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigApproval";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A multisig operation has been executed."]
            pub struct MultisigExecuted {
                pub approving: ::subxt::sp_core::crypto::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: ::subxt::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
                pub result: ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            }
            impl ::subxt::Event for MultisigExecuted {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigExecuted";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A multisig operation has been cancelled."]
            pub struct MultisigCancelled {
                pub cancelling: ::subxt::sp_core::crypto::AccountId32,
                pub timepoint: runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                pub multisig: ::subxt::sp_core::crypto::AccountId32,
                pub call_hash: [::core::primitive::u8; 32usize],
            }
            impl ::subxt::Event for MultisigCancelled {
                const PALLET: &'static str = "Multisig";
                const EVENT: &'static str = "MultisigCancelled";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct Multisigs<'a>(
                pub &'a ::subxt::sp_core::crypto::AccountId32,
                pub &'a [::core::primitive::u8; 32usize],
            );
            impl ::subxt::StorageEntry for Multisigs<'_> {
                const PALLET: &'static str = "Multisig";
                const STORAGE: &'static str = "Multisigs";
                type Value = runtime_types::pallet_multisig::Multisig<
                    ::core::primitive::u32,
                    ::core::primitive::u128,
                    ::subxt::sp_core::crypto::AccountId32,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct Calls<'a>(pub &'a [::core::primitive::u8; 32usize]);
            impl ::subxt::StorageEntry for Calls<'_> {
                const PALLET: &'static str = "Multisig";
                const STORAGE: &'static str = "Calls";
                type Value = (
                    ::subxt::WrapperKeepOpaque<runtime_types::appchain_deip_runtime::Call>,
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u128,
                );
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Identity,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    _1: &'a [::core::primitive::u8; 32usize],
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_multisig::Multisig<
                                ::core::primitive::u32,
                                ::core::primitive::u128,
                                ::subxt::sp_core::crypto::AccountId32,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Multisigs>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                137u8, 130u8, 173u8, 65u8, 126u8, 244u8, 194u8, 167u8, 93u8, 174u8,
                                104u8, 131u8, 115u8, 155u8, 93u8, 185u8, 54u8, 204u8, 155u8, 149u8,
                                184u8, 24u8, 111u8, 40u8, 249u8, 215u8, 34u8, 251u8, 224u8, 110u8,
                                202u8, 2u8,
                            ]
                        {
                            let entry = Multisigs(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " The set of open multisig operations."]
                pub fn multisigs_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Multisigs<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Multisigs>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                137u8, 130u8, 173u8, 65u8, 126u8, 244u8, 194u8, 167u8, 93u8, 174u8,
                                104u8, 131u8, 115u8, 155u8, 93u8, 185u8, 54u8, 204u8, 155u8, 149u8,
                                184u8, 24u8, 111u8, 40u8, 249u8, 215u8, 34u8, 251u8, 224u8, 110u8,
                                202u8, 2u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn calls(
                    &self,
                    _0: &'a [::core::primitive::u8; 32usize],
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<(
                            ::subxt::WrapperKeepOpaque<runtime_types::appchain_deip_runtime::Call>,
                            ::subxt::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        )>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Calls>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                27u8, 205u8, 178u8, 159u8, 99u8, 86u8, 109u8, 190u8, 96u8, 232u8,
                                78u8, 230u8, 230u8, 249u8, 99u8, 150u8, 238u8, 186u8, 152u8, 62u8,
                                248u8, 50u8, 230u8, 148u8, 172u8, 5u8, 162u8, 165u8, 42u8, 89u8,
                                205u8, 62u8,
                            ]
                        {
                            let entry = Calls(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn calls_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Calls<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Calls>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                27u8, 205u8, 178u8, 159u8, 99u8, 86u8, 109u8, 190u8, 96u8, 232u8,
                                78u8, 230u8, 230u8, 249u8, 99u8, 150u8, 238u8, 186u8, 152u8, 62u8,
                                248u8, 50u8, 230u8, 148u8, 172u8, 5u8, 162u8, 165u8, 42u8, 89u8,
                                205u8, 62u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The base amount of currency needed to reserve for creating a multisig execution or to"]
                #[doc = " store a dispatch call for later."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `4 + sizeof((BlockNumber, Balance, AccountId))` bytes and whose key size is"]
                #[doc = " `32 + sizeof(AccountId)` bytes."]
                pub fn deposit_base(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Multisig", "DepositBase")?
                        == [
                            111u8, 1u8, 226u8, 211u8, 175u8, 224u8, 86u8, 180u8, 250u8, 131u8,
                            81u8, 148u8, 77u8, 4u8, 238u8, 176u8, 159u8, 247u8, 208u8, 142u8,
                            235u8, 101u8, 213u8, 134u8, 97u8, 216u8, 142u8, 172u8, 93u8, 73u8,
                            118u8, 155u8,
                        ]
                    {
                        let pallet = metadata.pallet("Multisig")?;
                        let constant = pallet.constant("DepositBase")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The amount of currency needed per unit threshold when creating a multisig execution."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes more into a pre-existing storage value."]
                pub fn deposit_factor(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Multisig", "DepositFactor")?
                        == [
                            110u8, 101u8, 162u8, 251u8, 222u8, 115u8, 168u8, 50u8, 155u8, 175u8,
                            56u8, 128u8, 39u8, 39u8, 162u8, 228u8, 20u8, 242u8, 51u8, 154u8, 231u8,
                            162u8, 61u8, 1u8, 197u8, 39u8, 53u8, 153u8, 54u8, 136u8, 8u8, 157u8,
                        ]
                    {
                        let pallet = metadata.pallet("Multisig")?;
                        let constant = pallet.constant("DepositFactor")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " The maximum amount of signatories allowed in the multisig."]
                pub fn max_signatories(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Multisig", "MaxSignatories")?
                        == [
                            139u8, 36u8, 140u8, 198u8, 176u8, 106u8, 89u8, 194u8, 33u8, 23u8, 60u8,
                            134u8, 143u8, 24u8, 176u8, 64u8, 47u8, 109u8, 159u8, 134u8, 240u8,
                            231u8, 181u8, 146u8, 136u8, 249u8, 175u8, 67u8, 41u8, 152u8, 90u8,
                            15u8,
                        ]
                    {
                        let pallet = metadata.pallet("Multisig")?;
                        let constant = pallet.constant("MaxSignatories")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod utility {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Batch {
                pub calls: ::std::vec::Vec<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for Batch {
                const PALLET: &'static str = "Utility";
                const FUNCTION: &'static str = "batch";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AsDerivative {
                pub index: ::core::primitive::u16,
                pub call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for AsDerivative {
                const PALLET: &'static str = "Utility";
                const FUNCTION: &'static str = "as_derivative";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct BatchAll {
                pub calls: ::std::vec::Vec<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for BatchAll {
                const PALLET: &'static str = "Utility";
                const FUNCTION: &'static str = "batch_all";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct DispatchAs {
                pub as_origin:
                    ::std::boxed::Box<runtime_types::appchain_deip_runtime::OriginCaller>,
                pub call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for DispatchAs {
                const PALLET: &'static str = "Utility";
                const FUNCTION: &'static str = "dispatch_as";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                #[doc = "# </weight>"]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub fn batch(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::appchain_deip_runtime::Call>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Batch, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Batch>()?
                    };
                    if runtime_call_hash
                        == [
                            13u8, 107u8, 194u8, 161u8, 84u8, 84u8, 127u8, 16u8, 88u8, 180u8, 63u8,
                            161u8, 117u8, 62u8, 181u8, 123u8, 124u8, 225u8, 201u8, 234u8, 159u8,
                            20u8, 242u8, 68u8, 108u8, 25u8, 229u8, 87u8, 234u8, 208u8, 144u8,
                            190u8,
                        ]
                    {
                        let call = Batch { calls };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn as_derivative(
                    &self,
                    index: ::core::primitive::u16,
                    call: runtime_types::appchain_deip_runtime::Call,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        AsDerivative,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<AsDerivative>()?
                    };
                    if runtime_call_hash
                        == [
                            107u8, 15u8, 255u8, 134u8, 34u8, 33u8, 145u8, 106u8, 86u8, 22u8, 115u8,
                            20u8, 121u8, 94u8, 107u8, 234u8, 158u8, 111u8, 5u8, 24u8, 217u8, 150u8,
                            203u8, 27u8, 98u8, 104u8, 101u8, 14u8, 198u8, 171u8, 201u8, 185u8,
                        ]
                    {
                        let call = AsDerivative {
                            index,
                            call: ::std::boxed::Box::new(call),
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                #[doc = "# </weight>"]
                pub fn batch_all(
                    &self,
                    calls: ::std::vec::Vec<runtime_types::appchain_deip_runtime::Call>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        BatchAll,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<BatchAll>()?
                    };
                    if runtime_call_hash
                        == [
                            234u8, 114u8, 39u8, 93u8, 241u8, 249u8, 54u8, 238u8, 18u8, 84u8, 74u8,
                            156u8, 246u8, 248u8, 119u8, 2u8, 142u8, 234u8, 65u8, 43u8, 204u8,
                            123u8, 183u8, 141u8, 104u8, 233u8, 19u8, 199u8, 245u8, 111u8, 44u8,
                            88u8,
                        ]
                    {
                        let call = BatchAll { calls };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
                #[doc = "# </weight>"]
                pub fn dispatch_as(
                    &self,
                    as_origin: runtime_types::appchain_deip_runtime::OriginCaller,
                    call: runtime_types::appchain_deip_runtime::Call,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        DispatchAs,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<DispatchAs>()?
                    };
                    if runtime_call_hash
                        == [
                            175u8, 217u8, 145u8, 121u8, 126u8, 158u8, 104u8, 154u8, 222u8, 156u8,
                            12u8, 245u8, 4u8, 167u8, 236u8, 56u8, 38u8, 99u8, 4u8, 255u8, 183u8,
                            146u8, 234u8, 160u8, 232u8, 157u8, 1u8, 113u8, 233u8, 121u8, 55u8,
                            136u8,
                        ]
                    {
                        let call = DispatchAs {
                            as_origin: ::std::boxed::Box::new(as_origin),
                            call: ::std::boxed::Box::new(call),
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_utility::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
            #[doc = "well as the error."]
            pub struct BatchInterrupted {
                pub index: ::core::primitive::u32,
                pub error: runtime_types::sp_runtime::DispatchError,
            }
            impl ::subxt::Event for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Batch of dispatches completed fully with no error."]
            pub struct BatchCompleted;
            impl ::subxt::Event for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A single item within a Batch of dispatches has completed with no error."]
            pub struct ItemCompleted;
            impl ::subxt::Event for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "A call was dispatched. \\[result\\]"]
            pub struct DispatchedAs(
                pub ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
            );
            impl ::subxt::Event for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " The limit on the number of batched calls."]
                pub fn batched_calls_limit(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("Utility", "batched_calls_limit")?
                        == [
                            230u8, 161u8, 6u8, 191u8, 162u8, 108u8, 149u8, 245u8, 68u8, 101u8,
                            120u8, 129u8, 140u8, 51u8, 77u8, 97u8, 30u8, 155u8, 115u8, 70u8, 72u8,
                            235u8, 251u8, 192u8, 5u8, 8u8, 188u8, 72u8, 132u8, 227u8, 44u8, 2u8,
                        ]
                    {
                        let pallet = metadata.pallet("Utility")?;
                        let constant = pallet.constant("batched_calls_limit")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod deip {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Dispatchable calls."]
        #[doc = ""]
        #[doc = "Each variant of this enum maps to a dispatchable function from the associated module."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct CreateProject {
                pub is_private: ::core::primitive::bool,
                pub external_id: runtime_types::primitive_types::H160,
                pub team_id: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
                pub description: ::subxt::sp_core::H256,
                pub domains: ::std::vec::Vec<runtime_types::primitive_types::H160>,
            }
            impl ::subxt::Call for CreateProject {
                const PALLET: &'static str = "Deip";
                const FUNCTION: &'static str = "create_project";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct UpdateProject {
                pub project_id: runtime_types::primitive_types::H160,
                pub description: ::core::option::Option<::subxt::sp_core::H256>,
                pub is_private: ::core::option::Option<::core::primitive::bool>,
            }
            impl ::subxt::Call for UpdateProject {
                const PALLET: &'static str = "Deip";
                const FUNCTION: &'static str = "update_project";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct CreateProjectContent {
                pub external_id: runtime_types::primitive_types::H160,
                pub project_external_id: runtime_types::primitive_types::H160,
                pub team_id: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
                pub content_type: runtime_types::pallet_deip::ProjectContentType,
                pub description: ::subxt::sp_core::H256,
                pub content: ::subxt::sp_core::H256,
                pub authors: ::std::vec::Vec<
                    runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                >,
                pub references:
                    ::core::option::Option<::std::vec::Vec<runtime_types::primitive_types::H160>>,
            }
            impl ::subxt::Call for CreateProjectContent {
                const PALLET: &'static str = "Deip";
                const FUNCTION: &'static str = "create_project_content";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct CreateReview {
                pub external_id: runtime_types::primitive_types::H160,
                pub author: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
                pub content: ::subxt::sp_core::H256,
                pub domains: ::std::vec::Vec<runtime_types::primitive_types::H160>,
                pub assessment_model: ::core::primitive::u32,
                pub weight: ::std::vec::Vec<::core::primitive::u8>,
                pub project_content_external_id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Call for CreateReview {
                const PALLET: &'static str = "Deip";
                const FUNCTION: &'static str = "create_review";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct UpvoteReview {
                pub review_id: runtime_types::primitive_types::H160,
                pub domain_id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Call for UpvoteReview {
                const PALLET: &'static str = "Deip";
                const FUNCTION: &'static str = "upvote_review";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct CreateContractAgreement {
                pub id: runtime_types::primitive_types::H160,
                pub creator: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
                pub parties: ::std::vec::Vec<
                    runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                >,
                pub hash: ::subxt::sp_core::H256,
                pub activation_time: ::core::option::Option<::core::primitive::u64>,
                pub expiration_time: ::core::option::Option<::core::primitive::u64>,
                pub terms: runtime_types::pallet_deip::contract::Terms,
            }
            impl ::subxt::Call for CreateContractAgreement {
                const PALLET: &'static str = "Deip";
                const FUNCTION: &'static str = "create_contract_agreement";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AcceptContractAgreement {
                pub id: runtime_types::primitive_types::H160,
                pub party: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
            }
            impl ::subxt::Call for AcceptContractAgreement {
                const PALLET: &'static str = "Deip";
                const FUNCTION: &'static str = "accept_contract_agreement";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct RejectContractAgreement {
                pub id: runtime_types::primitive_types::H160,
                pub party: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
            }
            impl ::subxt::Call for RejectContractAgreement {
                const PALLET: &'static str = "Deip";
                const FUNCTION: &'static str = "reject_contract_agreement";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Allow a user to create project."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `project`: [Project](./struct.Project.html) to be created."]
                pub fn create_project(
                    &self,
                    is_private: ::core::primitive::bool,
                    external_id: runtime_types::primitive_types::H160,
                    team_id: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                    description: ::subxt::sp_core::H256,
                    domains: ::std::vec::Vec<runtime_types::primitive_types::H160>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        CreateProject,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<CreateProject>()?
                    };
                    if runtime_call_hash
                        == [
                            176u8, 186u8, 96u8, 0u8, 151u8, 75u8, 152u8, 76u8, 150u8, 35u8, 249u8,
                            111u8, 46u8, 90u8, 196u8, 177u8, 87u8, 128u8, 38u8, 85u8, 80u8, 180u8,
                            181u8, 215u8, 6u8, 96u8, 168u8, 98u8, 194u8, 162u8, 212u8, 155u8,
                        ]
                    {
                        let call = CreateProject {
                            is_private,
                            external_id,
                            team_id,
                            description,
                            domains,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Allow a user to update project."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `project_id`: [Project]((./struct.Project.html)) identifier (external_id) to be updated"]
                #[doc = "- `description`: Optional. Hash of description"]
                #[doc = "- `is_private`: Optional.  Determine visible project or not"]
                pub fn update_project(
                    &self,
                    project_id: runtime_types::primitive_types::H160,
                    description: ::core::option::Option<::subxt::sp_core::H256>,
                    is_private: ::core::option::Option<::core::primitive::bool>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        UpdateProject,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<UpdateProject>()?
                    };
                    if runtime_call_hash
                        == [
                            77u8, 182u8, 113u8, 177u8, 69u8, 146u8, 57u8, 81u8, 247u8, 144u8,
                            124u8, 255u8, 238u8, 121u8, 36u8, 137u8, 16u8, 56u8, 21u8, 84u8, 183u8,
                            25u8, 76u8, 43u8, 220u8, 220u8, 56u8, 74u8, 64u8, 92u8, 106u8, 225u8,
                        ]
                    {
                        let call = UpdateProject {
                            project_id,
                            description,
                            is_private,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Allow a user to create project content."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `content`: [Content](./struct.ProjectContent.html) to be created"]
                pub fn create_project_content(
                    &self,
                    external_id: runtime_types::primitive_types::H160,
                    project_external_id: runtime_types::primitive_types::H160,
                    team_id: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                    content_type: runtime_types::pallet_deip::ProjectContentType,
                    description: ::subxt::sp_core::H256,
                    content: ::subxt::sp_core::H256,
                    authors: ::std::vec::Vec<
                        runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::primitive_types::H160,
                        >,
                    >,
                    references: ::core::option::Option<
                        ::std::vec::Vec<runtime_types::primitive_types::H160>,
                    >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        CreateProjectContent,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<CreateProjectContent>()?
                    };
                    if runtime_call_hash
                        == [
                            195u8, 104u8, 11u8, 65u8, 219u8, 150u8, 226u8, 192u8, 91u8, 184u8,
                            233u8, 151u8, 60u8, 241u8, 220u8, 103u8, 247u8, 27u8, 200u8, 60u8,
                            162u8, 176u8, 162u8, 152u8, 53u8, 177u8, 111u8, 84u8, 242u8, 60u8,
                            76u8, 92u8,
                        ]
                    {
                        let call = CreateProjectContent {
                            external_id,
                            project_external_id,
                            team_id,
                            content_type,
                            description,
                            content,
                            authors,
                            references,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Allow a user to create review."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `review`: [Review](./struct.Review.html) to be created"]
                pub fn create_review(
                    &self,
                    external_id: runtime_types::primitive_types::H160,
                    author: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                    content: ::subxt::sp_core::H256,
                    domains: ::std::vec::Vec<runtime_types::primitive_types::H160>,
                    assessment_model: ::core::primitive::u32,
                    weight: ::std::vec::Vec<::core::primitive::u8>,
                    project_content_external_id: runtime_types::primitive_types::H160,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        CreateReview,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<CreateReview>()?
                    };
                    if runtime_call_hash
                        == [
                            49u8, 196u8, 116u8, 152u8, 65u8, 217u8, 239u8, 250u8, 78u8, 90u8,
                            140u8, 26u8, 239u8, 47u8, 56u8, 184u8, 73u8, 150u8, 66u8, 82u8, 144u8,
                            92u8, 96u8, 67u8, 46u8, 138u8, 130u8, 198u8, 172u8, 96u8, 122u8, 11u8,
                        ]
                    {
                        let call = CreateReview {
                            external_id,
                            author,
                            content,
                            domains,
                            assessment_model,
                            weight,
                            project_content_external_id,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Allows DAO to vote for a review."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                pub fn upvote_review(
                    &self,
                    review_id: runtime_types::primitive_types::H160,
                    domain_id: runtime_types::primitive_types::H160,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        UpvoteReview,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<UpvoteReview>()?
                    };
                    if runtime_call_hash
                        == [
                            253u8, 155u8, 86u8, 81u8, 254u8, 216u8, 83u8, 39u8, 217u8, 194u8, 55u8,
                            214u8, 38u8, 13u8, 234u8, 56u8, 12u8, 5u8, 168u8, 189u8, 104u8, 89u8,
                            10u8, 47u8, 110u8, 0u8, 197u8, 29u8, 130u8, 244u8, 202u8, 184u8,
                        ]
                    {
                        let call = UpvoteReview {
                            review_id,
                            domain_id,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Allows DAO to create a contract agreement between parties."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = "- `creator` - creator of the contract agreement. A contract can be created by"]
                #[doc = "    a thirdparty"]
                #[doc = "- `parties` - signatures from all parties must be collected in order"]
                #[doc = "    to consider the contract as approved"]
                #[doc = "- `hash` - hash of contract agreement offchain metadata"]
                #[doc = "- `activation_time`/`expiration_time`"]
                #[doc = "- `terms` - specifies type of the contract agreement. For details see [`ContractAgreementTerms`]."]
                pub fn create_contract_agreement(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    creator: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                    parties: ::std::vec::Vec<
                        runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::primitive_types::H160,
                        >,
                    >,
                    hash: ::subxt::sp_core::H256,
                    activation_time: ::core::option::Option<::core::primitive::u64>,
                    expiration_time: ::core::option::Option<::core::primitive::u64>,
                    terms: runtime_types::pallet_deip::contract::Terms,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        CreateContractAgreement,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<CreateContractAgreement>()?
                    };
                    if runtime_call_hash
                        == [
                            142u8, 176u8, 253u8, 50u8, 220u8, 222u8, 42u8, 61u8, 186u8, 97u8,
                            124u8, 4u8, 111u8, 150u8, 175u8, 69u8, 49u8, 235u8, 235u8, 154u8, 84u8,
                            129u8, 6u8, 37u8, 243u8, 131u8, 158u8, 25u8, 176u8, 169u8, 172u8,
                            101u8,
                        ]
                    {
                        let call = CreateContractAgreement {
                            id,
                            creator,
                            parties,
                            hash,
                            activation_time,
                            expiration_time,
                            terms,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Allows a party to sign the contract agreement created earlier."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = "- `id` - identifies the contract to accept. Check [`ContractAgreementTerms`] for"]
                #[doc = "    supported types"]
                pub fn accept_contract_agreement(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    party: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        AcceptContractAgreement,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<AcceptContractAgreement>()?
                    };
                    if runtime_call_hash
                        == [
                            240u8, 143u8, 117u8, 95u8, 216u8, 210u8, 88u8, 211u8, 222u8, 97u8,
                            81u8, 2u8, 197u8, 221u8, 54u8, 16u8, 177u8, 104u8, 222u8, 142u8, 39u8,
                            66u8, 108u8, 165u8, 146u8, 105u8, 3u8, 107u8, 39u8, 157u8, 152u8,
                            227u8,
                        ]
                    {
                        let call = AcceptContractAgreement { id, party };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Allows a party to reject the contract agreement created earlier."]
                #[doc = "Contract makes a transition to the `Rejected` state and cannot be"]
                #[doc = "accepted by remaining parties anymore."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = "- `id` - identifies the contract to accept. Check [`ContractAgreementTerms`] for"]
                #[doc = "    supported types"]
                pub fn reject_contract_agreement(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    party: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        RejectContractAgreement,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<RejectContractAgreement>()?
                    };
                    if runtime_call_hash
                        == [
                            232u8, 220u8, 65u8, 174u8, 154u8, 203u8, 101u8, 13u8, 27u8, 190u8,
                            135u8, 176u8, 24u8, 89u8, 133u8, 98u8, 183u8, 149u8, 169u8, 163u8,
                            11u8, 128u8, 209u8, 151u8, 136u8, 47u8, 205u8, 76u8, 42u8, 86u8, 43u8,
                            208u8,
                        ]
                    {
                        let call = RejectContractAgreement { id, party };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "Events for this module."]
        #[doc = ""]
        #[doc = "Events type."]
        pub type Event = runtime_types::pallet_deip::RawEvent<
            ::subxt::sp_core::crypto::AccountId32,
            runtime_types::pallet_deip::Project<
                ::subxt::sp_core::H256,
                ::subxt::sp_core::crypto::AccountId32,
            >,
            runtime_types::pallet_deip::review::Review<
                ::subxt::sp_core::H256,
                ::subxt::sp_core::crypto::AccountId32,
            >,
        >;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a project has been created. [BelongsTo, Project]"]
            pub struct ProjectCreated(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub  runtime_types::pallet_deip::Project<
                    ::subxt::sp_core::H256,
                    ::subxt::sp_core::crypto::AccountId32,
                >,
            );
            impl ::subxt::Event for ProjectCreated {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ProjectCreated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a project is removed by the owner. [BelongsTo, Project]"]
            pub struct ProjectRemoved(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub  runtime_types::pallet_deip::Project<
                    ::subxt::sp_core::H256,
                    ::subxt::sp_core::crypto::AccountId32,
                >,
            );
            impl ::subxt::Event for ProjectRemoved {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ProjectRemoved";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a project is removed by the owner. [BelongsTo, ProjectId]"]
            pub struct ProjectUpdated(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub runtime_types::primitive_types::H160,
            );
            impl ::subxt::Event for ProjectUpdated {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ProjectUpdated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a project contnet has been created. [BelongsTo, ProjectContentId]"]
            pub struct ProjectContnetCreated(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub runtime_types::primitive_types::H160,
            );
            impl ::subxt::Event for ProjectContnetCreated {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ProjectContnetCreated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a NDA has been created. [BelongsTo, NdaId]"]
            pub struct NdaCreated(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub runtime_types::primitive_types::H160,
            );
            impl ::subxt::Event for NdaCreated {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "NdaCreated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a NDA Access request has been created. [BelongsTo, NdaAccessRequestId]"]
            pub struct NdaAccessRequestCreated(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub runtime_types::primitive_types::H160,
            );
            impl ::subxt::Event for NdaAccessRequestCreated {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "NdaAccessRequestCreated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct NdaAccessRequestFulfilled(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub runtime_types::primitive_types::H160,
            );
            impl ::subxt::Event for NdaAccessRequestFulfilled {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "NdaAccessRequestFulfilled";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct NdaAccessRequestRejected(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub runtime_types::primitive_types::H160,
            );
            impl ::subxt::Event for NdaAccessRequestRejected {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "NdaAccessRequestRejected";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Added a domain. [Creator, DomainId]"]
            pub struct DomainAdded(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub runtime_types::primitive_types::H160,
            );
            impl ::subxt::Event for DomainAdded {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "DomainAdded";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a review has been created. [BelongsTo, Review]"]
            pub struct ReviewCreated(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub  runtime_types::pallet_deip::review::Review<
                    ::subxt::sp_core::H256,
                    ::subxt::sp_core::crypto::AccountId32,
                >,
            );
            impl ::subxt::Event for ReviewCreated {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ReviewCreated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Emitted when a DAO votes for a review"]
            pub struct ReviewUpvoted(
                pub runtime_types::primitive_types::H160,
                pub ::subxt::sp_core::crypto::AccountId32,
                pub runtime_types::primitive_types::H160,
            );
            impl ::subxt::Event for ReviewUpvoted {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ReviewUpvoted";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ContractAgreementCreated(pub runtime_types::primitive_types::H160);
            impl ::subxt::Event for ContractAgreementCreated {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ContractAgreementCreated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ContractAgreementAccepted(
                pub runtime_types::primitive_types::H160,
                pub ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::Event for ContractAgreementAccepted {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ContractAgreementAccepted";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ContractAgreementFinalized(pub runtime_types::primitive_types::H160);
            impl ::subxt::Event for ContractAgreementFinalized {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ContractAgreementFinalized";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ContractAgreementRejected(
                pub runtime_types::primitive_types::H160,
                pub ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::Event for ContractAgreementRejected {
                const PALLET: &'static str = "Deip";
                const EVENT: &'static str = "ContractAgreementRejected";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct PalletStorageVersion;
            impl ::subxt::StorageEntry for PalletStorageVersion {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "PalletStorageVersion";
                type Value = runtime_types::pallet_deip::StorageVersion;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct ProjectMapV1<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for ProjectMapV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ProjectMapV1";
                type Value = runtime_types::pallet_deip::Project<
                    ::subxt::sp_core::H256,
                    ::subxt::sp_core::crypto::AccountId32,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ProjectIdByTeamIdV1<'a>(
                pub &'a ::subxt::sp_core::crypto::AccountId32,
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for ProjectIdByTeamIdV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ProjectIdByTeamIdV1";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct ProjectContentMapV1<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for ProjectContentMapV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ProjectContentMapV1";
                type Value = runtime_types::pallet_deip::ProjectContent<
                    ::subxt::sp_core::H256,
                    ::subxt::sp_core::crypto::AccountId32,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ContentIdByProjectIdV1<'a>(
                pub &'a runtime_types::primitive_types::H160,
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for ContentIdByProjectIdV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ContentIdByProjectIdV1";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct Ndas;
            impl ::subxt::StorageEntry for Ndas {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "Ndas";
                type Value = ::std::vec::Vec<(
                    runtime_types::primitive_types::H160,
                    ::subxt::sp_core::crypto::AccountId32,
                )>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NdaMapV1<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for NdaMapV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "NdaMapV1";
                type Value = runtime_types::pallet_deip::Nda<
                    ::subxt::sp_core::H256,
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u64,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct NdaAccessRequests;
            impl ::subxt::StorageEntry for NdaAccessRequests {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "NdaAccessRequests";
                type Value = ::std::vec::Vec<(
                    runtime_types::primitive_types::H160,
                    runtime_types::primitive_types::H160,
                    ::subxt::sp_core::crypto::AccountId32,
                )>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NdaAccessRequestMapV1<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for NdaAccessRequestMapV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "NdaAccessRequestMapV1";
                type Value = runtime_types::pallet_deip::NdaAccessRequest<
                    ::subxt::sp_core::H256,
                    ::subxt::sp_core::crypto::AccountId32,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ReviewMapV1<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for ReviewMapV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ReviewMapV1";
                type Value = runtime_types::pallet_deip::review::Review<
                    ::subxt::sp_core::H256,
                    ::subxt::sp_core::crypto::AccountId32,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ReviewIdByProjectIdV1<'a>(
                pub &'a runtime_types::primitive_types::H160,
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for ReviewIdByProjectIdV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ReviewIdByProjectIdV1";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct ReviewIdByContentIdV1<'a>(
                pub &'a runtime_types::primitive_types::H160,
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for ReviewIdByContentIdV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ReviewIdByContentIdV1";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct ReviewIdByAccountIdV1<'a>(
                pub &'a ::subxt::sp_core::crypto::AccountId32,
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for ReviewIdByAccountIdV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ReviewIdByAccountIdV1";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct ReviewVoteMap<'a>(
                pub &'a runtime_types::primitive_types::H160,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for ReviewVoteMap<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ReviewVoteMap";
                type Value = runtime_types::pallet_deip::review::Vote<
                    ::subxt::sp_core::crypto::AccountId32,
                    ::core::primitive::u64,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &(&self.0, &self.1, &self.2),
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct VoteIdByReviewIdV1<'a>(
                pub &'a runtime_types::primitive_types::H160,
                pub  &'a (
                    runtime_types::primitive_types::H160,
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                ),
            );
            impl ::subxt::StorageEntry for VoteIdByReviewIdV1<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "VoteIdByReviewIdV1";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct VoteIdByAccountId<'a>(
                pub &'a ::subxt::sp_core::crypto::AccountId32,
                pub  &'a (
                    runtime_types::primitive_types::H160,
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                ),
            );
            impl ::subxt::StorageEntry for VoteIdByAccountId<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "VoteIdByAccountId";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct Domains<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for Domains<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "Domains";
                type Value = runtime_types::pallet_deip::Domain;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct DomainCount;
            impl ::subxt::StorageEntry for DomainCount {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "DomainCount";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct ContractAgreementMap<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for ContractAgreementMap<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ContractAgreementMap";
                type Value = runtime_types::pallet_deip::contract::Agreement<
                    ::subxt::sp_core::crypto::AccountId32,
                    ::subxt::sp_core::H256,
                    ::core::primitive::u64,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ContractAgreementIdByType<'a>(
                pub &'a runtime_types::pallet_deip::contract::IndexTerms,
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for ContractAgreementIdByType<'_> {
                const PALLET: &'static str = "Deip";
                const STORAGE: &'static str = "ContractAgreementIdByType";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Should be used in conjunction with `on_runtime_upgrade` to ensure an upgrade is executed"]
                #[doc = " once, even if the code is not removed in time."]
                pub fn pallet_storage_version(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_deip::StorageVersion,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PalletStorageVersion>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                20u8, 2u8, 165u8, 23u8, 96u8, 32u8, 178u8, 122u8, 90u8, 29u8,
                                234u8, 11u8, 190u8, 50u8, 159u8, 193u8, 207u8, 108u8, 97u8, 129u8,
                                200u8, 215u8, 143u8, 219u8, 88u8, 114u8, 162u8, 150u8, 191u8,
                                116u8, 70u8, 207u8,
                            ]
                        {
                            let entry = PalletStorageVersion;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn project_map_v1(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_deip::Project<
                            ::subxt::sp_core::H256,
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ProjectMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                131u8, 62u8, 33u8, 110u8, 13u8, 164u8, 221u8, 171u8, 186u8, 223u8,
                                248u8, 187u8, 85u8, 29u8, 230u8, 70u8, 248u8, 140u8, 234u8, 101u8,
                                154u8, 85u8, 84u8, 88u8, 34u8, 34u8, 48u8, 82u8, 179u8, 52u8, 8u8,
                                71u8,
                            ]
                        {
                            let entry = ProjectMapV1(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn project_map_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ProjectMapV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ProjectMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                131u8, 62u8, 33u8, 110u8, 13u8, 164u8, 221u8, 171u8, 186u8, 223u8,
                                248u8, 187u8, 85u8, 29u8, 230u8, 70u8, 248u8, 140u8, 234u8, 101u8,
                                154u8, 85u8, 84u8, 88u8, 34u8, 34u8, 48u8, 82u8, 179u8, 52u8, 8u8,
                                71u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn project_id_by_team_id_v1(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    _1: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<(), ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ProjectIdByTeamIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                254u8, 90u8, 8u8, 34u8, 100u8, 112u8, 154u8, 21u8, 53u8, 170u8,
                                169u8, 95u8, 12u8, 245u8, 210u8, 2u8, 72u8, 23u8, 234u8, 142u8,
                                228u8, 156u8, 254u8, 242u8, 160u8, 153u8, 139u8, 77u8, 122u8, 57u8,
                                126u8, 80u8,
                            ]
                        {
                            let entry = ProjectIdByTeamIdV1(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn project_id_by_team_id_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ProjectIdByTeamIdV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ProjectIdByTeamIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                254u8, 90u8, 8u8, 34u8, 100u8, 112u8, 154u8, 21u8, 53u8, 170u8,
                                169u8, 95u8, 12u8, 245u8, 210u8, 2u8, 72u8, 23u8, 234u8, 142u8,
                                228u8, 156u8, 254u8, 242u8, 160u8, 153u8, 139u8, 77u8, 122u8, 57u8,
                                126u8, 80u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn project_content_map_v1(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_deip::ProjectContent<
                            ::subxt::sp_core::H256,
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ProjectContentMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                23u8, 214u8, 218u8, 199u8, 184u8, 189u8, 80u8, 28u8, 127u8, 236u8,
                                117u8, 116u8, 83u8, 48u8, 219u8, 102u8, 213u8, 32u8, 177u8, 133u8,
                                158u8, 179u8, 205u8, 61u8, 67u8, 14u8, 239u8, 109u8, 197u8, 24u8,
                                118u8, 61u8,
                            ]
                        {
                            let entry = ProjectContentMapV1(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn project_content_map_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ProjectContentMapV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ProjectContentMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                23u8, 214u8, 218u8, 199u8, 184u8, 189u8, 80u8, 28u8, 127u8, 236u8,
                                117u8, 116u8, 83u8, 48u8, 219u8, 102u8, 213u8, 32u8, 177u8, 133u8,
                                158u8, 179u8, 205u8, 61u8, 67u8, 14u8, 239u8, 109u8, 197u8, 24u8,
                                118u8, 61u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn content_id_by_project_id_v1(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    _1: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<(), ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ContentIdByProjectIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                42u8, 82u8, 96u8, 85u8, 132u8, 138u8, 100u8, 60u8, 116u8, 10u8,
                                243u8, 124u8, 225u8, 204u8, 215u8, 214u8, 135u8, 2u8, 13u8, 186u8,
                                81u8, 229u8, 82u8, 67u8, 130u8, 139u8, 155u8, 35u8, 119u8, 141u8,
                                231u8, 184u8,
                            ]
                        {
                            let entry = ContentIdByProjectIdV1(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn content_id_by_project_id_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ContentIdByProjectIdV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ContentIdByProjectIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                42u8, 82u8, 96u8, 85u8, 132u8, 138u8, 100u8, 60u8, 116u8, 10u8,
                                243u8, 124u8, 225u8, 204u8, 215u8, 214u8, 135u8, 2u8, 13u8, 186u8,
                                81u8, 229u8, 82u8, 67u8, 130u8, 139u8, 155u8, 35u8, 119u8, 141u8,
                                231u8, 184u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " NDA list, guarantees uniquest and provides NDA listing"]
                pub fn ndas(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<(
                            runtime_types::primitive_types::H160,
                            ::subxt::sp_core::crypto::AccountId32,
                        )>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Ndas>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                71u8, 191u8, 139u8, 19u8, 155u8, 125u8, 88u8, 134u8, 121u8, 178u8,
                                54u8, 12u8, 32u8, 96u8, 220u8, 136u8, 58u8, 154u8, 59u8, 219u8,
                                138u8, 200u8, 18u8, 105u8, 175u8, 132u8, 169u8, 91u8, 209u8, 190u8,
                                115u8, 77u8,
                            ]
                        {
                            let entry = Ndas;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Map to NDA Info"]
                pub fn nda_map_v1(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_deip::Nda<
                            ::subxt::sp_core::H256,
                            ::subxt::sp_core::crypto::AccountId32,
                            ::core::primitive::u64,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NdaMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                119u8, 41u8, 54u8, 202u8, 92u8, 185u8, 25u8, 66u8, 99u8, 171u8,
                                82u8, 18u8, 211u8, 222u8, 56u8, 157u8, 199u8, 230u8, 27u8, 71u8,
                                169u8, 254u8, 145u8, 16u8, 2u8, 161u8, 40u8, 171u8, 119u8, 85u8,
                                87u8, 32u8,
                            ]
                        {
                            let entry = NdaMapV1(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Map to NDA Info"]
                pub fn nda_map_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, NdaMapV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NdaMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                119u8, 41u8, 54u8, 202u8, 92u8, 185u8, 25u8, 66u8, 99u8, 171u8,
                                82u8, 18u8, 211u8, 222u8, 56u8, 157u8, 199u8, 230u8, 27u8, 71u8,
                                169u8, 254u8, 145u8, 16u8, 2u8, 161u8, 40u8, 171u8, 119u8, 85u8,
                                87u8, 32u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " NDA Access Requests list, guarantees uniquest and provides NDA Access Requests listing"]
                pub fn nda_access_requests(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::std::vec::Vec<(
                            runtime_types::primitive_types::H160,
                            runtime_types::primitive_types::H160,
                            ::subxt::sp_core::crypto::AccountId32,
                        )>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NdaAccessRequests>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                50u8, 75u8, 42u8, 113u8, 43u8, 204u8, 161u8, 178u8, 50u8, 20u8,
                                137u8, 47u8, 102u8, 29u8, 43u8, 141u8, 198u8, 145u8, 220u8, 136u8,
                                119u8, 187u8, 150u8, 144u8, 116u8, 74u8, 101u8, 206u8, 37u8, 142u8,
                                159u8, 224u8,
                            ]
                        {
                            let entry = NdaAccessRequests;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Map to NDA Access Requests Info"]
                pub fn nda_access_request_map_v1(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_deip::NdaAccessRequest<
                            ::subxt::sp_core::H256,
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NdaAccessRequestMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                223u8, 14u8, 90u8, 173u8, 236u8, 28u8, 205u8, 153u8, 163u8, 211u8,
                                10u8, 245u8, 56u8, 140u8, 254u8, 104u8, 128u8, 179u8, 165u8, 153u8,
                                203u8, 68u8, 32u8, 218u8, 68u8, 121u8, 75u8, 34u8, 119u8, 92u8,
                                216u8, 53u8,
                            ]
                        {
                            let entry = NdaAccessRequestMapV1(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Map to NDA Access Requests Info"]
                pub fn nda_access_request_map_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, NdaAccessRequestMapV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NdaAccessRequestMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                223u8, 14u8, 90u8, 173u8, 236u8, 28u8, 205u8, 153u8, 163u8, 211u8,
                                10u8, 245u8, 56u8, 140u8, 254u8, 104u8, 128u8, 179u8, 165u8, 153u8,
                                203u8, 68u8, 32u8, 218u8, 68u8, 121u8, 75u8, 34u8, 119u8, 92u8,
                                216u8, 53u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_map_v1(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_deip::review::Review<
                            ::subxt::sp_core::H256,
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                133u8, 12u8, 232u8, 250u8, 87u8, 47u8, 115u8, 114u8, 106u8, 63u8,
                                112u8, 81u8, 166u8, 139u8, 243u8, 195u8, 203u8, 166u8, 214u8,
                                115u8, 8u8, 128u8, 98u8, 246u8, 156u8, 105u8, 182u8, 23u8, 230u8,
                                172u8, 181u8, 28u8,
                            ]
                        {
                            let entry = ReviewMapV1(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_map_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ReviewMapV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                133u8, 12u8, 232u8, 250u8, 87u8, 47u8, 115u8, 114u8, 106u8, 63u8,
                                112u8, 81u8, 166u8, 139u8, 243u8, 195u8, 203u8, 166u8, 214u8,
                                115u8, 8u8, 128u8, 98u8, 246u8, 156u8, 105u8, 182u8, 23u8, 230u8,
                                172u8, 181u8, 28u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_id_by_project_id_v1(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    _1: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<(), ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewIdByProjectIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                240u8, 10u8, 112u8, 52u8, 48u8, 155u8, 55u8, 117u8, 78u8, 44u8,
                                251u8, 42u8, 176u8, 59u8, 206u8, 90u8, 229u8, 19u8, 84u8, 55u8,
                                246u8, 40u8, 212u8, 226u8, 89u8, 101u8, 20u8, 64u8, 242u8, 210u8,
                                8u8, 104u8,
                            ]
                        {
                            let entry = ReviewIdByProjectIdV1(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_id_by_project_id_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ReviewIdByProjectIdV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewIdByProjectIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                240u8, 10u8, 112u8, 52u8, 48u8, 155u8, 55u8, 117u8, 78u8, 44u8,
                                251u8, 42u8, 176u8, 59u8, 206u8, 90u8, 229u8, 19u8, 84u8, 55u8,
                                246u8, 40u8, 212u8, 226u8, 89u8, 101u8, 20u8, 64u8, 242u8, 210u8,
                                8u8, 104u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_id_by_content_id_v1(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    _1: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<(), ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewIdByContentIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                250u8, 95u8, 209u8, 99u8, 236u8, 251u8, 199u8, 72u8, 166u8, 87u8,
                                6u8, 110u8, 254u8, 50u8, 247u8, 76u8, 217u8, 144u8, 22u8, 149u8,
                                181u8, 212u8, 13u8, 41u8, 179u8, 151u8, 173u8, 58u8, 158u8, 2u8,
                                221u8, 20u8,
                            ]
                        {
                            let entry = ReviewIdByContentIdV1(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_id_by_content_id_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ReviewIdByContentIdV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewIdByContentIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                250u8, 95u8, 209u8, 99u8, 236u8, 251u8, 199u8, 72u8, 166u8, 87u8,
                                6u8, 110u8, 254u8, 50u8, 247u8, 76u8, 217u8, 144u8, 22u8, 149u8,
                                181u8, 212u8, 13u8, 41u8, 179u8, 151u8, 173u8, 58u8, 158u8, 2u8,
                                221u8, 20u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_id_by_account_id_v1(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    _1: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<(), ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewIdByAccountIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                31u8, 32u8, 216u8, 91u8, 162u8, 23u8, 206u8, 218u8, 20u8, 156u8,
                                124u8, 62u8, 21u8, 240u8, 143u8, 91u8, 169u8, 209u8, 136u8, 85u8,
                                20u8, 79u8, 136u8, 12u8, 207u8, 151u8, 22u8, 18u8, 158u8, 160u8,
                                2u8, 52u8,
                            ]
                        {
                            let entry = ReviewIdByAccountIdV1(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_id_by_account_id_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ReviewIdByAccountIdV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewIdByAccountIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                31u8, 32u8, 216u8, 91u8, 162u8, 23u8, 206u8, 218u8, 20u8, 156u8,
                                124u8, 62u8, 21u8, 240u8, 143u8, 91u8, 169u8, 209u8, 136u8, 85u8,
                                20u8, 79u8, 136u8, 12u8, 207u8, 151u8, 22u8, 18u8, 158u8, 160u8,
                                2u8, 52u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_vote_map(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    _1: &'a ::subxt::sp_core::crypto::AccountId32,
                    _2: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_deip::review::Vote<
                            ::subxt::sp_core::crypto::AccountId32,
                            ::core::primitive::u64,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewVoteMap>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                253u8, 117u8, 54u8, 183u8, 239u8, 92u8, 187u8, 52u8, 122u8, 254u8,
                                216u8, 106u8, 59u8, 33u8, 243u8, 207u8, 227u8, 42u8, 27u8, 76u8,
                                19u8, 76u8, 140u8, 63u8, 131u8, 41u8, 21u8, 72u8, 111u8, 145u8,
                                217u8, 239u8,
                            ]
                        {
                            let entry = ReviewVoteMap(_0, _1, _2);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn review_vote_map_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ReviewVoteMap<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReviewVoteMap>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                253u8, 117u8, 54u8, 183u8, 239u8, 92u8, 187u8, 52u8, 122u8, 254u8,
                                216u8, 106u8, 59u8, 33u8, 243u8, 207u8, 227u8, 42u8, 27u8, 76u8,
                                19u8, 76u8, 140u8, 63u8, 131u8, 41u8, 21u8, 72u8, 111u8, 145u8,
                                217u8, 239u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn vote_id_by_review_id_v1(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    _1: &'a (
                        runtime_types::primitive_types::H160,
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    ),
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<(), ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<VoteIdByReviewIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                181u8, 27u8, 230u8, 210u8, 250u8, 193u8, 18u8, 179u8, 215u8, 175u8,
                                143u8, 94u8, 36u8, 143u8, 128u8, 128u8, 225u8, 48u8, 66u8, 135u8,
                                219u8, 138u8, 2u8, 225u8, 148u8, 101u8, 230u8, 244u8, 210u8, 94u8,
                                81u8, 67u8,
                            ]
                        {
                            let entry = VoteIdByReviewIdV1(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn vote_id_by_review_id_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, VoteIdByReviewIdV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<VoteIdByReviewIdV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                181u8, 27u8, 230u8, 210u8, 250u8, 193u8, 18u8, 179u8, 215u8, 175u8,
                                143u8, 94u8, 36u8, 143u8, 128u8, 128u8, 225u8, 48u8, 66u8, 135u8,
                                219u8, 138u8, 2u8, 225u8, 148u8, 101u8, 230u8, 244u8, 210u8, 94u8,
                                81u8, 67u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn vote_id_by_account_id(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    _1: &'a (
                        runtime_types::primitive_types::H160,
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    ),
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<(), ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<VoteIdByAccountId>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                110u8, 6u8, 211u8, 237u8, 204u8, 63u8, 188u8, 101u8, 186u8, 68u8,
                                193u8, 79u8, 254u8, 211u8, 222u8, 253u8, 9u8, 193u8, 80u8, 65u8,
                                74u8, 14u8, 126u8, 243u8, 198u8, 190u8, 53u8, 7u8, 44u8, 232u8,
                                171u8, 29u8,
                            ]
                        {
                            let entry = VoteIdByAccountId(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn vote_id_by_account_id_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, VoteIdByAccountId<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<VoteIdByAccountId>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                110u8, 6u8, 211u8, 237u8, 204u8, 63u8, 188u8, 101u8, 186u8, 68u8,
                                193u8, 79u8, 254u8, 211u8, 222u8, 253u8, 9u8, 193u8, 80u8, 65u8,
                                74u8, 14u8, 126u8, 243u8, 198u8, 190u8, 53u8, 7u8, 44u8, 232u8,
                                171u8, 29u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn domains(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_deip::Domain,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Domains>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                149u8, 186u8, 43u8, 190u8, 96u8, 82u8, 179u8, 135u8, 21u8, 155u8,
                                60u8, 8u8, 26u8, 33u8, 37u8, 84u8, 144u8, 183u8, 189u8, 170u8,
                                81u8, 75u8, 49u8, 8u8, 253u8, 90u8, 226u8, 3u8, 109u8, 168u8,
                                110u8, 0u8,
                            ]
                        {
                            let entry = Domains(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn domains_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, Domains<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<Domains>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                149u8, 186u8, 43u8, 190u8, 96u8, 82u8, 179u8, 135u8, 21u8, 155u8,
                                60u8, 8u8, 26u8, 33u8, 37u8, 84u8, 144u8, 183u8, 189u8, 170u8,
                                81u8, 75u8, 49u8, 8u8, 253u8, 90u8, 226u8, 3u8, 109u8, 168u8,
                                110u8, 0u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn domain_count(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DomainCount>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                129u8, 166u8, 31u8, 72u8, 141u8, 173u8, 35u8, 122u8, 177u8, 157u8,
                                182u8, 225u8, 17u8, 18u8, 98u8, 132u8, 204u8, 31u8, 158u8, 19u8,
                                254u8, 78u8, 222u8, 184u8, 4u8, 152u8, 206u8, 127u8, 189u8, 92u8,
                                91u8, 180u8,
                            ]
                        {
                            let entry = DomainCount;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn contract_agreement_map(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        runtime_types::pallet_deip::contract::Agreement<
                            ::subxt::sp_core::crypto::AccountId32,
                            ::subxt::sp_core::H256,
                            ::core::primitive::u64,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ContractAgreementMap>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                237u8, 62u8, 49u8, 171u8, 127u8, 178u8, 174u8, 25u8, 93u8, 134u8,
                                126u8, 135u8, 185u8, 143u8, 7u8, 207u8, 234u8, 177u8, 224u8, 13u8,
                                84u8, 181u8, 125u8, 41u8, 255u8, 173u8, 133u8, 40u8, 76u8, 249u8,
                                119u8, 54u8,
                            ]
                        {
                            let entry = ContractAgreementMap(_0);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn contract_agreement_map_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ContractAgreementMap<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ContractAgreementMap>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                237u8, 62u8, 49u8, 171u8, 127u8, 178u8, 174u8, 25u8, 93u8, 134u8,
                                126u8, 135u8, 185u8, 143u8, 7u8, 207u8, 234u8, 177u8, 224u8, 13u8,
                                84u8, 181u8, 125u8, 41u8, 255u8, 173u8, 133u8, 40u8, 76u8, 249u8,
                                119u8, 54u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn contract_agreement_id_by_type(
                    &self,
                    _0: &'a runtime_types::pallet_deip::contract::IndexTerms,
                    _1: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<(), ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ContractAgreementIdByType>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                163u8, 227u8, 15u8, 66u8, 105u8, 75u8, 52u8, 97u8, 44u8, 111u8,
                                221u8, 241u8, 72u8, 238u8, 10u8, 239u8, 184u8, 25u8, 141u8, 86u8,
                                219u8, 129u8, 92u8, 18u8, 8u8, 68u8, 184u8, 226u8, 95u8, 87u8,
                                203u8, 49u8,
                            ]
                        {
                            let entry = ContractAgreementIdByType(_0, _1);
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn contract_agreement_id_by_type_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ContractAgreementIdByType<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ContractAgreementIdByType>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                163u8, 227u8, 15u8, 66u8, 105u8, 75u8, 52u8, 97u8, 44u8, 111u8,
                                221u8, 241u8, 72u8, 238u8, 10u8, 239u8, 184u8, 25u8, 141u8, 86u8,
                                219u8, 129u8, 92u8, 18u8, 8u8, 68u8, 184u8, 226u8, 95u8, 87u8,
                                203u8, 49u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
    }
    pub mod deip_proposal {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Propose {
                pub batch: ::std::vec::Vec<
                    runtime_types::pallet_deip_proposal::proposal::BatchItem<
                        runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::primitive_types::H160,
                        >,
                        runtime_types::appchain_deip_runtime::Call,
                    >,
                >,
                pub external_id: ::core::option::Option<runtime_types::primitive_types::H160>,
            }
            impl ::subxt::Call for Propose {
                const PALLET: &'static str = "DeipProposal";
                const FUNCTION: &'static str = "propose";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Decide {
                pub proposal_id: runtime_types::primitive_types::H160,
                pub decision: runtime_types::pallet_deip_proposal::proposal::ProposalMemberDecision,
                pub batch_weight: ::core::primitive::u64,
            }
            impl ::subxt::Call for Decide {
                const PALLET: &'static str = "DeipProposal";
                const FUNCTION: &'static str = "decide";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Expire {
                pub proposal_id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Call for Expire {
                const PALLET: &'static str = "DeipProposal";
                const FUNCTION: &'static str = "expire";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                pub fn propose(
                    &self,
                    batch: ::std::vec::Vec<
                        runtime_types::pallet_deip_proposal::proposal::BatchItem<
                            runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                                ::subxt::sp_core::crypto::AccountId32,
                                runtime_types::primitive_types::H160,
                            >,
                            runtime_types::appchain_deip_runtime::Call,
                        >,
                    >,
                    external_id: ::core::option::Option<runtime_types::primitive_types::H160>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        Propose,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Propose>()?
                    };
                    if runtime_call_hash
                        == [
                            206u8, 41u8, 24u8, 7u8, 67u8, 220u8, 89u8, 165u8, 162u8, 11u8, 122u8,
                            251u8, 203u8, 251u8, 16u8, 217u8, 211u8, 59u8, 199u8, 33u8, 161u8,
                            55u8, 252u8, 37u8, 255u8, 238u8, 66u8, 96u8, 250u8, 247u8, 143u8,
                            217u8,
                        ]
                    {
                        let call = Propose { batch, external_id };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn decide(
                    &self,
                    proposal_id: runtime_types::primitive_types::H160,
                    decision: runtime_types::pallet_deip_proposal::proposal::ProposalMemberDecision,
                    batch_weight: ::core::primitive::u64,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Decide, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Decide>()?
                    };
                    if runtime_call_hash
                        == [
                            29u8, 33u8, 186u8, 71u8, 9u8, 248u8, 127u8, 157u8, 60u8, 33u8, 239u8,
                            78u8, 119u8, 171u8, 196u8, 215u8, 164u8, 164u8, 242u8, 216u8, 95u8,
                            118u8, 111u8, 237u8, 119u8, 199u8, 177u8, 25u8, 148u8, 19u8, 180u8,
                            211u8,
                        ]
                    {
                        let call = Decide {
                            proposal_id,
                            decision,
                            batch_weight,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn expire(
                    &self,
                    proposal_id: runtime_types::primitive_types::H160,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Expire, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Expire>()?
                    };
                    if runtime_call_hash
                        == [
                            212u8, 143u8, 250u8, 200u8, 120u8, 193u8, 251u8, 84u8, 35u8, 163u8,
                            101u8, 91u8, 252u8, 41u8, 168u8, 11u8, 140u8, 166u8, 74u8, 120u8, 76u8,
                            111u8, 202u8, 61u8, 19u8, 15u8, 190u8, 2u8, 112u8, 229u8, 77u8, 14u8,
                        ]
                    {
                        let call = Expire { proposal_id };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_deip_proposal::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Emits when proposal created"]
            pub struct Proposed {
                pub author: ::subxt::sp_core::crypto::AccountId32,
                pub batch: ::std::vec::Vec<
                    runtime_types::pallet_deip_proposal::proposal::BatchItem<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::appchain_deip_runtime::Call,
                    >,
                >,
                pub proposal_id: runtime_types::primitive_types::H160,
                pub batch_weight: ::core::primitive::u64,
            }
            impl ::subxt::Event for Proposed {
                const PALLET: &'static str = "DeipProposal";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Emits when proposal approved by it's member"]
            pub struct Approved {
                pub member: ::subxt::sp_core::crypto::AccountId32,
                pub proposal_id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Event for Approved {
                const PALLET: &'static str = "DeipProposal";
                const EVENT: &'static str = "Approved";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Emits when member revokes his approval"]
            pub struct RevokedApproval {
                pub member: ::subxt::sp_core::crypto::AccountId32,
                pub proposal_id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Event for RevokedApproval {
                const PALLET: &'static str = "DeipProposal";
                const EVENT: &'static str = "RevokedApproval";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Emits when proposal resolved (rejected / done / failed)"]
            pub struct Resolved {
                pub member: ::subxt::sp_core::crypto::AccountId32,
                pub proposal_id: runtime_types::primitive_types::H160,
                pub state: runtime_types::pallet_deip_proposal::proposal::ProposalState,
            }
            impl ::subxt::Event for Resolved {
                const PALLET: &'static str = "DeipProposal";
                const EVENT: &'static str = "Resolved";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Expired"]
            pub struct Expired {
                pub proposal_id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Event for Expired {
                const PALLET: &'static str = "DeipProposal";
                const EVENT: &'static str = "Expired";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct ProposalRepository<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for ProposalRepository<'_> {
                const PALLET: &'static str = "DeipProposal";
                const STORAGE: &'static str = "ProposalRepository";
                type Value = runtime_types::pallet_deip_proposal::proposal::DeipProposal<
                    runtime_types::appchain_deip_runtime::Runtime,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                pub fn proposal_repository(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_deip_proposal::proposal::DeipProposal<
                                runtime_types::appchain_deip_runtime::Runtime,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ProposalRepository>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                199u8, 241u8, 68u8, 244u8, 110u8, 72u8, 204u8, 235u8, 217u8, 48u8,
                                102u8, 236u8, 24u8, 193u8, 121u8, 63u8, 234u8, 108u8, 209u8, 133u8,
                                56u8, 178u8, 231u8, 214u8, 122u8, 156u8, 104u8, 52u8, 36u8, 6u8,
                                182u8, 124u8,
                            ]
                        {
                            let entry = ProposalRepository(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn proposal_repository_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ProposalRepository<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ProposalRepository>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                199u8, 241u8, 68u8, 244u8, 110u8, 72u8, 204u8, 235u8, 217u8, 48u8,
                                102u8, 236u8, 24u8, 193u8, 121u8, 63u8, 234u8, 108u8, 209u8, 133u8,
                                56u8, 178u8, 231u8, 214u8, 122u8, 156u8, 104u8, 52u8, 36u8, 6u8,
                                182u8, 124u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Pending proposal's time-to-live"]
                pub fn ttl(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u64, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("DeipProposal", "Ttl")?
                        == [
                            189u8, 30u8, 246u8, 224u8, 186u8, 0u8, 75u8, 90u8, 238u8, 8u8, 62u8,
                            189u8, 51u8, 67u8, 73u8, 147u8, 5u8, 10u8, 6u8, 60u8, 50u8, 66u8,
                            215u8, 120u8, 134u8, 80u8, 29u8, 188u8, 163u8, 47u8, 25u8, 71u8,
                        ]
                    {
                        let pallet = metadata.pallet("DeipProposal")?;
                        let constant = pallet.constant("Ttl")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = " Period of check for expired proposals"]
                pub fn expire_period(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("DeipProposal", "ExpirePeriod")?
                        == [
                            149u8, 4u8, 252u8, 9u8, 34u8, 148u8, 81u8, 69u8, 113u8, 205u8, 50u8,
                            56u8, 202u8, 233u8, 123u8, 23u8, 0u8, 23u8, 157u8, 138u8, 140u8, 1u8,
                            71u8, 151u8, 30u8, 250u8, 53u8, 180u8, 113u8, 85u8, 218u8, 255u8,
                        ]
                    {
                        let pallet = metadata.pallet("DeipProposal")?;
                        let constant = pallet.constant("ExpirePeriod")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod deip_dao {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Create {
                pub name: runtime_types::primitive_types::H160,
                pub authority: runtime_types::pallet_deip_dao::pallet::dao::InputAuthority<
                    ::subxt::sp_core::crypto::AccountId32,
                >,
                pub metadata: ::core::option::Option<::subxt::sp_core::H256>,
            }
            impl ::subxt::Call for Create {
                const PALLET: &'static str = "DeipDao";
                const FUNCTION: &'static str = "create";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AlterAuthority {
                pub authority: runtime_types::pallet_deip_dao::pallet::dao::AlterAuthority<
                    ::subxt::sp_core::crypto::AccountId32,
                >,
            }
            impl ::subxt::Call for AlterAuthority {
                const PALLET: &'static str = "DeipDao";
                const FUNCTION: &'static str = "alter_authority";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct UpdateDao {
                pub new_metadata: ::core::option::Option<::subxt::sp_core::H256>,
            }
            impl ::subxt::Call for UpdateDao {
                const PALLET: &'static str = "DeipDao";
                const FUNCTION: &'static str = "update_dao";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct OnBehalf {
                pub name: runtime_types::primitive_types::H160,
                pub call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for OnBehalf {
                const PALLET: &'static str = "DeipDao";
                const FUNCTION: &'static str = "on_behalf";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                pub fn create(
                    &self,
                    name: runtime_types::primitive_types::H160,
                    authority: runtime_types::pallet_deip_dao::pallet::dao::InputAuthority<
                        ::subxt::sp_core::crypto::AccountId32,
                    >,
                    metadata: ::core::option::Option<::subxt::sp_core::H256>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Create, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Create>()?
                    };
                    if runtime_call_hash
                        == [
                            29u8, 38u8, 231u8, 103u8, 16u8, 38u8, 238u8, 238u8, 231u8, 101u8, 80u8,
                            198u8, 171u8, 136u8, 44u8, 66u8, 193u8, 236u8, 71u8, 177u8, 154u8,
                            237u8, 32u8, 200u8, 64u8, 52u8, 241u8, 172u8, 20u8, 104u8, 172u8,
                            136u8,
                        ]
                    {
                        let call = Create {
                            name,
                            authority,
                            metadata,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn alter_authority(
                    &self,
                    authority: runtime_types::pallet_deip_dao::pallet::dao::AlterAuthority<
                        ::subxt::sp_core::crypto::AccountId32,
                    >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        AlterAuthority,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<AlterAuthority>()?
                    };
                    if runtime_call_hash
                        == [
                            5u8, 9u8, 153u8, 119u8, 181u8, 164u8, 107u8, 118u8, 57u8, 117u8, 252u8,
                            127u8, 246u8, 224u8, 143u8, 169u8, 70u8, 98u8, 27u8, 46u8, 56u8, 177u8,
                            112u8, 7u8, 209u8, 241u8, 19u8, 12u8, 144u8, 245u8, 36u8, 195u8,
                        ]
                    {
                        let call = AlterAuthority { authority };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn update_dao(
                    &self,
                    new_metadata: ::core::option::Option<::subxt::sp_core::H256>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        UpdateDao,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<UpdateDao>()?
                    };
                    if runtime_call_hash
                        == [
                            31u8, 58u8, 31u8, 65u8, 31u8, 36u8, 156u8, 92u8, 78u8, 16u8, 38u8,
                            144u8, 159u8, 248u8, 181u8, 232u8, 99u8, 250u8, 209u8, 101u8, 176u8,
                            88u8, 35u8, 161u8, 9u8, 97u8, 22u8, 12u8, 10u8, 202u8, 93u8, 81u8,
                        ]
                    {
                        let call = UpdateDao { new_metadata };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn on_behalf(
                    &self,
                    name: runtime_types::primitive_types::H160,
                    call: runtime_types::appchain_deip_runtime::Call,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        OnBehalf,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<OnBehalf>()?
                    };
                    if runtime_call_hash
                        == [
                            110u8, 27u8, 74u8, 227u8, 227u8, 131u8, 159u8, 125u8, 234u8, 186u8,
                            63u8, 210u8, 13u8, 133u8, 172u8, 213u8, 67u8, 169u8, 230u8, 132u8,
                            118u8, 65u8, 13u8, 233u8, 142u8, 146u8, 59u8, 64u8, 243u8, 5u8, 140u8,
                            213u8,
                        ]
                    {
                        let call = OnBehalf {
                            name,
                            call: ::std::boxed::Box::new(call),
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_deip_dao::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Emits when DAO created"]
            pub struct DaoCreate(
                pub  runtime_types::pallet_deip_dao::pallet::dao::Dao<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
            );
            impl ::subxt::Event for DaoCreate {
                const PALLET: &'static str = "DeipDao";
                const EVENT: &'static str = "DaoCreate";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Emits when authority alteration"]
            pub struct DaoAlterAuthority(
                pub  runtime_types::pallet_deip_dao::pallet::dao::Dao<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
            );
            impl ::subxt::Event for DaoAlterAuthority {
                const PALLET: &'static str = "DeipDao";
                const EVENT: &'static str = "DaoAlterAuthority";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct DaoMetadataUpdated(
                pub  runtime_types::pallet_deip_dao::pallet::dao::Dao<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
            );
            impl ::subxt::Event for DaoMetadataUpdated {
                const PALLET: &'static str = "DeipDao";
                const EVENT: &'static str = "DaoMetadataUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct DaoRepository<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for DaoRepository<'_> {
                const PALLET: &'static str = "DeipDao";
                const STORAGE: &'static str = "DaoRepository";
                type Value = runtime_types::pallet_deip_dao::pallet::dao::Dao<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct DaoLookup<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::StorageEntry for DaoLookup<'_> {
                const PALLET: &'static str = "DeipDao";
                const STORAGE: &'static str = "DaoLookup";
                type Value = runtime_types::primitive_types::H160;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                pub fn dao_repository(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_deip_dao::pallet::dao::Dao<
                                ::subxt::sp_core::crypto::AccountId32,
                                runtime_types::primitive_types::H160,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DaoRepository>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                206u8, 236u8, 86u8, 95u8, 137u8, 170u8, 80u8, 183u8, 229u8, 45u8,
                                134u8, 60u8, 73u8, 113u8, 121u8, 213u8, 214u8, 228u8, 148u8, 166u8,
                                219u8, 203u8, 58u8, 160u8, 65u8, 27u8, 164u8, 94u8, 31u8, 198u8,
                                151u8, 253u8,
                            ]
                        {
                            let entry = DaoRepository(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn dao_repository_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, DaoRepository<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DaoRepository>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                206u8, 236u8, 86u8, 95u8, 137u8, 170u8, 80u8, 183u8, 229u8, 45u8,
                                134u8, 60u8, 73u8, 113u8, 121u8, 213u8, 214u8, 228u8, 148u8, 166u8,
                                219u8, 203u8, 58u8, 160u8, 65u8, 27u8, 164u8, 94u8, 31u8, 198u8,
                                151u8, 253u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn dao_lookup(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<runtime_types::primitive_types::H160>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DaoLookup>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                73u8, 14u8, 176u8, 96u8, 203u8, 5u8, 96u8, 66u8, 147u8, 130u8,
                                107u8, 18u8, 116u8, 160u8, 89u8, 170u8, 170u8, 184u8, 175u8, 232u8,
                                236u8, 155u8, 167u8, 110u8, 55u8, 152u8, 138u8, 169u8, 235u8,
                                148u8, 203u8, 171u8,
                            ]
                        {
                            let entry = DaoLookup(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn dao_lookup_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, DaoLookup<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DaoLookup>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                73u8, 14u8, 176u8, 96u8, 203u8, 5u8, 96u8, 66u8, 147u8, 130u8,
                                107u8, 18u8, 116u8, 160u8, 89u8, 170u8, 170u8, 184u8, 175u8, 232u8,
                                236u8, 155u8, 167u8, 110u8, 55u8, 152u8, 138u8, 169u8, 235u8,
                                148u8, 203u8, 171u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Max signatories in DAO Authority"]
                pub fn max_signatories(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("DeipDao", "MaxSignatories")?
                        == [
                            233u8, 248u8, 63u8, 128u8, 4u8, 229u8, 192u8, 158u8, 187u8, 224u8,
                            15u8, 52u8, 191u8, 109u8, 79u8, 197u8, 31u8, 2u8, 58u8, 121u8, 144u8,
                            132u8, 53u8, 11u8, 246u8, 66u8, 114u8, 130u8, 125u8, 236u8, 241u8,
                            28u8,
                        ]
                    {
                        let pallet = metadata.pallet("DeipDao")?;
                        let constant = pallet.constant("MaxSignatories")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod deip_portal {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Create {
                pub delegate: ::subxt::sp_core::crypto::AccountId32,
                pub metadata: ::core::option::Option<::subxt::sp_core::H256>,
            }
            impl ::subxt::Call for Create {
                const PALLET: &'static str = "DeipPortal";
                const FUNCTION: &'static str = "create";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Update {
                pub update: runtime_types::pallet_deip_portal::portal::PortalUpdate<
                    runtime_types::appchain_deip_runtime::Runtime,
                >,
            }
            impl ::subxt::Call for Update {
                const PALLET: &'static str = "DeipPortal";
                const FUNCTION: &'static str = "update";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Sign { pub xt : :: std :: boxed :: Box < runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: sp_runtime :: MultiAddress < :: subxt :: sp_core :: crypto :: AccountId32 , () > , runtime_types :: appchain_deip_runtime :: Call , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > > , }
            impl ::subxt::Call for Sign {
                const PALLET: &'static str = "DeipPortal";
                const FUNCTION: &'static str = "sign";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Exec {
                pub portal_id: runtime_types::primitive_types::H160,
                pub call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for Exec {
                const PALLET: &'static str = "DeipPortal";
                const FUNCTION: &'static str = "exec";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ExecPostponed {
                pub portal_id: runtime_types::primitive_types::H160,
                pub call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
            }
            impl ::subxt::Call for ExecPostponed {
                const PALLET: &'static str = "DeipPortal";
                const FUNCTION: &'static str = "exec_postponed";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                pub fn create(
                    &self,
                    delegate: ::subxt::sp_core::crypto::AccountId32,
                    metadata: ::core::option::Option<::subxt::sp_core::H256>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Create, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Create>()?
                    };
                    if runtime_call_hash
                        == [
                            213u8, 154u8, 126u8, 183u8, 209u8, 175u8, 87u8, 38u8, 242u8, 252u8,
                            39u8, 101u8, 145u8, 188u8, 0u8, 216u8, 218u8, 135u8, 160u8, 181u8,
                            30u8, 111u8, 216u8, 197u8, 2u8, 183u8, 63u8, 188u8, 139u8, 122u8, 42u8,
                            127u8,
                        ]
                    {
                        let call = Create { delegate, metadata };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn update(
                    &self,
                    update: runtime_types::pallet_deip_portal::portal::PortalUpdate<
                        runtime_types::appchain_deip_runtime::Runtime,
                    >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Update, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Update>()?
                    };
                    if runtime_call_hash
                        == [
                            180u8, 93u8, 101u8, 58u8, 21u8, 220u8, 224u8, 13u8, 107u8, 135u8,
                            184u8, 91u8, 59u8, 243u8, 10u8, 248u8, 190u8, 96u8, 156u8, 185u8, 4u8,
                            68u8, 87u8, 105u8, 20u8, 14u8, 239u8, 34u8, 255u8, 82u8, 75u8, 253u8,
                        ]
                    {
                        let call = Update { update };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn sign(
                    &self,
                    xt : runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: sp_runtime :: MultiAddress < :: subxt :: sp_core :: crypto :: AccountId32 , () > , runtime_types :: appchain_deip_runtime :: Call , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Sign, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Sign>()?
                    };
                    if runtime_call_hash
                        == [
                            70u8, 251u8, 225u8, 46u8, 192u8, 13u8, 48u8, 28u8, 69u8, 247u8, 243u8,
                            18u8, 162u8, 81u8, 101u8, 128u8, 109u8, 40u8, 102u8, 98u8, 187u8,
                            184u8, 67u8, 50u8, 18u8, 73u8, 206u8, 34u8, 95u8, 164u8, 181u8, 152u8,
                        ]
                    {
                        let call = Sign {
                            xt: ::std::boxed::Box::new(xt),
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn exec(
                    &self,
                    portal_id: runtime_types::primitive_types::H160,
                    call: runtime_types::appchain_deip_runtime::Call,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Exec, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Exec>()?
                    };
                    if runtime_call_hash
                        == [
                            41u8, 48u8, 28u8, 15u8, 101u8, 146u8, 212u8, 207u8, 158u8, 138u8, 67u8,
                            101u8, 239u8, 9u8, 205u8, 186u8, 214u8, 174u8, 158u8, 66u8, 116u8,
                            243u8, 43u8, 167u8, 148u8, 17u8, 96u8, 216u8, 58u8, 107u8, 163u8,
                            117u8,
                        ]
                    {
                        let call = Exec {
                            portal_id,
                            call: ::std::boxed::Box::new(call),
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn exec_postponed(
                    &self,
                    portal_id: runtime_types::primitive_types::H160,
                    call: runtime_types::appchain_deip_runtime::Call,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ExecPostponed,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ExecPostponed>()?
                    };
                    if runtime_call_hash
                        == [
                            232u8, 35u8, 185u8, 56u8, 7u8, 39u8, 44u8, 111u8, 188u8, 66u8, 243u8,
                            133u8, 107u8, 192u8, 167u8, 70u8, 83u8, 55u8, 162u8, 115u8, 124u8,
                            178u8, 162u8, 249u8, 211u8, 73u8, 53u8, 223u8, 43u8, 86u8, 237u8,
                            106u8,
                        ]
                    {
                        let call = ExecPostponed {
                            portal_id,
                            call: ::std::boxed::Box::new(call),
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct PendingTx<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a [::core::primitive::u8; 32usize],
            );
            impl ::subxt::StorageEntry for PendingTx<'_> {
                const PALLET: &'static str = "DeipPortal";
                const STORAGE: &'static str = "PendingTx";
                type Value = runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: sp_runtime :: MultiAddress < :: subxt :: sp_core :: crypto :: AccountId32 , () > , runtime_types :: appchain_deip_runtime :: Call , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct ScheduledTx<'a>(pub &'a [::core::primitive::u8; 32usize]);
            impl ::subxt::StorageEntry for ScheduledTx<'_> {
                const PALLET: &'static str = "DeipPortal";
                const STORAGE: &'static str = "ScheduledTx";
                type Value = runtime_types::primitive_types::H160;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct SignedTx<'a>(pub &'a ::subxt::sp_core::H256);
            impl ::subxt::StorageEntry for SignedTx<'_> {
                const PALLET: &'static str = "DeipPortal";
                const STORAGE: &'static str = "SignedTx";
                type Value = runtime_types::primitive_types::H160;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Identity,
                    )])
                }
            }
            pub struct PortalTagOfTransaction<'a>(
                pub &'a ::core::primitive::u32,
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for PortalTagOfTransaction<'_> {
                const PALLET: &'static str = "DeipPortal";
                const STORAGE: &'static str = "PortalTagOfTransaction";
                type Value = ::std::vec::Vec<::core::primitive::u32>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(&self.0, ::subxt::StorageHasher::Twox64Concat),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct PortalRepository<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for PortalRepository<'_> {
                const PALLET: &'static str = "DeipPortal";
                const STORAGE: &'static str = "PortalRepository";
                type Value = runtime_types::pallet_deip_portal::portal::Portal<
                    runtime_types::appchain_deip_runtime::Runtime,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct DelegateLookup<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for DelegateLookup<'_> {
                const PALLET: &'static str = "DeipPortal";
                const STORAGE: &'static str = "DelegateLookup";
                type Value = ::subxt::sp_core::crypto::AccountId32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct OwnerLookup<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::StorageEntry for OwnerLookup<'_> {
                const PALLET: &'static str = "DeipPortal";
                const STORAGE: &'static str = "OwnerLookup";
                type Value = runtime_types::primitive_types::H160;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }                pub fn pending_tx (& self , _0 : & 'a :: core :: primitive :: u32 , _1 : & 'a [:: core :: primitive :: u8 ; 32usize] , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: sp_runtime :: MultiAddress < :: subxt :: sp_core :: crypto :: AccountId32 , () > , runtime_types :: appchain_deip_runtime :: Call , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PendingTx>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                92u8, 169u8, 123u8, 55u8, 18u8, 97u8, 48u8, 38u8, 94u8, 175u8, 2u8,
                                87u8, 134u8, 69u8, 32u8, 137u8, 132u8, 9u8, 203u8, 104u8, 234u8,
                                117u8, 199u8, 51u8, 26u8, 254u8, 163u8, 218u8, 55u8, 64u8, 89u8,
                                54u8,
                            ]
                        {
                            let entry = PendingTx(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn pending_tx_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, PendingTx<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PendingTx>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                92u8, 169u8, 123u8, 55u8, 18u8, 97u8, 48u8, 38u8, 94u8, 175u8, 2u8,
                                87u8, 134u8, 69u8, 32u8, 137u8, 132u8, 9u8, 203u8, 104u8, 234u8,
                                117u8, 199u8, 51u8, 26u8, 254u8, 163u8, 218u8, 55u8, 64u8, 89u8,
                                54u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn scheduled_tx(
                    &self,
                    _0: &'a [::core::primitive::u8; 32usize],
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<runtime_types::primitive_types::H160>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ScheduledTx>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                113u8, 135u8, 94u8, 117u8, 248u8, 182u8, 62u8, 95u8, 51u8, 134u8,
                                215u8, 242u8, 125u8, 167u8, 20u8, 204u8, 9u8, 17u8, 17u8, 181u8,
                                14u8, 200u8, 224u8, 50u8, 93u8, 169u8, 226u8, 75u8, 10u8, 204u8,
                                70u8, 214u8,
                            ]
                        {
                            let entry = ScheduledTx(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn scheduled_tx_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ScheduledTx<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ScheduledTx>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                113u8, 135u8, 94u8, 117u8, 248u8, 182u8, 62u8, 95u8, 51u8, 134u8,
                                215u8, 242u8, 125u8, 167u8, 20u8, 204u8, 9u8, 17u8, 17u8, 181u8,
                                14u8, 200u8, 224u8, 50u8, 93u8, 169u8, 226u8, 75u8, 10u8, 204u8,
                                70u8, 214u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn signed_tx(
                    &self,
                    _0: &'a ::subxt::sp_core::H256,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<runtime_types::primitive_types::H160>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<SignedTx>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                167u8, 6u8, 0u8, 219u8, 108u8, 120u8, 142u8, 148u8, 158u8, 26u8,
                                219u8, 204u8, 144u8, 108u8, 171u8, 108u8, 59u8, 102u8, 107u8, 68u8,
                                108u8, 127u8, 134u8, 196u8, 73u8, 111u8, 119u8, 252u8, 121u8,
                                230u8, 216u8, 58u8,
                            ]
                        {
                            let entry = SignedTx(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn signed_tx_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, SignedTx<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<SignedTx>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                167u8, 6u8, 0u8, 219u8, 108u8, 120u8, 142u8, 148u8, 158u8, 26u8,
                                219u8, 204u8, 144u8, 108u8, 171u8, 108u8, 59u8, 102u8, 107u8, 68u8,
                                108u8, 127u8, 134u8, 196u8, 73u8, 111u8, 119u8, 252u8, 121u8,
                                230u8, 216u8, 58u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn portal_tag_of_transaction(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    _1: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::std::vec::Vec<::core::primitive::u32>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PortalTagOfTransaction>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                161u8, 255u8, 144u8, 62u8, 114u8, 144u8, 91u8, 61u8, 191u8, 241u8,
                                180u8, 176u8, 34u8, 71u8, 118u8, 233u8, 48u8, 171u8, 97u8, 169u8,
                                220u8, 82u8, 230u8, 241u8, 213u8, 239u8, 229u8, 98u8, 1u8, 124u8,
                                138u8, 210u8,
                            ]
                        {
                            let entry = PortalTagOfTransaction(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn portal_tag_of_transaction_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, PortalTagOfTransaction<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PortalTagOfTransaction>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                161u8, 255u8, 144u8, 62u8, 114u8, 144u8, 91u8, 61u8, 191u8, 241u8,
                                180u8, 176u8, 34u8, 71u8, 118u8, 233u8, 48u8, 171u8, 97u8, 169u8,
                                220u8, 82u8, 230u8, 241u8, 213u8, 239u8, 229u8, 98u8, 1u8, 124u8,
                                138u8, 210u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn portal_repository(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_deip_portal::portal::Portal<
                                runtime_types::appchain_deip_runtime::Runtime,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PortalRepository>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                34u8, 51u8, 71u8, 100u8, 130u8, 66u8, 152u8, 63u8, 61u8, 220u8,
                                237u8, 155u8, 228u8, 188u8, 41u8, 219u8, 185u8, 178u8, 222u8, 31u8,
                                237u8, 63u8, 55u8, 60u8, 45u8, 247u8, 221u8, 235u8, 169u8, 4u8,
                                131u8, 248u8,
                            ]
                        {
                            let entry = PortalRepository(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn portal_repository_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, PortalRepository<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PortalRepository>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                34u8, 51u8, 71u8, 100u8, 130u8, 66u8, 152u8, 63u8, 61u8, 220u8,
                                237u8, 155u8, 228u8, 188u8, 41u8, 219u8, 185u8, 178u8, 222u8, 31u8,
                                237u8, 63u8, 55u8, 60u8, 45u8, 247u8, 221u8, 235u8, 169u8, 4u8,
                                131u8, 248u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn delegate_lookup(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DelegateLookup>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                155u8, 179u8, 226u8, 111u8, 177u8, 146u8, 202u8, 107u8, 227u8,
                                151u8, 227u8, 73u8, 170u8, 183u8, 105u8, 67u8, 227u8, 38u8, 216u8,
                                142u8, 100u8, 15u8, 186u8, 248u8, 128u8, 176u8, 142u8, 123u8, 39u8,
                                110u8, 197u8, 243u8,
                            ]
                        {
                            let entry = DelegateLookup(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn delegate_lookup_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, DelegateLookup<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<DelegateLookup>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                155u8, 179u8, 226u8, 111u8, 177u8, 146u8, 202u8, 107u8, 227u8,
                                151u8, 227u8, 73u8, 170u8, 183u8, 105u8, 67u8, 227u8, 38u8, 216u8,
                                142u8, 100u8, 15u8, 186u8, 248u8, 128u8, 176u8, 142u8, 123u8, 39u8,
                                110u8, 197u8, 243u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn owner_lookup(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<runtime_types::primitive_types::H160>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<OwnerLookup>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                126u8, 168u8, 141u8, 12u8, 7u8, 199u8, 27u8, 7u8, 195u8, 59u8,
                                40u8, 204u8, 23u8, 253u8, 231u8, 122u8, 120u8, 174u8, 118u8, 46u8,
                                191u8, 103u8, 128u8, 120u8, 26u8, 195u8, 53u8, 25u8, 27u8, 55u8,
                                53u8, 89u8,
                            ]
                        {
                            let entry = OwnerLookup(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn owner_lookup_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, OwnerLookup<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<OwnerLookup>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                126u8, 168u8, 141u8, 12u8, 7u8, 199u8, 27u8, 7u8, 195u8, 59u8,
                                40u8, 204u8, 23u8, 253u8, 231u8, 122u8, 120u8, 174u8, 118u8, 46u8,
                                191u8, 103u8, 128u8, 120u8, 26u8, 195u8, 53u8, 25u8, 27u8, 55u8,
                                53u8, 89u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
    }
    pub mod deip_vesting {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct VestedTransfer {
                pub target:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
                pub plan: runtime_types::pallet_deip_vesting::pallet::VestingPlan<
                    ::core::primitive::u128,
                >,
            }
            impl ::subxt::Call for VestedTransfer {
                const PALLET: &'static str = "DeipVesting";
                const FUNCTION: &'static str = "vested_transfer";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Unlock;
            impl ::subxt::Call for Unlock {
                const PALLET: &'static str = "DeipVesting";
                const FUNCTION: &'static str = "unlock";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Create a vested transfer"]
                pub fn vested_transfer(
                    &self,
                    target: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                    plan: runtime_types::pallet_deip_vesting::pallet::VestingPlan<
                        ::core::primitive::u128,
                    >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        VestedTransfer,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<VestedTransfer>()?
                    };
                    if runtime_call_hash
                        == [
                            160u8, 158u8, 97u8, 37u8, 156u8, 96u8, 65u8, 73u8, 40u8, 141u8, 237u8,
                            49u8, 41u8, 213u8, 76u8, 247u8, 78u8, 102u8, 100u8, 240u8, 147u8,
                            225u8, 38u8, 122u8, 202u8, 37u8, 31u8, 78u8, 104u8, 10u8, 8u8, 126u8,
                        ]
                    {
                        let call = VestedTransfer { target, plan };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Unlock vested tokens of sender account"]
                pub fn unlock(
                    &self,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Unlock, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Unlock>()?
                    };
                    if runtime_call_hash
                        == [
                            148u8, 25u8, 232u8, 84u8, 192u8, 1u8, 188u8, 112u8, 23u8, 123u8, 223u8,
                            159u8, 47u8, 180u8, 246u8, 105u8, 21u8, 249u8, 77u8, 180u8, 161u8,
                            132u8, 115u8, 65u8, 230u8, 72u8, 171u8, 89u8, 42u8, 104u8, 20u8, 234u8,
                        ]
                    {
                        let call = Unlock {};
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_deip_vesting::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct VestingUpdated(
                pub ::subxt::sp_core::crypto::AccountId32,
                pub ::core::primitive::u128,
            );
            impl ::subxt::Event for VestingUpdated {
                const PALLET: &'static str = "DeipVesting";
                const EVENT: &'static str = "VestingUpdated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct VestingCompleted(pub ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::Event for VestingCompleted {
                const PALLET: &'static str = "DeipVesting";
                const EVENT: &'static str = "VestingCompleted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct VestingPlans<'a>(pub &'a ::subxt::sp_core::crypto::AccountId32);
            impl ::subxt::StorageEntry for VestingPlans<'_> {
                const PALLET: &'static str = "DeipVesting";
                const STORAGE: &'static str = "VestingPlans";
                type Value = runtime_types::pallet_deip_vesting::pallet::VestingPlan<
                    ::core::primitive::u128,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                pub fn vesting_plans(
                    &self,
                    _0: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::pallet_deip_vesting::pallet::VestingPlan<
                                ::core::primitive::u128,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<VestingPlans>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                43u8, 44u8, 134u8, 157u8, 66u8, 80u8, 31u8, 122u8, 51u8, 180u8,
                                77u8, 183u8, 30u8, 244u8, 54u8, 63u8, 1u8, 81u8, 160u8, 50u8, 79u8,
                                235u8, 135u8, 221u8, 131u8, 89u8, 187u8, 36u8, 64u8, 160u8, 50u8,
                                14u8,
                            ]
                        {
                            let entry = VestingPlans(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn vesting_plans_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, VestingPlans<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<VestingPlans>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                43u8, 44u8, 134u8, 157u8, 66u8, 80u8, 31u8, 122u8, 51u8, 180u8,
                                77u8, 183u8, 30u8, 244u8, 54u8, 63u8, 1u8, 81u8, 160u8, 50u8, 79u8,
                                235u8, 135u8, 221u8, 131u8, 89u8, 187u8, 36u8, 64u8, 160u8, 50u8,
                                14u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                pub fn min_vested_transfer(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u128, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("DeipVesting", "MinVestedTransfer")?
                        == [
                            42u8, 8u8, 29u8, 233u8, 157u8, 198u8, 141u8, 188u8, 14u8, 145u8, 218u8,
                            161u8, 42u8, 237u8, 40u8, 144u8, 17u8, 25u8, 196u8, 25u8, 36u8, 250u8,
                            243u8, 32u8, 195u8, 250u8, 48u8, 125u8, 33u8, 198u8, 74u8, 67u8,
                        ]
                    {
                        let pallet = metadata.pallet("DeipVesting")?;
                        let constant = pallet.constant("MinVestedTransfer")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod deip_ecosystem_fund {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct FeeRecipient;
            impl ::subxt::StorageEntry for FeeRecipient {
                const PALLET: &'static str = "DeipEcosystemFund";
                const STORAGE: &'static str = "FeeRecipient";
                type Value = ::subxt::sp_core::crypto::AccountId32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                pub fn fee_recipient(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::sp_core::crypto::AccountId32,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<FeeRecipient>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                184u8, 80u8, 97u8, 148u8, 77u8, 47u8, 176u8, 102u8, 73u8, 93u8,
                                80u8, 66u8, 128u8, 92u8, 112u8, 48u8, 188u8, 162u8, 27u8, 132u8,
                                249u8, 134u8, 22u8, 1u8, 122u8, 245u8, 105u8, 223u8, 90u8, 70u8,
                                141u8, 198u8,
                            ]
                        {
                            let entry = FeeRecipient;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
    }
    pub mod deip_investment_opportunity {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Create {
                pub id: runtime_types::primitive_types::H160,
                pub creator: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                >,
                pub shares: (::subxt::sp_core::H256, ::core::primitive::u128),
                pub fund: ::subxt::sp_core::H256,
            }
            impl ::subxt::Call for Create {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "create";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct CommitShares {
                pub id: runtime_types::primitive_types::H160,
                pub shares: (::subxt::sp_core::H256, ::core::primitive::u128),
            }
            impl ::subxt::Call for CommitShares {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "commit_shares";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct RollbackShares {
                pub id: runtime_types::primitive_types::H160,
                pub shares: ::subxt::sp_core::H256,
            }
            impl ::subxt::Call for RollbackShares {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "rollback_shares";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Ready {
                pub id: runtime_types::primitive_types::H160,
                pub start_time: ::core::option::Option<::core::primitive::u64>,
                pub end_time: ::core::primitive::u64,
                pub soft_cap: ::core::primitive::u128,
                pub hard_cap: ::core::primitive::u128,
            }
            impl ::subxt::Call for Ready {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "ready";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Activate {
                pub id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Call for Activate {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "activate";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Invest {
                pub id: runtime_types::primitive_types::H160,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Call for Invest {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "invest";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Payout {
                pub investor: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                pub id: runtime_types::primitive_types::H160,
                pub shares: ::subxt::sp_core::H256,
            }
            impl ::subxt::Call for Payout {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "payout";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Raise {
                pub id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Call for Raise {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "raise";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Expire {
                pub id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Call for Expire {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "expire";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Refund {
                pub investor: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                pub id: runtime_types::primitive_types::H160,
            }
            impl ::subxt::Call for Refund {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "refund";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ReleaseShares {
                pub id: runtime_types::primitive_types::H160,
                pub shares: ::subxt::sp_core::H256,
            }
            impl ::subxt::Call for ReleaseShares {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const FUNCTION: &'static str = "release_shares";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Allows DAO to create an investment opportunity."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `external_id`: id of the sale. Must be unique."]
                #[doc = "- `project_id`: id of the project which tokens are intended to sale."]
                #[doc = "- `investment_type`: specifies type of created investment opportunity. For possible"]
                #[doc = "variants and details see [`FundingModel`]."]
                pub fn create(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    creator: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                    shares: (::subxt::sp_core::H256, ::core::primitive::u128),
                    fund: ::subxt::sp_core::H256,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Create, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Create>()?
                    };
                    if runtime_call_hash
                        == [
                            107u8, 79u8, 160u8, 165u8, 248u8, 128u8, 6u8, 7u8, 85u8, 136u8, 224u8,
                            61u8, 19u8, 164u8, 86u8, 20u8, 14u8, 79u8, 36u8, 162u8, 239u8, 99u8,
                            23u8, 233u8, 129u8, 20u8, 243u8, 81u8, 177u8, 215u8, 86u8, 35u8,
                        ]
                    {
                        let call = Create {
                            id,
                            creator,
                            shares,
                            fund,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn commit_shares(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    shares: (::subxt::sp_core::H256, ::core::primitive::u128),
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        CommitShares,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<CommitShares>()?
                    };
                    if runtime_call_hash
                        == [
                            177u8, 111u8, 210u8, 120u8, 26u8, 3u8, 130u8, 182u8, 145u8, 3u8, 172u8,
                            241u8, 113u8, 5u8, 3u8, 252u8, 75u8, 200u8, 217u8, 7u8, 163u8, 57u8,
                            58u8, 225u8, 66u8, 21u8, 66u8, 20u8, 148u8, 101u8, 95u8, 114u8,
                        ]
                    {
                        let call = CommitShares { id, shares };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn rollback_shares(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    shares: ::subxt::sp_core::H256,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        RollbackShares,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<RollbackShares>()?
                    };
                    if runtime_call_hash
                        == [
                            101u8, 113u8, 137u8, 65u8, 204u8, 38u8, 83u8, 30u8, 112u8, 175u8, 87u8,
                            230u8, 181u8, 20u8, 143u8, 229u8, 79u8, 32u8, 5u8, 52u8, 197u8, 7u8,
                            0u8, 138u8, 163u8, 49u8, 235u8, 132u8, 108u8, 36u8, 147u8, 7u8,
                        ]
                    {
                        let call = RollbackShares { id, shares };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn ready(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    start_time: ::core::option::Option<::core::primitive::u64>,
                    end_time: ::core::primitive::u64,
                    soft_cap: ::core::primitive::u128,
                    hard_cap: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Ready, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Ready>()?
                    };
                    if runtime_call_hash
                        == [
                            118u8, 119u8, 129u8, 127u8, 68u8, 21u8, 56u8, 253u8, 226u8, 52u8, 22u8,
                            26u8, 236u8, 106u8, 139u8, 44u8, 177u8, 216u8, 60u8, 180u8, 171u8,
                            160u8, 49u8, 7u8, 222u8, 130u8, 255u8, 196u8, 101u8, 145u8, 251u8,
                            223u8,
                        ]
                    {
                        let call = Ready {
                            id,
                            start_time,
                            end_time,
                            soft_cap,
                            hard_cap,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn activate(
                    &self,
                    id: runtime_types::primitive_types::H160,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        Activate,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Activate>()?
                    };
                    if runtime_call_hash
                        == [
                            226u8, 224u8, 250u8, 149u8, 20u8, 146u8, 234u8, 150u8, 201u8, 253u8,
                            33u8, 41u8, 75u8, 101u8, 107u8, 176u8, 193u8, 232u8, 193u8, 0u8, 220u8,
                            157u8, 122u8, 14u8, 17u8, 147u8, 159u8, 53u8, 31u8, 135u8, 1u8, 77u8,
                        ]
                    {
                        let call = Activate { id };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Allows DAO to invest to an opportunity."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `id`: identifier of the investment opportunity"]
                #[doc = "- `amount`: amount of units to invest. The account should have enough funds on"]
                #[doc = "    the balance. This amount is reserved until the investment finished or expired"]
                pub fn invest(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    amount: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Invest, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Invest>()?
                    };
                    if runtime_call_hash
                        == [
                            38u8, 61u8, 83u8, 186u8, 100u8, 244u8, 195u8, 246u8, 58u8, 126u8,
                            212u8, 124u8, 148u8, 211u8, 55u8, 75u8, 95u8, 161u8, 184u8, 71u8, 43u8,
                            197u8, 195u8, 134u8, 145u8, 84u8, 89u8, 130u8, 78u8, 24u8, 224u8, 28u8,
                        ]
                    {
                        let call = Invest { id, amount };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn payout(
                    &self,
                    investor: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                    id: runtime_types::primitive_types::H160,
                    shares: ::subxt::sp_core::H256,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Payout, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Payout>()?
                    };
                    if runtime_call_hash
                        == [
                            183u8, 248u8, 169u8, 160u8, 216u8, 241u8, 221u8, 36u8, 164u8, 180u8,
                            57u8, 182u8, 6u8, 226u8, 179u8, 28u8, 76u8, 243u8, 66u8, 191u8, 96u8,
                            68u8, 212u8, 228u8, 164u8, 29u8, 237u8, 133u8, 151u8, 195u8, 95u8,
                            46u8,
                        ]
                    {
                        let call = Payout {
                            investor,
                            id,
                            shares,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn raise(
                    &self,
                    id: runtime_types::primitive_types::H160,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Raise, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Raise>()?
                    };
                    if runtime_call_hash
                        == [
                            54u8, 210u8, 61u8, 49u8, 73u8, 126u8, 24u8, 96u8, 28u8, 212u8, 3u8,
                            40u8, 74u8, 179u8, 220u8, 211u8, 121u8, 164u8, 229u8, 226u8, 218u8,
                            111u8, 140u8, 21u8, 36u8, 129u8, 189u8, 249u8, 241u8, 178u8, 229u8,
                            110u8,
                        ]
                    {
                        let call = Raise { id };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn expire(
                    &self,
                    id: runtime_types::primitive_types::H160,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Expire, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Expire>()?
                    };
                    if runtime_call_hash
                        == [
                            99u8, 166u8, 85u8, 182u8, 220u8, 52u8, 133u8, 66u8, 65u8, 92u8, 193u8,
                            136u8, 141u8, 215u8, 63u8, 123u8, 184u8, 199u8, 204u8, 26u8, 195u8,
                            72u8, 116u8, 161u8, 101u8, 0u8, 7u8, 187u8, 32u8, 145u8, 206u8, 241u8,
                        ]
                    {
                        let call = Expire { id };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn refund(
                    &self,
                    investor: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                    id: runtime_types::primitive_types::H160,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<'a, T, X, Refund, DispatchError, root_mod::Event>,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<Refund>()?
                    };
                    if runtime_call_hash
                        == [
                            148u8, 196u8, 91u8, 99u8, 117u8, 21u8, 22u8, 177u8, 12u8, 20u8, 10u8,
                            131u8, 128u8, 163u8, 47u8, 14u8, 29u8, 93u8, 51u8, 193u8, 87u8, 221u8,
                            35u8, 243u8, 219u8, 160u8, 68u8, 72u8, 184u8, 163u8, 38u8, 118u8,
                        ]
                    {
                        let call = Refund { investor, id };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                pub fn release_shares(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    shares: ::subxt::sp_core::H256,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        ReleaseShares,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<ReleaseShares>()?
                    };
                    if runtime_call_hash
                        == [
                            99u8, 138u8, 168u8, 182u8, 253u8, 124u8, 171u8, 159u8, 63u8, 166u8,
                            218u8, 254u8, 49u8, 244u8, 178u8, 116u8, 78u8, 87u8, 135u8, 116u8,
                            208u8, 234u8, 79u8, 224u8, 245u8, 191u8, 94u8, 110u8, 112u8, 28u8,
                            123u8, 31u8,
                        ]
                    {
                        let call = ReleaseShares { id, shares };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_deip_investment_opportunity::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a simple crowd funding has been created."]
            pub struct Created (pub runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > ,) ;
            impl ::subxt::Event for Created {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "Created";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a simple crowd funding has been activated."]
            pub struct Activated(pub runtime_types::primitive_types::H160);
            impl ::subxt::Event for Activated {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "Activated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a simple crowd funding has finished."]
            pub struct SimpleCrowdfundingFinished(pub runtime_types::primitive_types::H160);
            impl ::subxt::Event for SimpleCrowdfundingFinished {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "SimpleCrowdfundingFinished";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when a simple crowd funding has expired."]
            pub struct Expired (pub runtime_types :: primitive_types :: H160 , pub runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: CrowdfundingStatus ,) ;
            impl ::subxt::Event for Expired {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "Expired";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Event emitted when DAO invested to an opportunity"]
            pub struct Invested(
                pub runtime_types::primitive_types::H160,
                pub ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::Event for Invested {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "Invested";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct HardCapReached(
                pub runtime_types::primitive_types::H160,
                pub ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::Event for HardCapReached {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "HardCapReached";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct CommitShares {
                pub id: runtime_types::primitive_types::H160,
                pub shares: (::subxt::sp_core::H256, ::core::primitive::u128),
            }
            impl ::subxt::Event for CommitShares {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "CommitShares";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct RollbackShares {
                pub id: runtime_types::primitive_types::H160,
                pub shares: (::subxt::sp_core::H256, ::core::primitive::u128),
            }
            impl ::subxt::Event for RollbackShares {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "RollbackShares";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Refund(
                pub runtime_types::primitive_types::H160,
                pub ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::Event for Refund {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "Refund";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Refunded(pub runtime_types::primitive_types::H160);
            impl ::subxt::Event for Refunded {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "Refunded";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct StatusUpdated (pub runtime_types :: primitive_types :: H160 , pub runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: CrowdfundingStatus ,) ;
            impl ::subxt::Event for StatusUpdated {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const EVENT: &'static str = "StatusUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct InvestmentMapV1<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for InvestmentMapV1<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "InvestmentMapV1";
                type Value = ::std::vec::Vec<(
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::pallet_deip_investment_opportunity::crowdfunding::InvestmentV2<
                        ::subxt::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    >,
                )>;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct InvestmentMapV2<'a>(
                pub &'a runtime_types::primitive_types::H160,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::StorageEntry for InvestmentMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "InvestmentMapV2";
                type Value =
                    runtime_types::pallet_deip_investment_opportunity::crowdfunding::InvestmentV2<
                        ::subxt::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                        ::core::primitive::u64,
                    >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct PayoutMapV2<'a>(
                pub &'a runtime_types::primitive_types::H160,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
                pub &'a ::subxt::sp_core::H256,
            );
            impl ::subxt::StorageEntry for PayoutMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "PayoutMapV2";
                type Value = ();
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.2,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct SimpleCrowdfundingMapV1<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for SimpleCrowdfundingMapV1<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "SimpleCrowdfundingMapV1";
                type Value = runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfunding < :: core :: primitive :: u64 , :: subxt :: sp_core :: H256 , :: core :: primitive :: u128 , runtime_types :: deip_transaction_ctx :: transaction_ctx :: TransactionCtxId < runtime_types :: pallet_deip_portal :: transaction_ctx :: PortalCtx < runtime_types :: deip_transaction_ctx :: transaction_ctx :: TransactionCtx < runtime_types :: appchain_deip_runtime :: Runtime > > > > ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct CrowdfundingStatusV2<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for CrowdfundingStatusV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "CrowdfundingStatusV2";
                type Value = runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: CrowdfundingStatus ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct SharesMapV2<'a>(
                pub &'a runtime_types::primitive_types::H160,
                pub &'a ::subxt::sp_core::H256,
            );
            impl ::subxt::StorageEntry for SharesMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "SharesMapV2";
                type Value = ::core::primitive::u128;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct IncompleteCrowdfundingMapV2<'a>(
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for IncompleteCrowdfundingMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "IncompleteCrowdfundingMapV2";
                type Value = runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ReadyCrowdfundingMapV2<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for ReadyCrowdfundingMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "ReadyCrowdfundingMapV2";
                type Value = runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ActiveCrowdfundingMapV2<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for ActiveCrowdfundingMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "ActiveCrowdfundingMapV2";
                type Value = runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct PayoutCrowdfundingMapV2<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for PayoutCrowdfundingMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "PayoutCrowdfundingMapV2";
                type Value = runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct RaiseCrowdfundingMapV2<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for RaiseCrowdfundingMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "RaiseCrowdfundingMapV2";
                type Value = runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct RefundCrowdfundingMapV2<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for RefundCrowdfundingMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "RefundCrowdfundingMapV2";
                type Value = runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ReleaseSharesCrowdfundingMapV2<'a>(
                pub &'a runtime_types::primitive_types::H160,
            );
            impl ::subxt::StorageEntry for ReleaseSharesCrowdfundingMapV2<'_> {
                const PALLET: &'static str = "DeipInvestmentOpportunity";
                const STORAGE: &'static str = "ReleaseSharesCrowdfundingMapV2";
                type Value = runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > ;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }                pub fn investment_map_v1 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < :: std :: vec :: Vec < (:: subxt :: sp_core :: crypto :: AccountId32 , runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: InvestmentV2 < :: subxt :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: u64 > ,) > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<InvestmentMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                93u8, 4u8, 60u8, 119u8, 8u8, 160u8, 118u8, 251u8, 40u8, 106u8,
                                152u8, 23u8, 53u8, 181u8, 39u8, 165u8, 44u8, 223u8, 246u8, 170u8,
                                45u8, 219u8, 236u8, 184u8, 65u8, 213u8, 203u8, 224u8, 87u8, 97u8,
                                206u8, 194u8,
                            ]
                        {
                            let entry = InvestmentMapV1(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn investment_map_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, InvestmentMapV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<InvestmentMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                93u8, 4u8, 60u8, 119u8, 8u8, 160u8, 118u8, 251u8, 40u8, 106u8,
                                152u8, 23u8, 53u8, 181u8, 39u8, 165u8, 44u8, 223u8, 246u8, 170u8,
                                45u8, 219u8, 236u8, 184u8, 65u8, 213u8, 203u8, 224u8, 87u8, 97u8,
                                206u8, 194u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn investment_map_v2 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , _1 : & 'a :: subxt :: sp_core :: crypto :: AccountId32 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: InvestmentV2 < :: subxt :: sp_core :: crypto :: AccountId32 , :: core :: primitive :: u128 , :: core :: primitive :: u64 > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<InvestmentMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                148u8, 30u8, 73u8, 214u8, 211u8, 30u8, 130u8, 73u8, 201u8, 108u8,
                                95u8, 95u8, 208u8, 237u8, 186u8, 230u8, 114u8, 0u8, 205u8, 187u8,
                                109u8, 75u8, 168u8, 178u8, 125u8, 54u8, 4u8, 175u8, 236u8, 226u8,
                                149u8, 8u8,
                            ]
                        {
                            let entry = InvestmentMapV2(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn investment_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, InvestmentMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<InvestmentMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                148u8, 30u8, 73u8, 214u8, 211u8, 30u8, 130u8, 73u8, 201u8, 108u8,
                                95u8, 95u8, 208u8, 237u8, 186u8, 230u8, 114u8, 0u8, 205u8, 187u8,
                                109u8, 75u8, 168u8, 178u8, 125u8, 54u8, 4u8, 175u8, 236u8, 226u8,
                                149u8, 8u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn payout_map_v2(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    _1: &'a ::subxt::sp_core::crypto::AccountId32,
                    _2: &'a ::subxt::sp_core::H256,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<()>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PayoutMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                129u8, 15u8, 29u8, 178u8, 58u8, 55u8, 178u8, 7u8, 50u8, 205u8,
                                116u8, 213u8, 80u8, 233u8, 87u8, 192u8, 208u8, 244u8, 201u8, 72u8,
                                29u8, 66u8, 201u8, 89u8, 99u8, 6u8, 92u8, 62u8, 23u8, 158u8, 174u8,
                                229u8,
                            ]
                        {
                            let entry = PayoutMapV2(_0, _1, _2);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn payout_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, PayoutMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PayoutMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                129u8, 15u8, 29u8, 178u8, 58u8, 55u8, 178u8, 7u8, 50u8, 205u8,
                                116u8, 213u8, 80u8, 233u8, 87u8, 192u8, 208u8, 244u8, 201u8, 72u8,
                                29u8, 66u8, 201u8, 89u8, 99u8, 6u8, 92u8, 62u8, 23u8, 158u8, 174u8,
                                229u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn simple_crowdfunding_map_v1 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfunding < :: core :: primitive :: u64 , :: subxt :: sp_core :: H256 , :: core :: primitive :: u128 , runtime_types :: deip_transaction_ctx :: transaction_ctx :: TransactionCtxId < runtime_types :: pallet_deip_portal :: transaction_ctx :: PortalCtx < runtime_types :: deip_transaction_ctx :: transaction_ctx :: TransactionCtx < runtime_types :: appchain_deip_runtime :: Runtime > > > > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<SimpleCrowdfundingMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                166u8, 60u8, 123u8, 229u8, 189u8, 147u8, 211u8, 126u8, 212u8,
                                190u8, 46u8, 247u8, 114u8, 226u8, 109u8, 225u8, 163u8, 129u8, 3u8,
                                141u8, 2u8, 244u8, 111u8, 118u8, 216u8, 144u8, 192u8, 222u8, 71u8,
                                226u8, 86u8, 138u8,
                            ]
                        {
                            let entry = SimpleCrowdfundingMapV1(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn simple_crowdfunding_map_v1_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, SimpleCrowdfundingMapV1<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<SimpleCrowdfundingMapV1>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                166u8, 60u8, 123u8, 229u8, 189u8, 147u8, 211u8, 126u8, 212u8,
                                190u8, 46u8, 247u8, 114u8, 226u8, 109u8, 225u8, 163u8, 129u8, 3u8,
                                141u8, 2u8, 244u8, 111u8, 118u8, 216u8, 144u8, 192u8, 222u8, 71u8,
                                226u8, 86u8, 138u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn crowdfunding_status_v2 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: CrowdfundingStatus > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<CrowdfundingStatusV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                207u8, 202u8, 214u8, 99u8, 229u8, 114u8, 101u8, 199u8, 96u8, 247u8,
                                152u8, 213u8, 17u8, 60u8, 65u8, 21u8, 194u8, 155u8, 219u8, 65u8,
                                123u8, 232u8, 137u8, 184u8, 145u8, 220u8, 233u8, 65u8, 78u8, 152u8,
                                90u8, 207u8,
                            ]
                        {
                            let entry = CrowdfundingStatusV2(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn crowdfunding_status_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, CrowdfundingStatusV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<CrowdfundingStatusV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                207u8, 202u8, 214u8, 99u8, 229u8, 114u8, 101u8, 199u8, 96u8, 247u8,
                                152u8, 213u8, 17u8, 60u8, 65u8, 21u8, 194u8, 155u8, 219u8, 65u8,
                                123u8, 232u8, 137u8, 184u8, 145u8, 220u8, 233u8, 65u8, 78u8, 152u8,
                                90u8, 207u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn shares_map_v2(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    _1: &'a ::subxt::sp_core::H256,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::core::primitive::u128>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<SharesMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                29u8, 32u8, 152u8, 227u8, 222u8, 15u8, 204u8, 199u8, 226u8, 134u8,
                                127u8, 216u8, 131u8, 252u8, 33u8, 128u8, 126u8, 141u8, 52u8, 235u8,
                                170u8, 113u8, 173u8, 152u8, 82u8, 196u8, 20u8, 39u8, 204u8, 84u8,
                                23u8, 82u8,
                            ]
                        {
                            let entry = SharesMapV2(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn shares_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, SharesMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<SharesMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                29u8, 32u8, 152u8, 227u8, 222u8, 15u8, 204u8, 199u8, 226u8, 134u8,
                                127u8, 216u8, 131u8, 252u8, 33u8, 128u8, 126u8, 141u8, 52u8, 235u8,
                                170u8, 113u8, 173u8, 152u8, 82u8, 196u8, 20u8, 39u8, 204u8, 84u8,
                                23u8, 82u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn incomplete_crowdfunding_map_v2 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<IncompleteCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                232u8, 110u8, 202u8, 177u8, 16u8, 246u8, 0u8, 169u8, 11u8, 154u8,
                                211u8, 255u8, 152u8, 80u8, 195u8, 239u8, 82u8, 195u8, 98u8, 71u8,
                                159u8, 2u8, 107u8, 231u8, 25u8, 163u8, 104u8, 211u8, 229u8, 183u8,
                                203u8, 73u8,
                            ]
                        {
                            let entry = IncompleteCrowdfundingMapV2(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn incomplete_crowdfunding_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, IncompleteCrowdfundingMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<IncompleteCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                232u8, 110u8, 202u8, 177u8, 16u8, 246u8, 0u8, 169u8, 11u8, 154u8,
                                211u8, 255u8, 152u8, 80u8, 195u8, 239u8, 82u8, 195u8, 98u8, 71u8,
                                159u8, 2u8, 107u8, 231u8, 25u8, 163u8, 104u8, 211u8, 229u8, 183u8,
                                203u8, 73u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn ready_crowdfunding_map_v2 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReadyCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                127u8, 85u8, 21u8, 23u8, 124u8, 168u8, 73u8, 125u8, 130u8, 246u8,
                                77u8, 70u8, 199u8, 27u8, 246u8, 245u8, 39u8, 1u8, 89u8, 18u8,
                                109u8, 30u8, 10u8, 96u8, 177u8, 182u8, 105u8, 90u8, 243u8, 185u8,
                                223u8, 8u8,
                            ]
                        {
                            let entry = ReadyCrowdfundingMapV2(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn ready_crowdfunding_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ReadyCrowdfundingMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReadyCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                127u8, 85u8, 21u8, 23u8, 124u8, 168u8, 73u8, 125u8, 130u8, 246u8,
                                77u8, 70u8, 199u8, 27u8, 246u8, 245u8, 39u8, 1u8, 89u8, 18u8,
                                109u8, 30u8, 10u8, 96u8, 177u8, 182u8, 105u8, 90u8, 243u8, 185u8,
                                223u8, 8u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn active_crowdfunding_map_v2 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ActiveCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                252u8, 93u8, 69u8, 211u8, 182u8, 142u8, 154u8, 103u8, 53u8, 234u8,
                                136u8, 97u8, 186u8, 27u8, 255u8, 68u8, 196u8, 77u8, 158u8, 160u8,
                                223u8, 86u8, 66u8, 32u8, 39u8, 80u8, 184u8, 178u8, 29u8, 99u8,
                                204u8, 152u8,
                            ]
                        {
                            let entry = ActiveCrowdfundingMapV2(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn active_crowdfunding_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ActiveCrowdfundingMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ActiveCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                252u8, 93u8, 69u8, 211u8, 182u8, 142u8, 154u8, 103u8, 53u8, 234u8,
                                136u8, 97u8, 186u8, 27u8, 255u8, 68u8, 196u8, 77u8, 158u8, 160u8,
                                223u8, 86u8, 66u8, 32u8, 39u8, 80u8, 184u8, 178u8, 29u8, 99u8,
                                204u8, 152u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn payout_crowdfunding_map_v2 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PayoutCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                4u8, 162u8, 54u8, 244u8, 63u8, 247u8, 95u8, 189u8, 32u8, 245u8,
                                241u8, 162u8, 215u8, 34u8, 227u8, 173u8, 153u8, 146u8, 115u8, 98u8,
                                202u8, 229u8, 98u8, 160u8, 69u8, 186u8, 188u8, 190u8, 48u8, 125u8,
                                4u8, 112u8,
                            ]
                        {
                            let entry = PayoutCrowdfundingMapV2(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn payout_crowdfunding_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, PayoutCrowdfundingMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<PayoutCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                4u8, 162u8, 54u8, 244u8, 63u8, 247u8, 95u8, 189u8, 32u8, 245u8,
                                241u8, 162u8, 215u8, 34u8, 227u8, 173u8, 153u8, 146u8, 115u8, 98u8,
                                202u8, 229u8, 98u8, 160u8, 69u8, 186u8, 188u8, 190u8, 48u8, 125u8,
                                4u8, 112u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn raise_crowdfunding_map_v2 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<RaiseCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                76u8, 98u8, 73u8, 34u8, 75u8, 241u8, 56u8, 87u8, 2u8, 57u8, 229u8,
                                29u8, 140u8, 135u8, 196u8, 64u8, 223u8, 61u8, 220u8, 242u8, 32u8,
                                118u8, 170u8, 73u8, 176u8, 254u8, 46u8, 88u8, 212u8, 194u8, 62u8,
                                14u8,
                            ]
                        {
                            let entry = RaiseCrowdfundingMapV2(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn raise_crowdfunding_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, RaiseCrowdfundingMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<RaiseCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                76u8, 98u8, 73u8, 34u8, 75u8, 241u8, 56u8, 87u8, 2u8, 57u8, 229u8,
                                29u8, 140u8, 135u8, 196u8, 64u8, 223u8, 61u8, 220u8, 242u8, 32u8,
                                118u8, 170u8, 73u8, 176u8, 254u8, 46u8, 88u8, 212u8, 194u8, 62u8,
                                14u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn refund_crowdfunding_map_v2 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<RefundCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                28u8, 22u8, 137u8, 38u8, 46u8, 235u8, 71u8, 246u8, 235u8, 43u8,
                                71u8, 167u8, 194u8, 250u8, 37u8, 0u8, 117u8, 242u8, 80u8, 47u8,
                                144u8, 91u8, 231u8, 59u8, 138u8, 48u8, 180u8, 0u8, 233u8, 224u8,
                                0u8, 4u8,
                            ]
                        {
                            let entry = RefundCrowdfundingMapV2(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn refund_crowdfunding_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, RefundCrowdfundingMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<RefundCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                28u8, 22u8, 137u8, 38u8, 46u8, 235u8, 71u8, 246u8, 235u8, 43u8,
                                71u8, 167u8, 194u8, 250u8, 37u8, 0u8, 117u8, 242u8, 80u8, 47u8,
                                144u8, 91u8, 231u8, 59u8, 138u8, 48u8, 180u8, 0u8, 233u8, 224u8,
                                0u8, 4u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }                pub fn release_shares_crowdfunding_map_v2 (& self , _0 : & 'a runtime_types :: primitive_types :: H160 , block_hash : :: core :: option :: Option < T :: Hash > ,) -> impl :: core :: future :: Future < Output = :: core :: result :: Result < :: core :: option :: Option < runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > > , :: subxt :: BasicError > > + 'a{
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReleaseSharesCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                130u8, 239u8, 52u8, 104u8, 187u8, 74u8, 84u8, 220u8, 148u8, 34u8,
                                27u8, 130u8, 26u8, 44u8, 39u8, 152u8, 50u8, 18u8, 244u8, 60u8,
                                51u8, 20u8, 189u8, 167u8, 22u8, 31u8, 65u8, 82u8, 186u8, 135u8,
                                86u8, 125u8,
                            ]
                        {
                            let entry = ReleaseSharesCrowdfundingMapV2(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                pub fn release_shares_crowdfunding_map_v2_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ReleaseSharesCrowdfundingMapV2<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ReleaseSharesCrowdfundingMapV2>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                130u8, 239u8, 52u8, 104u8, 187u8, 74u8, 84u8, 220u8, 148u8, 34u8,
                                27u8, 130u8, 26u8, 44u8, 39u8, 152u8, 50u8, 18u8, 244u8, 60u8,
                                51u8, 20u8, 189u8, 167u8, 22u8, 31u8, 65u8, 82u8, 186u8, 135u8,
                                86u8, 125u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                pub fn max_shares(
                    &self,
                ) -> ::core::result::Result<::core::primitive::u16, ::subxt::BasicError>
                {
                    let locked_metadata = self.client.metadata();
                    let metadata = locked_metadata.read();
                    if metadata.constant_hash("DeipInvestmentOpportunity", "MaxShares")?
                        == [
                            62u8, 113u8, 77u8, 114u8, 71u8, 103u8, 43u8, 53u8, 167u8, 143u8, 230u8,
                            80u8, 75u8, 202u8, 41u8, 62u8, 54u8, 115u8, 20u8, 149u8, 45u8, 54u8,
                            158u8, 193u8, 237u8, 110u8, 219u8, 221u8, 45u8, 197u8, 73u8, 248u8,
                        ]
                    {
                        let pallet = metadata.pallet("DeipInvestmentOpportunity")?;
                        let constant = pallet.constant("MaxShares")?;
                        let value = ::subxt::codec::Decode::decode(&mut &constant.value[..])?;
                        Ok(value)
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
    }
    pub mod deip_fnft {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct CreateCollection {
                pub id: runtime_types::primitive_types::H160,
                pub max_items: ::core::option::Option<::core::primitive::u32>,
            }
            impl ::subxt::Call for CreateCollection {
                const PALLET: &'static str = "DeipFNFT";
                const FUNCTION: &'static str = "create_collection";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct MintItem {
                pub collection: runtime_types::primitive_types::H160,
                pub item: ::subxt::sp_core::H256,
            }
            impl ::subxt::Call for MintItem {
                const PALLET: &'static str = "DeipFNFT";
                const FUNCTION: &'static str = "mint_item";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct TransferItem {
                pub item: ::subxt::sp_core::H256,
                pub to:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
            }
            impl ::subxt::Call for TransferItem {
                const PALLET: &'static str = "DeipFNFT";
                const FUNCTION: &'static str = "transfer_item";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct MintFraction {
                pub item: ::subxt::sp_core::H256,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Call for MintFraction {
                const PALLET: &'static str = "DeipFNFT";
                const FUNCTION: &'static str = "mint_fraction";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct BurnFraction {
                pub item: ::subxt::sp_core::H256,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Call for BurnFraction {
                const PALLET: &'static str = "DeipFNFT";
                const FUNCTION: &'static str = "burn_fraction";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct TransferFraction {
                pub item: ::subxt::sp_core::H256,
                pub to:
                    ::subxt::sp_runtime::MultiAddress<::subxt::sp_core::crypto::AccountId32, ()>,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Call for TransferFraction {
                const PALLET: &'static str = "DeipFNFT";
                const FUNCTION: &'static str = "transfer_fraction";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct FractionalizeItem {
                pub item: ::subxt::sp_core::H256,
                pub total_amount: ::core::primitive::u128,
                pub limited: ::core::primitive::bool,
            }
            impl ::subxt::Call for FractionalizeItem {
                const PALLET: &'static str = "DeipFNFT";
                const FUNCTION: &'static str = "fractionalize_item";
            }
            pub struct TransactionApi<'a, T: ::subxt::Config, X> {
                client: &'a ::subxt::Client<T>,
                marker: ::core::marker::PhantomData<X>,
            }
            impl<'a, T, X> TransactionApi<'a, T, X>
            where
                T: ::subxt::Config,
                X: ::subxt::extrinsic::ExtrinsicParams<T>,
            {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self {
                        client,
                        marker: ::core::marker::PhantomData,
                    }
                }
                #[doc = "Creates new collection. Returns collection id in event."]
                #[doc = ""]
                #[doc = "Parameters"]
                #[doc = "- `max_items`: Max number of items in the collection."]
                #[doc = ""]
                #[doc = "Emits:"]
                #[doc = "    [`Event::CollectionCreated`] when successful."]
                pub fn create_collection(
                    &self,
                    id: runtime_types::primitive_types::H160,
                    max_items: ::core::option::Option<::core::primitive::u32>,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        CreateCollection,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<CreateCollection>()?
                    };
                    if runtime_call_hash
                        == [
                            119u8, 39u8, 110u8, 130u8, 59u8, 82u8, 138u8, 170u8, 225u8, 159u8,
                            46u8, 117u8, 113u8, 143u8, 202u8, 183u8, 43u8, 220u8, 172u8, 56u8,
                            136u8, 64u8, 91u8, 105u8, 128u8, 61u8, 209u8, 61u8, 190u8, 228u8, 87u8,
                            95u8,
                        ]
                    {
                        let call = CreateCollection { id, max_items };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Mints item into collection."]
                #[doc = ""]
                #[doc = "Parameters"]
                #[doc = "- `collection`: Id of the collection to be minted."]
                #[doc = "- `item`: Unique item identifier, eg hash."]
                #[doc = ""]
                #[doc = "Emits:"]
                #[doc = "    [`Event::ItemMinted`] when successful."]
                pub fn mint_item(
                    &self,
                    collection: runtime_types::primitive_types::H160,
                    item: ::subxt::sp_core::H256,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        MintItem,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<MintItem>()?
                    };
                    if runtime_call_hash
                        == [
                            175u8, 190u8, 59u8, 185u8, 103u8, 78u8, 48u8, 130u8, 139u8, 35u8,
                            153u8, 120u8, 205u8, 83u8, 106u8, 120u8, 157u8, 81u8, 134u8, 52u8,
                            47u8, 35u8, 184u8, 143u8, 154u8, 196u8, 192u8, 159u8, 178u8, 62u8,
                            215u8, 178u8,
                        ]
                    {
                        let call = MintItem { collection, item };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Transfers item to another account."]
                #[doc = ""]
                #[doc = "Parameters"]
                #[doc = "- `item`: Unique identifier of the item to be transferred."]
                #[doc = "- `to`: Destination account."]
                #[doc = ""]
                #[doc = "Emits:"]
                #[doc = "    [`Event::ItemTransferred`] when successful."]
                pub fn transfer_item(
                    &self,
                    item: ::subxt::sp_core::H256,
                    to: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        TransferItem,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<TransferItem>()?
                    };
                    if runtime_call_hash
                        == [
                            83u8, 215u8, 57u8, 68u8, 80u8, 71u8, 57u8, 105u8, 132u8, 183u8, 56u8,
                            212u8, 71u8, 64u8, 164u8, 8u8, 166u8, 66u8, 176u8, 152u8, 254u8, 25u8,
                            249u8, 113u8, 18u8, 4u8, 243u8, 7u8, 139u8, 160u8, 209u8, 119u8,
                        ]
                    {
                        let call = TransferItem { item, to };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Mints additional fungible tokens, fractions for an NFT or coins."]
                #[doc = "Fails if issuance of the fractions was limited on fractionalization"]
                #[doc = "stage."]
                #[doc = ""]
                #[doc = "Parameters"]
                #[doc = "- `item`: Unique identifier of the fractionalized item."]
                #[doc = "- `amount`: Amount of fractions to be minted."]
                #[doc = ""]
                #[doc = "Emits:"]
                #[doc = "    [`Event::FractionMinted`] when successful."]
                pub fn mint_fraction(
                    &self,
                    item: ::subxt::sp_core::H256,
                    amount: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        MintFraction,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<MintFraction>()?
                    };
                    if runtime_call_hash
                        == [
                            35u8, 72u8, 120u8, 183u8, 141u8, 52u8, 4u8, 63u8, 90u8, 66u8, 73u8,
                            198u8, 125u8, 16u8, 241u8, 205u8, 194u8, 45u8, 4u8, 142u8, 91u8, 28u8,
                            142u8, 212u8, 58u8, 39u8, 133u8, 176u8, 115u8, 50u8, 30u8, 121u8,
                        ]
                    {
                        let call = MintFraction { item, amount };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Burns fractions from item."]
                #[doc = ""]
                #[doc = "Parameters"]
                #[doc = "- `item`: Unique identifier of the fractionalized item."]
                #[doc = "- `amount`: Amount of fractions to be burned."]
                #[doc = ""]
                #[doc = "Emits:"]
                #[doc = "    [`Event::FractionBurned`] when successful."]
                pub fn burn_fraction(
                    &self,
                    item: ::subxt::sp_core::H256,
                    amount: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        BurnFraction,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<BurnFraction>()?
                    };
                    if runtime_call_hash
                        == [
                            210u8, 221u8, 210u8, 44u8, 119u8, 94u8, 12u8, 35u8, 27u8, 125u8, 205u8,
                            220u8, 51u8, 14u8, 154u8, 134u8, 238u8, 150u8, 198u8, 188u8, 137u8,
                            103u8, 133u8, 122u8, 140u8, 58u8, 228u8, 27u8, 137u8, 202u8, 141u8,
                            161u8,
                        ]
                    {
                        let call = BurnFraction { item, amount };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Transfers fraction (fungible token) to another account."]
                #[doc = ""]
                #[doc = "Parameters"]
                #[doc = "- `item`: Unique id of the fractionalized item."]
                #[doc = "- `to`: Destination account."]
                #[doc = "- `amount`: Amount of fractions to be transferred."]
                #[doc = ""]
                #[doc = "Emits:"]
                #[doc = "    [`Event::FractionTransferred`] when successful."]
                pub fn transfer_fraction(
                    &self,
                    item: ::subxt::sp_core::H256,
                    to: ::subxt::sp_runtime::MultiAddress<
                        ::subxt::sp_core::crypto::AccountId32,
                        (),
                    >,
                    amount: ::core::primitive::u128,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        TransferFraction,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<TransferFraction>()?
                    };
                    if runtime_call_hash
                        == [
                            122u8, 58u8, 50u8, 220u8, 205u8, 38u8, 134u8, 161u8, 44u8, 127u8,
                            105u8, 56u8, 124u8, 200u8, 98u8, 153u8, 93u8, 92u8, 191u8, 241u8, 89u8,
                            29u8, 137u8, 48u8, 177u8, 109u8, 59u8, 167u8, 99u8, 197u8, 172u8, 44u8,
                        ]
                    {
                        let call = TransferFraction { item, to, amount };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
                #[doc = "Fractionalizes NFT."]
                #[doc = ""]
                #[doc = "Parameters"]
                #[doc = "- `item`: Unique id of the item to be fractionalized."]
                #[doc = "- `total_amount`: Amount of the fractions."]
                #[doc = "- `limited`: If set to true, further minting will be locked."]
                #[doc = ""]
                #[doc = "Emits:"]
                #[doc = "    [`Event::ItemFractionalized`] when successful."]
                pub fn fractionalize_item(
                    &self,
                    item: ::subxt::sp_core::H256,
                    total_amount: ::core::primitive::u128,
                    limited: ::core::primitive::bool,
                ) -> Result<
                    ::subxt::SubmittableExtrinsic<
                        'a,
                        T,
                        X,
                        FractionalizeItem,
                        DispatchError,
                        root_mod::Event,
                    >,
                    ::subxt::BasicError,
                > {
                    let runtime_call_hash = {
                        let locked_metadata = self.client.metadata();
                        let metadata = locked_metadata.read();
                        metadata.call_hash::<FractionalizeItem>()?
                    };
                    if runtime_call_hash
                        == [
                            29u8, 141u8, 41u8, 27u8, 88u8, 64u8, 241u8, 107u8, 230u8, 15u8, 126u8,
                            196u8, 207u8, 2u8, 197u8, 59u8, 241u8, 210u8, 100u8, 29u8, 175u8, 68u8,
                            70u8, 66u8, 143u8, 26u8, 139u8, 119u8, 80u8, 182u8, 193u8, 46u8,
                        ]
                    {
                        let call = FractionalizeItem {
                            item,
                            total_amount,
                            limited,
                        };
                        Ok(::subxt::SubmittableExtrinsic::new(self.client, call))
                    } else {
                        Err(::subxt::MetadataError::IncompatibleMetadata.into())
                    }
                }
            }
        }
        #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
        pub type Event = runtime_types::pallet_deip_f_nft::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct CollectionCreated {
                pub issuer: ::subxt::sp_core::crypto::AccountId32,
                pub collection: runtime_types::primitive_types::H160,
                pub max_items: ::core::primitive::u32,
            }
            impl ::subxt::Event for CollectionCreated {
                const PALLET: &'static str = "DeipFNFT";
                const EVENT: &'static str = "CollectionCreated";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ItemMinted {
                pub collection: runtime_types::primitive_types::H160,
                pub item: ::subxt::sp_core::H256,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for ItemMinted {
                const PALLET: &'static str = "DeipFNFT";
                const EVENT: &'static str = "ItemMinted";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ItemFractionalized {
                pub item: ::subxt::sp_core::H256,
                pub issuer: ::subxt::sp_core::crypto::AccountId32,
                pub total_amount: ::core::primitive::u128,
                pub limited: ::core::primitive::bool,
            }
            impl ::subxt::Event for ItemFractionalized {
                const PALLET: &'static str = "DeipFNFT";
                const EVENT: &'static str = "ItemFractionalized";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ItemTransferred {
                pub item: ::subxt::sp_core::H256,
                pub from: ::subxt::sp_core::crypto::AccountId32,
                pub to: ::subxt::sp_core::crypto::AccountId32,
            }
            impl ::subxt::Event for ItemTransferred {
                const PALLET: &'static str = "DeipFNFT";
                const EVENT: &'static str = "ItemTransferred";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct FractionMinted {
                pub item: ::subxt::sp_core::H256,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for FractionMinted {
                const PALLET: &'static str = "DeipFNFT";
                const EVENT: &'static str = "FractionMinted";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct FractionBurned {
                pub item: ::subxt::sp_core::H256,
                pub owner: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for FractionBurned {
                const PALLET: &'static str = "DeipFNFT";
                const EVENT: &'static str = "FractionBurned";
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct FractionTransferred {
                pub item: ::subxt::sp_core::H256,
                pub from: ::subxt::sp_core::crypto::AccountId32,
                pub to: ::subxt::sp_core::crypto::AccountId32,
                pub amount: ::core::primitive::u128,
            }
            impl ::subxt::Event for FractionTransferred {
                const PALLET: &'static str = "DeipFNFT";
                const EVENT: &'static str = "FractionTransferred";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub struct CollectionRepo<'a>(pub &'a runtime_types::primitive_types::H160);
            impl ::subxt::StorageEntry for CollectionRepo<'_> {
                const PALLET: &'static str = "DeipFNFT";
                const STORAGE: &'static str = "CollectionRepo";
                type Value = runtime_types::deip_asset_system::nft_impl::NFTokenCollectionRecord<
                    ::subxt::sp_core::crypto::AccountId32,
                    runtime_types::primitive_types::H160,
                    ::core::primitive::u32,
                    ::core::primitive::u32,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct ItemRepo<'a>(pub &'a ::subxt::sp_core::H256);
            impl ::subxt::StorageEntry for ItemRepo<'_> {
                const PALLET: &'static str = "DeipFNFT";
                const STORAGE: &'static str = "ItemRepo";
                type Value = runtime_types::deip_asset_system::nft_impl::NFTokenItemRecord<
                    ::subxt::sp_core::crypto::AccountId32,
                    ::subxt::sp_core::H256,
                    ::core::primitive::u32,
                    ::core::primitive::u32,
                    (::core::primitive::u32, ::core::primitive::u128),
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct FractionRepo<'a>(
                pub &'a ::subxt::sp_core::H256,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
            );
            impl ::subxt::StorageEntry for FractionRepo<'_> {
                const PALLET: &'static str = "DeipFNFT";
                const STORAGE: &'static str = "FractionRepo";
                type Value = runtime_types::deip_asset_system::nft_impl::NFTokenFractionRecord<
                    ::subxt::sp_core::crypto::AccountId32,
                    ::subxt::sp_core::H256,
                    (::core::primitive::u32, ::core::primitive::u128),
                    ::core::primitive::u128,
                    ::core::primitive::u32,
                >;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct FractionalRepo<'a>(pub &'a ::subxt::sp_core::H256);
            impl ::subxt::StorageEntry for FractionalRepo<'_> {
                const PALLET: &'static str = "DeipFNFT";
                const STORAGE: &'static str = "FractionalRepo";
                type Value = (::core::primitive::u32, ::core::primitive::u128);
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct FractionHolds<'a>(
                pub &'a ::subxt::sp_core::H256,
                pub &'a ::subxt::sp_core::crypto::AccountId32,
                pub &'a runtime_types::primitive_types::H160,
                pub &'a ::core::primitive::u32,
            );
            impl ::subxt::StorageEntry for FractionHolds<'_> {
                const PALLET: &'static str = "DeipFNFT";
                const STORAGE: &'static str = "FractionHolds";
                type Value = (runtime_types::primitive_types::H160, ::core::primitive::u32);
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![
                        ::subxt::StorageMapKey::new(
                            &self.0,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.1,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.2,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                        ::subxt::StorageMapKey::new(
                            &self.3,
                            ::subxt::StorageHasher::Blake2_128Concat,
                        ),
                    ])
                }
            }
            pub struct NextCollectionId;
            impl ::subxt::StorageEntry for NextCollectionId {
                const PALLET: &'static str = "DeipFNFT";
                const STORAGE: &'static str = "NextCollectionId";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct NextFTokenId;
            impl ::subxt::StorageEntry for NextFTokenId {
                const PALLET: &'static str = "DeipFNFT";
                const STORAGE: &'static str = "NextFTokenId";
                type Value = ::core::primitive::u32;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Plain
                }
            }
            pub struct FingerprintByFractionTokenId<'a>(pub &'a ::core::primitive::u32);
            impl ::subxt::StorageEntry for FingerprintByFractionTokenId<'_> {
                const PALLET: &'static str = "DeipFNFT";
                const STORAGE: &'static str = "FingerprintByFractionTokenId";
                type Value = ::subxt::sp_core::H256;
                fn key(&self) -> ::subxt::StorageEntryKey {
                    ::subxt::StorageEntryKey::Map(vec![::subxt::StorageMapKey::new(
                        &self.0,
                        ::subxt::StorageHasher::Blake2_128Concat,
                    )])
                }
            }
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
                #[doc = " Records of an  NFT collection by (account & fingerprint)."]
                pub fn collection_repo(
                    &self,
                    _0: &'a runtime_types::primitive_types::H160,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::deip_asset_system::nft_impl::NFTokenCollectionRecord<
                                ::subxt::sp_core::crypto::AccountId32,
                                runtime_types::primitive_types::H160,
                                ::core::primitive::u32,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<CollectionRepo>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                183u8, 194u8, 67u8, 254u8, 253u8, 250u8, 100u8, 137u8, 160u8,
                                182u8, 127u8, 242u8, 179u8, 61u8, 82u8, 125u8, 168u8, 161u8, 81u8,
                                73u8, 39u8, 1u8, 13u8, 243u8, 160u8, 168u8, 124u8, 75u8, 29u8,
                                92u8, 30u8, 220u8,
                            ]
                        {
                            let entry = CollectionRepo(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Records of an  NFT collection by (account & fingerprint)."]
                pub fn collection_repo_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, CollectionRepo<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<CollectionRepo>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                183u8, 194u8, 67u8, 254u8, 253u8, 250u8, 100u8, 137u8, 160u8,
                                182u8, 127u8, 242u8, 179u8, 61u8, 82u8, 125u8, 168u8, 161u8, 81u8,
                                73u8, 39u8, 1u8, 13u8, 243u8, 160u8, 168u8, 124u8, 75u8, 29u8,
                                92u8, 30u8, 220u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Records of an NFT by fingerprint, account and NFT id."]
                pub fn item_repo(
                    &self,
                    _0: &'a ::subxt::sp_core::H256,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::deip_asset_system::nft_impl::NFTokenItemRecord<
                                ::subxt::sp_core::crypto::AccountId32,
                                ::subxt::sp_core::H256,
                                ::core::primitive::u32,
                                ::core::primitive::u32,
                                (::core::primitive::u32, ::core::primitive::u128),
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ItemRepo>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                139u8, 187u8, 167u8, 101u8, 81u8, 3u8, 182u8, 137u8, 134u8, 107u8,
                                9u8, 120u8, 252u8, 219u8, 68u8, 114u8, 141u8, 246u8, 228u8, 60u8,
                                192u8, 238u8, 243u8, 5u8, 22u8, 250u8, 33u8, 105u8, 37u8, 127u8,
                                182u8, 5u8,
                            ]
                        {
                            let entry = ItemRepo(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Records of an NFT by fingerprint, account and NFT id."]
                pub fn item_repo_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, ItemRepo<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<ItemRepo>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                139u8, 187u8, 167u8, 101u8, 81u8, 3u8, 182u8, 137u8, 134u8, 107u8,
                                9u8, 120u8, 252u8, 219u8, 68u8, 114u8, 141u8, 246u8, 228u8, 60u8,
                                192u8, 238u8, 243u8, 5u8, 22u8, 250u8, 33u8, 105u8, 37u8, 127u8,
                                182u8, 5u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Records of a NFT fractions by fingerpring, account and NFT id."]
                pub fn fraction_repo(
                    &self,
                    _0: &'a ::subxt::sp_core::H256,
                    _1: &'a ::subxt::sp_core::crypto::AccountId32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<
                            runtime_types::deip_asset_system::nft_impl::NFTokenFractionRecord<
                                ::subxt::sp_core::crypto::AccountId32,
                                ::subxt::sp_core::H256,
                                (::core::primitive::u32, ::core::primitive::u128),
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<FractionRepo>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                140u8, 135u8, 7u8, 77u8, 86u8, 40u8, 29u8, 85u8, 104u8, 150u8,
                                62u8, 90u8, 251u8, 116u8, 9u8, 221u8, 21u8, 209u8, 32u8, 31u8,
                                18u8, 15u8, 105u8, 166u8, 124u8, 0u8, 8u8, 25u8, 5u8, 158u8, 230u8,
                                196u8,
                            ]
                        {
                            let entry = FractionRepo(_0, _1);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Records of a NFT fractions by fingerpring, account and NFT id."]
                pub fn fraction_repo_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, FractionRepo<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<FractionRepo>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                140u8, 135u8, 7u8, 77u8, 86u8, 40u8, 29u8, 85u8, 104u8, 150u8,
                                62u8, 90u8, 251u8, 116u8, 9u8, 221u8, 21u8, 209u8, 32u8, 31u8,
                                18u8, 15u8, 105u8, 166u8, 124u8, 0u8, 8u8, 25u8, 5u8, 158u8, 230u8,
                                196u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Records of fraction asset id and balance by item fingerprint."]
                pub fn fractional_repo(
                    &self,
                    _0: &'a ::subxt::sp_core::H256,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u128)>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<FractionalRepo>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                228u8, 11u8, 146u8, 9u8, 2u8, 241u8, 24u8, 149u8, 54u8, 125u8,
                                13u8, 113u8, 50u8, 211u8, 120u8, 164u8, 127u8, 242u8, 189u8, 152u8,
                                223u8, 162u8, 166u8, 125u8, 213u8, 114u8, 174u8, 15u8, 171u8,
                                184u8, 49u8, 91u8,
                            ]
                        {
                            let entry = FractionalRepo(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Records of fraction asset id and balance by item fingerprint."]
                pub fn fractional_repo_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, FractionalRepo<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<FractionalRepo>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                228u8, 11u8, 146u8, 9u8, 2u8, 241u8, 24u8, 149u8, 54u8, 125u8,
                                13u8, 113u8, 50u8, 211u8, 120u8, 164u8, 127u8, 242u8, 189u8, 152u8,
                                223u8, 162u8, 166u8, 125u8, 213u8, 114u8, 174u8, 15u8, 171u8,
                                184u8, 49u8, 91u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " @TODO Documentation"]
                pub fn fraction_holds(
                    &self,
                    _0: &'a ::subxt::sp_core::H256,
                    _1: &'a ::subxt::sp_core::crypto::AccountId32,
                    _2: &'a runtime_types::primitive_types::H160,
                    _3: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<(
                            runtime_types::primitive_types::H160,
                            ::core::primitive::u32,
                        )>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<FractionHolds>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                8u8, 248u8, 214u8, 41u8, 176u8, 168u8, 129u8, 171u8, 22u8, 123u8,
                                78u8, 87u8, 136u8, 88u8, 104u8, 179u8, 135u8, 219u8, 128u8, 159u8,
                                70u8, 202u8, 92u8, 163u8, 248u8, 22u8, 168u8, 237u8, 69u8, 213u8,
                                205u8, 89u8,
                            ]
                        {
                            let entry = FractionHolds(_0, _1, _2, _3);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " @TODO Documentation"]
                pub fn fraction_holds_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, FractionHolds<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<FractionHolds>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                8u8, 248u8, 214u8, 41u8, 176u8, 168u8, 129u8, 171u8, 22u8, 123u8,
                                78u8, 87u8, 136u8, 88u8, 104u8, 179u8, 135u8, 219u8, 128u8, 159u8,
                                70u8, 202u8, 92u8, 163u8, 248u8, 22u8, 168u8, 237u8, 69u8, 213u8,
                                205u8, 89u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Id of the next collection to be created."]
                pub fn next_collection_id(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextCollectionId>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                115u8, 105u8, 45u8, 229u8, 88u8, 104u8, 57u8, 99u8, 228u8, 134u8,
                                188u8, 143u8, 58u8, 165u8, 147u8, 189u8, 246u8, 239u8, 193u8,
                                181u8, 102u8, 24u8, 179u8, 63u8, 209u8, 217u8, 170u8, 178u8, 94u8,
                                169u8, 239u8, 195u8,
                            ]
                        {
                            let entry = NextCollectionId;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Id of the next fraction to be created."]
                pub fn next_f_token_id(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<::core::primitive::u32, ::subxt::BasicError>,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<NextFTokenId>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                226u8, 101u8, 53u8, 159u8, 155u8, 249u8, 174u8, 0u8, 53u8, 91u8,
                                127u8, 64u8, 254u8, 129u8, 227u8, 50u8, 169u8, 169u8, 99u8, 214u8,
                                41u8, 244u8, 103u8, 118u8, 34u8, 64u8, 50u8, 193u8, 139u8, 175u8,
                                86u8, 147u8,
                            ]
                        {
                            let entry = NextFTokenId;
                            client.storage().fetch_or_default(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Storage with fraction FT id - item fingerprint mapping."]
                pub fn fingerprint_by_fraction_token_id(
                    &self,
                    _0: &'a ::core::primitive::u32,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::core::option::Option<::subxt::sp_core::H256>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<FingerprintByFractionTokenId>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                7u8, 13u8, 72u8, 217u8, 138u8, 167u8, 37u8, 27u8, 238u8, 104u8,
                                30u8, 100u8, 243u8, 2u8, 139u8, 67u8, 98u8, 255u8, 108u8, 249u8,
                                57u8, 149u8, 202u8, 19u8, 61u8, 178u8, 71u8, 36u8, 14u8, 191u8,
                                188u8, 37u8,
                            ]
                        {
                            let entry = FingerprintByFractionTokenId(_0);
                            client.storage().fetch(&entry, block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
                #[doc = " Storage with fraction FT id - item fingerprint mapping."]
                pub fn fingerprint_by_fraction_token_id_iter(
                    &self,
                    block_hash: ::core::option::Option<T::Hash>,
                ) -> impl ::core::future::Future<
                    Output = ::core::result::Result<
                        ::subxt::KeyIter<'a, T, FingerprintByFractionTokenId<'a>>,
                        ::subxt::BasicError,
                    >,
                > + 'a {
                    let client = self.client;
                    async move {
                        let runtime_storage_hash = {
                            let locked_metadata = client.metadata();
                            let metadata = locked_metadata.read();
                            match metadata.storage_hash::<FingerprintByFractionTokenId>() {
                                Ok(hash) => hash,
                                Err(e) => return Err(e.into()),
                            }
                        };
                        if runtime_storage_hash
                            == [
                                7u8, 13u8, 72u8, 217u8, 138u8, 167u8, 37u8, 27u8, 238u8, 104u8,
                                30u8, 100u8, 243u8, 2u8, 139u8, 67u8, 98u8, 255u8, 108u8, 249u8,
                                57u8, 149u8, 202u8, 19u8, 61u8, 178u8, 71u8, 36u8, 14u8, 191u8,
                                188u8, 37u8,
                            ]
                        {
                            client.storage().iter(block_hash).await
                        } else {
                            Err(::subxt::MetadataError::IncompatibleMetadata.into())
                        }
                    }
                }
            }
        }
    }
    pub mod deip_assets {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
            }
        }
    }
    pub mod deip_uniques {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub struct StorageApi<'a, T: ::subxt::Config> {
                client: &'a ::subxt::Client<T>,
            }
            impl<'a, T: ::subxt::Config> StorageApi<'a, T> {
                pub fn new(client: &'a ::subxt::Client<T>) -> Self {
                    Self { client }
                }
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod appchain_deip_runtime {
            use super::runtime_types;
            pub mod deip_account {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum DeipAccountId<_0, _1> {
                    #[codec(index = 0)]
                    Native(_0),
                    #[codec(index = 1)]
                    Dao(_1),
                }
            }
            pub mod opaque {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct SessionKeys {
                    pub babe: runtime_types::sp_consensus_babe::app::Public,
                    pub grandpa: runtime_types::sp_finality_grandpa::app::Public,
                    pub im_online: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                    pub beefy: runtime_types::beefy_primitives::crypto::Public,
                    pub octopus: runtime_types::pallet_octopus_appchain::crypto::Public,
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Call {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 1)]
                Babe(runtime_types::pallet_babe::pallet::Call),
                #[codec(index = 2)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 3)]
                Authorship(runtime_types::pallet_authorship::pallet::Call),
                #[codec(index = 4)]
                Balances(runtime_types::pallet_balances::pallet::Call),
                #[codec(index = 7)]
                OctopusAppchain(runtime_types::pallet_octopus_appchain::pallet::Call),
                #[codec(index = 8)]
                OctopusLpos(runtime_types::pallet_octopus_lpos::pallet::Call),
                #[codec(index = 9)]
                OctopusUpwardMessages(runtime_types::pallet_octopus_upward_messages::pallet::Call),
                #[codec(index = 10)]
                Session(runtime_types::pallet_session::pallet::Call),
                #[codec(index = 11)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Call),
                #[codec(index = 12)]
                Sudo(runtime_types::pallet_sudo::pallet::Call),
                #[codec(index = 13)]
                ImOnline(runtime_types::pallet_im_online::pallet::Call),
                #[codec(index = 21)]
                Multisig(runtime_types::pallet_multisig::pallet::Call),
                #[codec(index = 22)]
                Utility(runtime_types::pallet_utility::pallet::Call),
                #[codec(index = 23)]
                Deip(runtime_types::pallet_deip::Call),
                #[codec(index = 24)]
                DeipProposal(runtime_types::pallet_deip_proposal::pallet::Call),
                #[codec(index = 25)]
                DeipDao(runtime_types::pallet_deip_dao::pallet::Call),
                #[codec(index = 26)]
                DeipPortal(runtime_types::pallet_deip_portal::pallet::Call),
                #[codec(index = 27)]
                DeipVesting(runtime_types::pallet_deip_vesting::pallet::Call),
                #[codec(index = 29)]
                DeipInvestmentOpportunity(
                    runtime_types::pallet_deip_investment_opportunity::pallet::Call,
                ),
                #[codec(index = 30)]
                DeipFNFT(runtime_types::pallet_deip_f_nft::pallet::Call),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Event {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 4)]
                Balances(runtime_types::pallet_balances::pallet::Event),
                #[codec(index = 7)]
                OctopusAppchain(runtime_types::pallet_octopus_appchain::pallet::Event),
                #[codec(index = 8)]
                OctopusLpos(runtime_types::pallet_octopus_lpos::pallet::Event),
                #[codec(index = 9)]
                OctopusUpwardMessages(runtime_types::pallet_octopus_upward_messages::pallet::Event),
                #[codec(index = 10)]
                Session(runtime_types::pallet_session::pallet::Event),
                #[codec(index = 11)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Event),
                #[codec(index = 12)]
                Sudo(runtime_types::pallet_sudo::pallet::Event),
                #[codec(index = 13)]
                ImOnline(runtime_types::pallet_im_online::pallet::Event),
                #[codec(index = 16)]
                Assets(runtime_types::pallet_assets::pallet::Event),
                #[codec(index = 17)]
                Uniques(runtime_types::pallet_uniques::pallet::Event),
                #[codec(index = 21)]
                Multisig(runtime_types::pallet_multisig::pallet::Event),
                #[codec(index = 22)]
                Utility(runtime_types::pallet_utility::pallet::Event),
                #[codec(index = 23)]
                Deip(
                    runtime_types::pallet_deip::RawEvent<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::pallet_deip::Project<
                            ::subxt::sp_core::H256,
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                        runtime_types::pallet_deip::review::Review<
                            ::subxt::sp_core::H256,
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                    >,
                ),
                #[codec(index = 24)]
                DeipProposal(runtime_types::pallet_deip_proposal::pallet::Event),
                #[codec(index = 25)]
                DeipDao(runtime_types::pallet_deip_dao::pallet::Event),
                #[codec(index = 27)]
                DeipVesting(runtime_types::pallet_deip_vesting::pallet::Event),
                #[codec(index = 29)]
                DeipInvestmentOpportunity(
                    runtime_types::pallet_deip_investment_opportunity::pallet::Event,
                ),
                #[codec(index = 30)]
                DeipFNFT(runtime_types::pallet_deip_f_nft::pallet::Event),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_system::RawOrigin<::subxt::sp_core::crypto::AccountId32>,
                ),
                #[codec(index = 1)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Runtime;
        }
        pub mod beefy_primitives {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Public(pub runtime_types::sp_core::ecdsa::Public);
            }
            pub mod mmr {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct BeefyNextAuthoritySet<_0> {
                    pub id: ::core::primitive::u64,
                    pub len: ::core::primitive::u32,
                    pub root: _0,
                }
            }
        }
        pub mod deip_asset_system {
            use super::runtime_types;
            pub mod asset {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Asset<_0, _1> {
                    pub id: _0,
                    pub amount:
                        runtime_types::deip_serializable_u128::SerializableAtLeast32BitUnsigned<_1>,
                }
            }
            pub mod nft_impl {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct NFTokenCollectionRecord<_0, _1, _2, _3> {
                    pub account: _0,
                    pub collection_id: _1,
                    pub internal_id: _2,
                    pub max_items: _2,
                    pub items: _2,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct NFTokenFractionRecord<_0, _1, _2, _3, _4> {
                    pub account: _0,
                    pub fingerprint: _1,
                    pub fractional: _2,
                    pub amount: _3,
                    pub holds: _4,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct NFTokenItemRecord<_0, _1, _2, _3, _4> {
                    pub account: _0,
                    pub fingerprint: _1,
                    pub item_id: _2,
                    pub collection_id: _2,
                    pub fractional: ::core::option::Option<_4>,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_3>,
                }
            }
        }
        pub mod deip_serializable_u128 {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct SerializableAtLeast32BitUnsigned<_0>(pub _0);
        }
        pub mod deip_transaction_ctx {
            use super::runtime_types;
            pub mod transaction_ctx {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct TransactionCtx<_0>(::core::marker::PhantomData<_0>);
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct TransactionCtxId<_0> {
                    pub block_number: ::core::primitive::u32,
                    pub extrinsic_id: ::core::primitive::u32,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_0>,
                }
            }
        }
        pub mod finality_grandpa {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Equivocation<_0, _1, _2> {
                pub round_number: ::core::primitive::u64,
                pub identity: _0,
                pub first: (_1, _2),
                pub second: (_1, _2),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Precommit<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Prevote<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod storage {
                use super::runtime_types;
                pub mod bounded_vec {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct BoundedVec<_0>(pub ::std::vec::Vec<_0>);
                }
                pub mod weak_bounded_vec {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct WeakBoundedVec<_0>(pub ::std::vec::Vec<_0>);
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod misc {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct WrapperKeepOpaque<_0>(
                        #[codec(compact)] pub ::core::primitive::u32,
                        pub _0,
                    );
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct WrapperOpaque<_0>(
                        #[codec(compact)] pub ::core::primitive::u32,
                        pub _0,
                    );
                }
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                        )]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
            pub mod weights {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct DispatchInfo {
                    pub weight: ::core::primitive::u64,
                    pub class: runtime_types::frame_support::weights::DispatchClass,
                    pub pays_fee: runtime_types::frame_support::weights::Pays,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct RuntimeDbWeight {
                    pub read: ::core::primitive::u64,
                    pub write: ::core::primitive::u64,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct WeightToFeeCoefficient<_0> {
                    pub coeff_integer: _0,
                    pub coeff_frac: runtime_types::sp_arithmetic::per_things::Perbill,
                    pub negative: ::core::primitive::bool,
                    pub degree: ::core::primitive::u8,
                }
            }
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::weights::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct BlockWeights {
                    pub base_block: ::core::primitive::u64,
                    pub max_block: ::core::primitive::u64,
                    pub per_class: runtime_types::frame_support::weights::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct WeightsPerClass {
                    pub base_extrinsic: ::core::primitive::u64,
                    pub max_extrinsic: ::core::option::Option<::core::primitive::u64>,
                    pub max_total: ::core::option::Option<::core::primitive::u64>,
                    pub reserved: ::core::option::Option<::core::primitive::u64>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "A dispatch that will fill the block weight up to the given ratio."]
                    fill_block {
                        ratio: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 1)]
                    #[doc = "Make some on-chain remark."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)`"]
                    #[doc = "# </weight>"]
                    remark {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 3)]
                    #[doc = "Set the new runtime code."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(C + S)` where `C` length of `code` and `S` complexity of `can_set_code`"]
                    #[doc = "- 1 call to `can_set_code`: `O(S)` (calls `sp_io::misc::runtime_version` which is"]
                    #[doc = "  expensive)."]
                    #[doc = "- 1 storage write (codec `O(C)`)."]
                    #[doc = "- 1 digest item."]
                    #[doc = "- 1 event."]
                    #[doc = "The weight of this function is dependent on the runtime, but generally this is very"]
                    #[doc = "expensive. We will treat this as a full block."]
                    #[doc = "# </weight>"]
                    set_code {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(C)` where `C` length of `code`"]
                    #[doc = "- 1 storage write (codec `O(C)`)."]
                    #[doc = "- 1 digest item."]
                    #[doc = "- 1 event."]
                    #[doc = "The weight of this function is dependent on the runtime. We will treat this as a full"]
                    #[doc = "block. # </weight>"]
                    set_code_without_checks {
                        code: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set some items of storage."]
                    set_storage {
                        items: ::std::vec::Vec<(
                            ::std::vec::Vec<::core::primitive::u8>,
                            ::std::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Kill some items from storage."]
                    kill_storage {
                        keys: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                    },
                    #[codec(index = 7)]
                    #[doc = "Kill all storage items with a key that starts with the given prefix."]
                    #[doc = ""]
                    #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                    #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                    kill_prefix {
                        prefix: ::std::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Make some on-chain remark and emit event."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(b)` where b is the length of the remark."]
                    #[doc = "- 1 event."]
                    #[doc = "# </weight>"]
                    remark_with_event {
                        remark: ::std::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Error for the System pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The name of specification does not match between the current runtime"]
                    #[doc = "and the new runtime."]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    #[doc = "The specification version is not allowed to decrease between the current runtime"]
                    #[doc = "and the new runtime."]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    #[doc = "Failed to extract the runtime version from the new runtime."]
                    #[doc = ""]
                    #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    #[doc = "Suicide called when the account has non-default composite data."]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    #[doc = "There is a non-zero reference count preventing the account from being purged."]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    #[doc = "The origin filter prevent the call to be dispatched."]
                    CallFiltered,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Event for the System pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An extrinsic completed successfully. \\[info\\]"]
                    ExtrinsicSuccess(runtime_types::frame_support::weights::DispatchInfo),
                    #[codec(index = 1)]
                    #[doc = "An extrinsic failed. \\[error, info\\]"]
                    ExtrinsicFailed(
                        runtime_types::sp_runtime::DispatchError,
                        runtime_types::frame_support::weights::DispatchInfo,
                    ),
                    #[codec(index = 2)]
                    #[doc = "`:code` was updated."]
                    CodeUpdated,
                    #[codec(index = 3)]
                    #[doc = "A new \\[account\\] was created."]
                    NewAccount(::subxt::sp_core::crypto::AccountId32),
                    #[codec(index = 4)]
                    #[doc = "An \\[account\\] was reaped."]
                    KilledAccount(::subxt::sp_core::crypto::AccountId32),
                    #[codec(index = 5)]
                    #[doc = "On on-chain remark happened. \\[origin, remark_hash\\]"]
                    Remarked(
                        ::subxt::sp_core::crypto::AccountId32,
                        ::subxt::sp_core::H256,
                    ),
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: _0,
                pub providers: _0,
                pub sufficients: _0,
                pub data: _1,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::std::vec::Vec<_1>,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::std::string::String,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Root,
                #[codec(index = 1)]
                Signed(_0),
                #[codec(index = 2)]
                None,
            }
        }
        pub mod pallet_assets {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account balance must be greater than or equal to the transfer amount."]
                    BalanceLow,
                    #[codec(index = 1)]
                    #[doc = "Balance should be non-zero."]
                    BalanceZero,
                    #[codec(index = 2)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 3)]
                    #[doc = "The given asset ID is unknown."]
                    Unknown,
                    #[codec(index = 4)]
                    #[doc = "The origin account is frozen."]
                    Frozen,
                    #[codec(index = 5)]
                    #[doc = "The asset ID is already taken."]
                    InUse,
                    #[codec(index = 6)]
                    #[doc = "Invalid witness data given."]
                    BadWitness,
                    #[codec(index = 7)]
                    #[doc = "Minimum balance should be non-zero."]
                    MinBalanceZero,
                    #[codec(index = 8)]
                    #[doc = "No provider reference exists to allow a non-zero balance of a non-self-sufficient"]
                    #[doc = "asset."]
                    NoProvider,
                    #[codec(index = 9)]
                    #[doc = "Invalid metadata given."]
                    BadMetadata,
                    #[codec(index = 10)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                    #[codec(index = 11)]
                    #[doc = "The source account would not survive the transfer and it needs to stay alive."]
                    WouldDie,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Some asset class was created."]
                    Created {
                        asset_id: ::core::primitive::u32,
                        creator: ::subxt::sp_core::crypto::AccountId32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Some assets were issued."]
                    Issued {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                        total_supply: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some assets were transferred."]
                    Transferred {
                        asset_id: ::core::primitive::u32,
                        from: ::subxt::sp_core::crypto::AccountId32,
                        to: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Some assets were destroyed."]
                    Burned {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                        balance: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        asset_id: ::core::primitive::u32,
                        issuer: ::subxt::sp_core::crypto::AccountId32,
                        admin: ::subxt::sp_core::crypto::AccountId32,
                        freezer: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some account `who` was frozen."]
                    Frozen {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some account `who` was thawed."]
                    Thawed {
                        asset_id: ::core::primitive::u32,
                        who: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some asset `asset_id` was frozen."]
                    AssetFrozen { asset_id: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "Some asset `asset_id` was thawed."]
                    AssetThawed { asset_id: ::core::primitive::u32 },
                    #[codec(index = 10)]
                    #[doc = "An asset class was destroyed."]
                    Destroyed { asset_id: ::core::primitive::u32 },
                    #[codec(index = 11)]
                    #[doc = "Some asset class was force-created."]
                    ForceCreated {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 12)]
                    #[doc = "New metadata has been set for an asset."]
                    MetadataSet {
                        asset_id: ::core::primitive::u32,
                        name: ::std::vec::Vec<::core::primitive::u8>,
                        symbol: ::std::vec::Vec<::core::primitive::u8>,
                        decimals: ::core::primitive::u8,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 13)]
                    #[doc = "Metadata has been cleared for an asset."]
                    MetadataCleared { asset_id: ::core::primitive::u32 },
                    #[codec(index = 14)]
                    #[doc = "(Additional) funds have been approved for transfer to a destination account."]
                    ApprovedTransfer {
                        asset_id: ::core::primitive::u32,
                        source: ::subxt::sp_core::crypto::AccountId32,
                        delegate: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 15)]
                    #[doc = "An approval for account `delegate` was cancelled by `owner`."]
                    ApprovalCancelled {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                        delegate: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 16)]
                    #[doc = "An `amount` was transferred in its entirety from `owner` to `destination` by"]
                    #[doc = "the approved `delegate`."]
                    TransferredApproved {
                        asset_id: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                        delegate: ::subxt::sp_core::crypto::AccountId32,
                        destination: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 17)]
                    #[doc = "An asset has had its attributes changed by the `Force` origin."]
                    AssetStatusChanged { asset_id: ::core::primitive::u32 },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Approval<_0, _1> {
                    pub amount: _0,
                    pub deposit: _0,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct AssetBalance<_0, _1> {
                    pub balance: _0,
                    pub is_frozen: ::core::primitive::bool,
                    pub sufficient: ::core::primitive::bool,
                    pub extra: _1,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct AssetDetails<_0, _1, _2> {
                    pub owner: _1,
                    pub issuer: _1,
                    pub admin: _1,
                    pub freezer: _1,
                    pub supply: _0,
                    pub deposit: _0,
                    pub min_balance: _0,
                    pub is_sufficient: ::core::primitive::bool,
                    pub accounts: ::core::primitive::u32,
                    pub sufficients: ::core::primitive::u32,
                    pub approvals: ::core::primitive::u32,
                    pub is_frozen: ::core::primitive::bool,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_2>,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct AssetMetadata<_0, _1> {
                    pub deposit: _0,
                    pub name: _1,
                    pub symbol: _1,
                    pub decimals: ::core::primitive::u8,
                    pub is_frozen: ::core::primitive::bool,
                }
            }
        }
        pub mod pallet_authorship {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Provide a set of uncles."]
                    set_uncles {
                        new_uncles: ::std::vec::Vec<
                            runtime_types::sp_runtime::generic::header::Header<
                                ::core::primitive::u32,
                                runtime_types::sp_runtime::traits::BlakeTwo256,
                            >,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The uncle parent not in the chain."]
                    InvalidUncleParent,
                    #[codec(index = 1)]
                    #[doc = "Uncles already set in the block."]
                    UnclesAlreadySet,
                    #[codec(index = 2)]
                    #[doc = "Too many uncles."]
                    TooManyUncles,
                    #[codec(index = 3)]
                    #[doc = "The uncle is genesis."]
                    GenesisUncle,
                    #[codec(index = 4)]
                    #[doc = "The uncle is too high in chain."]
                    TooHighUncle,
                    #[codec(index = 5)]
                    #[doc = "The uncle is already included."]
                    UncleAlreadyIncluded,
                    #[codec(index = 6)]
                    #[doc = "The uncle isn't recent enough to be included."]
                    OldUncle,
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum UncleEntryItem<_0, _1, _2> {
                #[codec(index = 0)]
                InclusionHeight(_0),
                #[codec(index = 1)]
                Uncle(_1, ::core::option::Option<_2>),
            }
        }
        pub mod pallet_babe {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Report authority equivocation/misbehavior. This method will verify"]
                    #[doc = "the equivocation proof and validate the given key ownership proof"]
                    #[doc = "against the extracted offender. If both are valid, the offence will"]
                    #[doc = "be reported."]
                    report_equivocation {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_slots::EquivocationProof<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                    runtime_types::sp_runtime::traits::BlakeTwo256,
                                >,
                                runtime_types::sp_consensus_babe::app::Public,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 1)]
                    #[doc = "Report authority equivocation/misbehavior. This method will verify"]
                    #[doc = "the equivocation proof and validate the given key ownership proof"]
                    #[doc = "against the extracted offender. If both are valid, the offence will"]
                    #[doc = "be reported."]
                    #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                    #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                    #[doc = "if the block author is defined it will be defined as the equivocation"]
                    #[doc = "reporter."]
                    report_equivocation_unsigned {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_consensus_slots::EquivocationProof<
                                runtime_types::sp_runtime::generic::header::Header<
                                    ::core::primitive::u32,
                                    runtime_types::sp_runtime::traits::BlakeTwo256,
                                >,
                                runtime_types::sp_consensus_babe::app::Public,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 2)]
                    #[doc = "Plan an epoch config change. The epoch config change is recorded and will be enacted on"]
                    #[doc = "the next call to `enact_epoch_change`. The config will be activated one epoch after."]
                    #[doc = "Multiple calls to this method will replace any existing planned config change that had"]
                    #[doc = "not been enacted yet."]
                    plan_config_change {
                        config: runtime_types::sp_consensus_babe::digests::NextConfigDescriptor,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
                    InvalidEquivocationProof,
                    #[codec(index = 1)]
                    #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
                    InvalidKeyOwnershipProof,
                    #[codec(index = 2)]
                    #[doc = "A given equivocation report is valid but already previously reported."]
                    DuplicateOffenceReport,
                }
            }
        }
        pub mod pallet_balances {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some liquid free balance to another account."]
                    #[doc = ""]
                    #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                    #[doc = "It will decrease the total issuance of the system by the `TransferFee`."]
                    #[doc = "If the sender's account is below the existential deposit as a result"]
                    #[doc = "of the transfer, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the transactor."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Dependent on arguments but not critical, given proper implementations for input config"]
                    #[doc = "  types. See related functions below."]
                    #[doc = "- It contains a limited number of reads and writes internally and no complex"]
                    #[doc = "  computation."]
                    #[doc = ""]
                    #[doc = "Related functions:"]
                    #[doc = ""]
                    #[doc = "  - `ensure_can_withdraw` is always called internally but has a bounded complexity."]
                    #[doc = "  - Transferring balances to accounts that did not exist before will cause"]
                    #[doc = "    `T::OnNewAccount::on_new_account` to be called."]
                    #[doc = "  - Removing enough funds from an account will trigger `T::DustRemoval::on_unbalanced`."]
                    #[doc = "  - `transfer_keep_alive` works the same way as `transfer`, but has an additional check"]
                    #[doc = "    that the transfer will not kill the origin account."]
                    #[doc = "---------------------------------"]
                    #[doc = "- Origin account is already in memory, so no DB operations for them."]
                    #[doc = "# </weight>"]
                    transfer {
                        dest: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set the balances of a given account."]
                    #[doc = ""]
                    #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it will"]
                    #[doc = "also decrease the total issuance of the system (`TotalIssuance`)."]
                    #[doc = "If the new free or reserved balance is below the existential deposit,"]
                    #[doc = "it will reset the account nonce (`frame_system::AccountNonce`)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    #[doc = "Exactly as `transfer`, except the origin must be root and the source account may be"]
                    #[doc = "specified."]
                    #[doc = "# <weight>"]
                    #[doc = "- Same as transfer, but additional read and write because the source account is not"]
                    #[doc = "  assumed to be in the overlay."]
                    #[doc = "# </weight>"]
                    #[doc = "Same as the [`transfer`] call, but with a check that the transfer will not kill the"]
                    #[doc = "origin account."]
                    #[doc = ""]
                    #[doc = "99% of the time you want [`transfer`] instead."]
                    #[doc = ""]
                    #[doc = "[`transfer`]: struct.Pallet.html#method.transfer"]
                    transfer_keep_alive {
                        dest: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer the entire transferable balance from the caller account."]
                    #[doc = ""]
                    #[doc = "NOTE: This function only attempts to transfer _transferable_ balances. This means that"]
                    #[doc = "any locked, reserved, or existential deposits (when `keep_alive` is `true`), will not be"]
                    #[doc = "transferred by this function. To ensure that this function results in a killed account,"]
                    #[doc = "you might need to prepare the account by removing any reference counters, storage"]
                    #[doc = "deposits, etc..."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this call must be Signed."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all` operation should send all"]
                    #[doc = "  of the funds the account has, causing the sender account to be killed (false), or"]
                    #[doc = "  transfer everything except at least the existential deposit, which will guarantee to"]
                    #[doc = "  keep the sender account alive (true). # <weight>"]
                    #[doc = "- O(1). Just like transfer, but reading the user's transferable balance first."]
                    #[doc = "  #</weight>"]
                    transfer_all {
                        dest: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                        keep_alive: ::core::primitive::bool,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Vesting balance too high to send value"]
                    VestingBalance,
                    #[codec(index = 1)]
                    #[doc = "Account liquidity restrictions prevent withdrawal"]
                    LiquidityRestrictions,
                    #[codec(index = 2)]
                    #[doc = "Balance too low to send value"]
                    InsufficientBalance,
                    #[codec(index = 3)]
                    #[doc = "Value too low to create account due to existential deposit"]
                    ExistentialDeposit,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account"]
                    KeepAlive,
                    #[codec(index = 5)]
                    #[doc = "A vesting schedule already exists for this account"]
                    ExistingVestingSchedule,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist"]
                    DeadAccount,
                    #[codec(index = 7)]
                    #[doc = "Number of named reserves exceed MaxReserves"]
                    TooManyReserves,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account was created with some free balance."]
                    Endowed {
                        account: ::subxt::sp_core::crypto::AccountId32,
                        free_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An account was removed whose balance was non-zero but below ExistentialDeposit,"]
                    #[doc = "resulting in an outright loss."]
                    DustLost {
                        account: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer succeeded."]
                    Transfer {
                        from: ::subxt::sp_core::crypto::AccountId32,
                        to: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A balance was set by root."]
                    BalanceSet {
                        who: ::subxt::sp_core::crypto::AccountId32,
                        free: ::core::primitive::u128,
                        reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some balance was reserved (moved from free to reserved)."]
                    Reserved {
                        who: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Some balance was unreserved (moved from reserved to free)."]
                    Unreserved {
                        who: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some balance was moved from the reserve of the first account to the second account."]
                    #[doc = "Final argument indicates the destination balance type."]
                    ReserveRepatriated {
                        from: ::subxt::sp_core::crypto::AccountId32,
                        to: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                        destination_status:
                            runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some amount was deposited (e.g. for transaction fees)."]
                    Deposit {
                        who: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some amount was withdrawn from the account (e.g. for transaction fees)."]
                    Withdraw {
                        who: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some amount was removed from the account (e.g. for misbehavior)."]
                    Slashed {
                        who: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct AccountData<_0> {
                pub free: _0,
                pub reserved: _0,
                pub misc_frozen: _0,
                pub fee_frozen: _0,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct BalanceLock<_0> {
                pub id: [::core::primitive::u8; 8usize],
                pub amount: _0,
                pub reasons: runtime_types::pallet_balances::Reasons,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Reasons {
                #[codec(index = 0)]
                Fee,
                #[codec(index = 1)]
                Misc,
                #[codec(index = 2)]
                All,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Releases {
                #[codec(index = 0)]
                V1_0_0,
                #[codec(index = 1)]
                V2_0_0,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ReserveData<_0, _1> {
                pub id: _0,
                pub amount: _1,
            }
        }
        pub mod pallet_deip {
            use super::runtime_types;
            pub mod contract {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum Agreement<_0, _1, _2> {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    GenericContract(
                        runtime_types::pallet_deip::contract::GenericContractStatus<_0, _1, _2>,
                    ),
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct GenericContract<_0, _1, _2> {
                    pub id: runtime_types::primitive_types::H160,
                    pub creator: _0,
                    pub parties: ::std::vec::Vec<_0>,
                    pub hash: _1,
                    pub activation_time: ::core::option::Option<_2>,
                    pub expiration_time: ::core::option::Option<_2>,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum GenericContractStatus<_0, _1, _2> {
                    #[codec(index = 0)]
                    PartiallyAccepted {
                        contract: runtime_types::pallet_deip::contract::GenericContract<_0, _1, _2>,
                        accepted_by: ::std::vec::Vec<_0>,
                    },
                    #[codec(index = 1)]
                    Accepted(runtime_types::pallet_deip::contract::GenericContract<_0, _1, _2>),
                    #[codec(index = 2)]
                    Rejected(runtime_types::pallet_deip::contract::GenericContract<_0, _1, _2>),
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum IndexTerms {
                    #[codec(index = 0)]
                    GenericContractAgreement,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum Terms {
                    #[codec(index = 0)]
                    GenericContractAgreement,
                }
            }
            pub mod review {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Review<_0, _1> {
                    pub external_id: runtime_types::primitive_types::H160,
                    pub author: _1,
                    pub content: _0,
                    pub domains: ::std::vec::Vec<runtime_types::primitive_types::H160>,
                    pub assessment_model: ::core::primitive::u32,
                    pub weight: ::std::vec::Vec<::core::primitive::u8>,
                    pub project_content_external_id: runtime_types::primitive_types::H160,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Vote<_0, _1> {
                    pub dao: _0,
                    pub review_id: runtime_types::primitive_types::H160,
                    pub domain_id: runtime_types::primitive_types::H160,
                    pub voting_time: _1,
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Dispatchable calls."]
            #[doc = ""]
            #[doc = "Each variant of this enum maps to a dispatchable function from the associated module."]
            pub enum Call {
                #[codec(index = 0)]
                #[doc = "Allow a user to create project."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `project`: [Project](./struct.Project.html) to be created."]
                create_project {
                    is_private: ::core::primitive::bool,
                    external_id: runtime_types::primitive_types::H160,
                    team_id: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                    description: ::subxt::sp_core::H256,
                    domains: ::std::vec::Vec<runtime_types::primitive_types::H160>,
                },
                #[codec(index = 1)]
                #[doc = "Allow a user to update project."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `project_id`: [Project]((./struct.Project.html)) identifier (external_id) to be updated"]
                #[doc = "- `description`: Optional. Hash of description"]
                #[doc = "- `is_private`: Optional.  Determine visible project or not"]
                update_project {
                    project_id: runtime_types::primitive_types::H160,
                    description: ::core::option::Option<::subxt::sp_core::H256>,
                    is_private: ::core::option::Option<::core::primitive::bool>,
                },
                #[codec(index = 2)]
                #[doc = "Allow a user to create project content."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `content`: [Content](./struct.ProjectContent.html) to be created"]
                create_project_content {
                    external_id: runtime_types::primitive_types::H160,
                    project_external_id: runtime_types::primitive_types::H160,
                    team_id: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                    content_type: runtime_types::pallet_deip::ProjectContentType,
                    description: ::subxt::sp_core::H256,
                    content: ::subxt::sp_core::H256,
                    authors: ::std::vec::Vec<
                        runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::primitive_types::H160,
                        >,
                    >,
                    references: ::core::option::Option<
                        ::std::vec::Vec<runtime_types::primitive_types::H160>,
                    >,
                },
                #[codec(index = 3)]
                #[doc = "Allow a user to create review."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `review`: [Review](./struct.Review.html) to be created"]
                create_review {
                    external_id: runtime_types::primitive_types::H160,
                    author: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                    content: ::subxt::sp_core::H256,
                    domains: ::std::vec::Vec<runtime_types::primitive_types::H160>,
                    assessment_model: ::core::primitive::u32,
                    weight: ::std::vec::Vec<::core::primitive::u8>,
                    project_content_external_id: runtime_types::primitive_types::H160,
                },
                #[codec(index = 4)]
                #[doc = "Allows DAO to vote for a review."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                upvote_review {
                    review_id: runtime_types::primitive_types::H160,
                    domain_id: runtime_types::primitive_types::H160,
                },
                #[codec(index = 5)]
                #[doc = "Allows DAO to create a contract agreement between parties."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = "- `creator` - creator of the contract agreement. A contract can be created by"]
                #[doc = "    a thirdparty"]
                #[doc = "- `parties` - signatures from all parties must be collected in order"]
                #[doc = "    to consider the contract as approved"]
                #[doc = "- `hash` - hash of contract agreement offchain metadata"]
                #[doc = "- `activation_time`/`expiration_time`"]
                #[doc = "- `terms` - specifies type of the contract agreement. For details see [`ContractAgreementTerms`]."]
                create_contract_agreement {
                    id: runtime_types::primitive_types::H160,
                    creator: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                    parties: ::std::vec::Vec<
                        runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::primitive_types::H160,
                        >,
                    >,
                    hash: ::subxt::sp_core::H256,
                    activation_time: ::core::option::Option<::core::primitive::u64>,
                    expiration_time: ::core::option::Option<::core::primitive::u64>,
                    terms: runtime_types::pallet_deip::contract::Terms,
                },
                #[codec(index = 6)]
                #[doc = "Allows a party to sign the contract agreement created earlier."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = "- `id` - identifies the contract to accept. Check [`ContractAgreementTerms`] for"]
                #[doc = "    supported types"]
                accept_contract_agreement {
                    id: runtime_types::primitive_types::H160,
                    party: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                },
                #[codec(index = 7)]
                #[doc = "Allows a party to reject the contract agreement created earlier."]
                #[doc = "Contract makes a transition to the `Rejected` state and cannot be"]
                #[doc = "accepted by remaining parties anymore."]
                #[doc = ""]
                #[doc = "The origin for this call must be _Signed_."]
                #[doc = "- `id` - identifies the contract to accept. Check [`ContractAgreementTerms`] for"]
                #[doc = "    supported types"]
                reject_contract_agreement {
                    id: runtime_types::primitive_types::H160,
                    party: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                        ::subxt::sp_core::crypto::AccountId32,
                        runtime_types::primitive_types::H160,
                    >,
                },
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Domain {
                pub external_id: runtime_types::primitive_types::H160,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Error {
                #[codec(index = 0)]
                #[doc = "The project does not exist."]
                NoSuchProject,
                #[codec(index = 1)]
                #[doc = "The project is created by another account, so caller can't remove it."]
                NotProjectOwner,
                #[codec(index = 2)]
                #[doc = "Cannot add domain into the porject because this domain not exists"]
                DomainNotExists,
                #[codec(index = 3)]
                #[doc = "Cannot add a project because a project with this ID is already a exists"]
                ProjectAlreadyExists,
                #[codec(index = 4)]
                #[doc = "Cannot add a project content because a project content with this ID is already a exists."]
                ProjectContentAlreadyExists,
                #[codec(index = 5)]
                #[doc = "Project does not belong to the team."]
                ProjectNotBelongToTeam,
                #[codec(index = 6)]
                #[doc = "The project content does not exist."]
                NoSuchProjectContent,
                #[codec(index = 7)]
                #[doc = "The Reference does not exist."]
                NoSuchReference,
                #[codec(index = 8)]
                #[doc = "Cannot add a project content because a project with this ID is already a finished"]
                ProjectAlreadyFinished,
                #[codec(index = 9)]
                #[doc = "Cannot add another domain because the limit is already reached"]
                DomainLimitReached,
                #[codec(index = 10)]
                #[doc = "Cannot add domain because this domain is already a exists"]
                DomainAlreadyExists,
                #[codec(index = 11)]
                #[doc = "Cannot add a NDA because a NDA with this ID is already a exists."]
                NdaAlreadyExists,
                #[codec(index = 12)]
                #[doc = "Nda Access Request with this ID is  already a exists."]
                NdaAccessRequestAlreadyExists,
                #[codec(index = 13)]
                #[doc = "The NDA with this ID does not exist."]
                NoSuchNda,
                #[codec(index = 14)]
                #[doc = "The NDA Access Request with this ID does not exist."]
                NoSuchNdaAccessRequest,
                #[codec(index = 15)]
                #[doc = "The start of the contract has not yet arrived, so contract can't be fulfilled or rejected"]
                NdaContractIsNotActiveYet,
                #[codec(index = 16)]
                #[doc = "NDA start date must be later or equal current moment"]
                NdaStartDateMustBeLaterOrEqualCurrentMoment,
                #[codec(index = 17)]
                #[doc = "NDA end date must be later current moment"]
                NdaEndDateMustBeLaterCurrentMoment,
                #[codec(index = 18)]
                #[doc = "NDA start date must be less than end date"]
                NdaStartDateMustBeLessThanEndDate,
                #[codec(index = 19)]
                #[doc = "Team of all projects must specified as party"]
                TeamOfAllProjectsMustSpecifiedAsParty,
                #[codec(index = 20)]
                #[doc = "Nda access request already finalized"]
                NdaAccessRequestAlreadyFinalized,
                #[codec(index = 21)]
                TooMuchNdaParties,
                #[codec(index = 22)]
                #[doc = "Cannot add a review because a review with this ID already exists"]
                ReviewAlreadyExists,
                #[codec(index = 23)]
                ReviewNoDomainSpecified,
                #[codec(index = 24)]
                ReviewVoteAlreadyExists,
                #[codec(index = 25)]
                ReviewVoteNoSuchDomain,
                #[codec(index = 26)]
                ReviewVoteNoSuchReview,
                #[codec(index = 27)]
                ReviewVoteUnrelatedDomain,
                #[codec(index = 28)]
                ReviewAlreadyVotedWithDomain,
                #[codec(index = 29)]
                #[doc = "Access Forbidden"]
                NoPermission,
                #[codec(index = 30)]
                ContractAgreementNoParties,
                #[codec(index = 31)]
                ContractAgreementStartTimeMustBeLaterOrEqualCurrentMoment,
                #[codec(index = 32)]
                ContractAgreementEndTimeMustBeLaterStartTime,
                #[codec(index = 33)]
                ContractAgreementAlreadyExists,
                #[codec(index = 34)]
                ContractAgreementFeeMustBePositive,
                #[codec(index = 35)]
                ContractAgreementLicenseTwoPartiesRequired,
                #[codec(index = 36)]
                ContractAgreementLicenseProjectTeamIsNotListedInParties,
                #[codec(index = 37)]
                ContractAgreementNotFound,
                #[codec(index = 38)]
                ContractAgreementWrongAgreement,
                #[codec(index = 39)]
                ContractAgreementAlreadyAccepted,
                #[codec(index = 40)]
                ContractAgreementLicensePartyIsNotLicenser,
                #[codec(index = 41)]
                ContractAgreementLicensePartyIsNotLicensee,
                #[codec(index = 42)]
                ContractAgreementLicenseExpired,
                #[codec(index = 43)]
                ContractAgreementLicenseNotEnoughBalance,
                #[codec(index = 44)]
                ContractAgreementLicenseFailedToChargeFee,
                #[codec(index = 45)]
                ContractAgreementLicenseIsNotActive,
                #[codec(index = 46)]
                ContractAgreementPartyIsNotListed,
                #[codec(index = 47)]
                ContractAgreementAlreadyAcceptedByParty,
                #[codec(index = 48)]
                ContractAgreementRejected,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Nda<_0, _1, _2> {
                pub contract_creator: _1,
                pub external_id: runtime_types::primitive_types::H160,
                pub end_date: _2,
                pub start_date: ::core::option::Option<_2>,
                pub contract_hash: _0,
                pub parties: ::std::vec::Vec<_1>,
                pub projects: ::std::vec::Vec<runtime_types::primitive_types::H160>,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct NdaAccessRequest<_0, _1> {
                pub external_id: runtime_types::primitive_types::H160,
                pub nda_external_id: runtime_types::primitive_types::H160,
                pub requester: _1,
                pub encrypted_payload_hash: _0,
                pub encrypted_payload_iv: ::std::vec::Vec<::core::primitive::u8>,
                pub status: runtime_types::pallet_deip::NdaAccessRequestStatus,
                pub grantor: ::core::option::Option<_1>,
                pub encrypted_payload_encryption_key:
                    ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
                pub proof_of_encrypted_payload_encryption_key:
                    ::core::option::Option<::std::vec::Vec<::core::primitive::u8>>,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum NdaAccessRequestStatus {
                #[codec(index = 0)]
                Pending,
                #[codec(index = 1)]
                Fulfilled,
                #[codec(index = 2)]
                Rejected,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Project<_0, _1> {
                pub is_private: ::core::primitive::bool,
                pub external_id: runtime_types::primitive_types::H160,
                pub team_id: _1,
                pub description: _0,
                pub domains: ::std::vec::Vec<runtime_types::primitive_types::H160>,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ProjectContent<_0, _1> {
                pub external_id: runtime_types::primitive_types::H160,
                pub project_external_id: runtime_types::primitive_types::H160,
                pub team_id: _1,
                pub content_type: runtime_types::pallet_deip::ProjectContentType,
                pub description: _0,
                pub content: _0,
                pub authors: ::std::vec::Vec<_1>,
                pub references:
                    ::core::option::Option<::std::vec::Vec<runtime_types::primitive_types::H160>>,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum ProjectContentType {
                #[codec(index = 0)]
                Announcement,
                #[codec(index = 1)]
                FinalResult,
                #[codec(index = 2)]
                MilestoneArticle,
                #[codec(index = 3)]
                MilestoneBook,
                #[codec(index = 4)]
                MilestoneChapter,
                #[codec(index = 5)]
                MilestoneCode,
                #[codec(index = 6)]
                MilestoneConferencePaper,
                #[codec(index = 7)]
                MilestoneCoverPage,
                #[codec(index = 8)]
                MilestoneData,
                #[codec(index = 9)]
                MilestoneExperimentFindings,
                #[codec(index = 10)]
                MilestoneMethod,
                #[codec(index = 11)]
                MilestoneNegativeResults,
                #[codec(index = 12)]
                MilestonePatent,
                #[codec(index = 13)]
                MilestonePoster,
                #[codec(index = 14)]
                MilestonePreprint,
                #[codec(index = 15)]
                MilestonePresentation,
                #[codec(index = 16)]
                MilestoneRawData,
                #[codec(index = 17)]
                MilestoneResearchProposal,
                #[codec(index = 18)]
                MilestoneTechnicalReport,
                #[codec(index = 19)]
                MilestoneThesis,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            #[doc = "Events for this module."]
            #[doc = ""]
            #[doc = "Events type."]
            pub enum RawEvent<_0, _1, _2> {
                #[codec(index = 0)]
                #[doc = "Event emitted when a project has been created. [BelongsTo, Project]"]
                ProjectCreated(_0, _1),
                #[codec(index = 1)]
                #[doc = "Event emitted when a project is removed by the owner. [BelongsTo, Project]"]
                ProjectRemoved(_0, _1),
                #[codec(index = 2)]
                #[doc = "Event emitted when a project is removed by the owner. [BelongsTo, ProjectId]"]
                ProjectUpdated(_0, runtime_types::primitive_types::H160),
                #[codec(index = 3)]
                #[doc = "Event emitted when a project contnet has been created. [BelongsTo, ProjectContentId]"]
                ProjectContnetCreated(_0, runtime_types::primitive_types::H160),
                #[codec(index = 4)]
                #[doc = "Event emitted when a NDA has been created. [BelongsTo, NdaId]"]
                NdaCreated(_0, runtime_types::primitive_types::H160),
                #[codec(index = 5)]
                #[doc = "Event emitted when a NDA Access request has been created. [BelongsTo, NdaAccessRequestId]"]
                NdaAccessRequestCreated(_0, runtime_types::primitive_types::H160),
                #[codec(index = 6)]
                NdaAccessRequestFulfilled(_0, runtime_types::primitive_types::H160),
                #[codec(index = 7)]
                NdaAccessRequestRejected(_0, runtime_types::primitive_types::H160),
                #[codec(index = 8)]
                #[doc = "Added a domain. [Creator, DomainId]"]
                DomainAdded(_0, runtime_types::primitive_types::H160),
                #[codec(index = 9)]
                #[doc = "Event emitted when a review has been created. [BelongsTo, Review]"]
                ReviewCreated(_0, _2),
                #[codec(index = 10)]
                #[doc = "Emitted when a DAO votes for a review"]
                ReviewUpvoted(
                    runtime_types::primitive_types::H160,
                    _0,
                    runtime_types::primitive_types::H160,
                ),
                #[codec(index = 11)]
                ContractAgreementCreated(runtime_types::primitive_types::H160),
                #[codec(index = 12)]
                ContractAgreementAccepted(runtime_types::primitive_types::H160, _0),
                #[codec(index = 13)]
                ContractAgreementFinalized(runtime_types::primitive_types::H160),
                #[codec(index = 14)]
                ContractAgreementRejected(runtime_types::primitive_types::H160, _0),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum StorageVersion {
                #[codec(index = 0)]
                V0,
                #[codec(index = 1)]
                V1,
            }
        }
        pub mod pallet_deip_dao {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                pub mod dao {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub enum AlterAuthority<_0> {
                        #[codec(index = 0)]
                        AddMember {
                            member: _0,
                            preserve_threshold: ::core::primitive::bool,
                        },
                        #[codec(index = 1)]
                        RemoveMember {
                            member: _0,
                            preserve_threshold: ::core::primitive::bool,
                        },
                        #[codec(index = 2)]
                        ReplaceAuthority {
                            authority_key: _0,
                            authority:
                                runtime_types::pallet_deip_dao::pallet::dao::InputAuthority<_0>,
                        },
                    }
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct Authority<_0> {
                        pub signatories: ::std::vec::Vec<_0>,
                        pub threshold: ::core::primitive::u16,
                    }
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct Dao<_0, _1> {
                        pub authority_key: _0,
                        pub authority: runtime_types::pallet_deip_dao::pallet::dao::Authority<_0>,
                        pub id: _1,
                        pub dao_key: _0,
                        pub metadata: ::core::option::Option<::subxt::sp_core::H256>,
                    }
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct InputAuthority<_0> {
                        pub signatories: ::std::vec::Vec<_0>,
                        pub threshold: ::core::primitive::u16,
                    }
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    create {
                        name: runtime_types::primitive_types::H160,
                        authority: runtime_types::pallet_deip_dao::pallet::dao::InputAuthority<
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                        metadata: ::core::option::Option<::subxt::sp_core::H256>,
                    },
                    #[codec(index = 1)]
                    alter_authority {
                        authority: runtime_types::pallet_deip_dao::pallet::dao::AlterAuthority<
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                    },
                    #[codec(index = 2)]
                    update_dao {
                        new_metadata: ::core::option::Option<::subxt::sp_core::H256>,
                    },
                    #[codec(index = 3)]
                    on_behalf {
                        name: runtime_types::primitive_types::H160,
                        call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Already exists (unique by `name`)"]
                    Exists,
                    #[codec(index = 1)]
                    #[doc = "Not found"]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Access denied"]
                    Forbidden,
                    #[codec(index = 3)]
                    #[doc = ""]
                    AuthorityMismatch,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Emits when DAO created"]
                    DaoCreate(
                        runtime_types::pallet_deip_dao::pallet::dao::Dao<
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::primitive_types::H160,
                        >,
                    ),
                    #[codec(index = 1)]
                    #[doc = "Emits when authority alteration"]
                    DaoAlterAuthority(
                        runtime_types::pallet_deip_dao::pallet::dao::Dao<
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::primitive_types::H160,
                        >,
                    ),
                    #[codec(index = 2)]
                    DaoMetadataUpdated(
                        runtime_types::pallet_deip_dao::pallet::dao::Dao<
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::primitive_types::H160,
                        >,
                    ),
                }
            }
        }
        pub mod pallet_deip_ecosystem_fund {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {}
            }
        }
        pub mod pallet_deip_f_nft {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Creates new collection. Returns collection id in event."]
                    #[doc = ""]
                    #[doc = "Parameters"]
                    #[doc = "- `max_items`: Max number of items in the collection."]
                    #[doc = ""]
                    #[doc = "Emits:"]
                    #[doc = "    [`Event::CollectionCreated`] when successful."]
                    create_collection {
                        id: runtime_types::primitive_types::H160,
                        max_items: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Mints item into collection."]
                    #[doc = ""]
                    #[doc = "Parameters"]
                    #[doc = "- `collection`: Id of the collection to be minted."]
                    #[doc = "- `item`: Unique item identifier, eg hash."]
                    #[doc = ""]
                    #[doc = "Emits:"]
                    #[doc = "    [`Event::ItemMinted`] when successful."]
                    mint_item {
                        collection: runtime_types::primitive_types::H160,
                        item: ::subxt::sp_core::H256,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfers item to another account."]
                    #[doc = ""]
                    #[doc = "Parameters"]
                    #[doc = "- `item`: Unique identifier of the item to be transferred."]
                    #[doc = "- `to`: Destination account."]
                    #[doc = ""]
                    #[doc = "Emits:"]
                    #[doc = "    [`Event::ItemTransferred`] when successful."]
                    transfer_item {
                        item: ::subxt::sp_core::H256,
                        to: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Mints additional fungible tokens, fractions for an NFT or coins."]
                    #[doc = "Fails if issuance of the fractions was limited on fractionalization"]
                    #[doc = "stage."]
                    #[doc = ""]
                    #[doc = "Parameters"]
                    #[doc = "- `item`: Unique identifier of the fractionalized item."]
                    #[doc = "- `amount`: Amount of fractions to be minted."]
                    #[doc = ""]
                    #[doc = "Emits:"]
                    #[doc = "    [`Event::FractionMinted`] when successful."]
                    mint_fraction {
                        item: ::subxt::sp_core::H256,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Burns fractions from item."]
                    #[doc = ""]
                    #[doc = "Parameters"]
                    #[doc = "- `item`: Unique identifier of the fractionalized item."]
                    #[doc = "- `amount`: Amount of fractions to be burned."]
                    #[doc = ""]
                    #[doc = "Emits:"]
                    #[doc = "    [`Event::FractionBurned`] when successful."]
                    burn_fraction {
                        item: ::subxt::sp_core::H256,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Transfers fraction (fungible token) to another account."]
                    #[doc = ""]
                    #[doc = "Parameters"]
                    #[doc = "- `item`: Unique id of the fractionalized item."]
                    #[doc = "- `to`: Destination account."]
                    #[doc = "- `amount`: Amount of fractions to be transferred."]
                    #[doc = ""]
                    #[doc = "Emits:"]
                    #[doc = "    [`Event::FractionTransferred`] when successful."]
                    transfer_fraction {
                        item: ::subxt::sp_core::H256,
                        to: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Fractionalizes NFT."]
                    #[doc = ""]
                    #[doc = "Parameters"]
                    #[doc = "- `item`: Unique id of the item to be fractionalized."]
                    #[doc = "- `total_amount`: Amount of the fractions."]
                    #[doc = "- `limited`: If set to true, further minting will be locked."]
                    #[doc = ""]
                    #[doc = "Emits:"]
                    #[doc = "    [`Event::ItemFractionalized`] when successful."]
                    fractionalize_item {
                        item: ::subxt::sp_core::H256,
                        total_amount: ::core::primitive::u128,
                        limited: ::core::primitive::bool,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    Other,
                    #[codec(index = 1)]
                    BadValue,
                    #[codec(index = 2)]
                    UnknownCollection,
                    #[codec(index = 3)]
                    UnknownItem,
                    #[codec(index = 4)]
                    BadTarget,
                    #[codec(index = 5)]
                    WrongOwner,
                    #[codec(index = 6)]
                    UnknownFTokenId,
                    #[codec(index = 7)]
                    Overflow,
                    #[codec(index = 8)]
                    InsufficientBalance,
                    #[codec(index = 9)]
                    NoPermission,
                    #[codec(index = 10)]
                    NotFractionalized,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    CollectionCreated {
                        issuer: ::subxt::sp_core::crypto::AccountId32,
                        collection: runtime_types::primitive_types::H160,
                        max_items: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    ItemMinted {
                        collection: runtime_types::primitive_types::H160,
                        item: ::subxt::sp_core::H256,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 2)]
                    ItemFractionalized {
                        item: ::subxt::sp_core::H256,
                        issuer: ::subxt::sp_core::crypto::AccountId32,
                        total_amount: ::core::primitive::u128,
                        limited: ::core::primitive::bool,
                    },
                    #[codec(index = 3)]
                    ItemTransferred {
                        item: ::subxt::sp_core::H256,
                        from: ::subxt::sp_core::crypto::AccountId32,
                        to: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 4)]
                    FractionMinted {
                        item: ::subxt::sp_core::H256,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    FractionBurned {
                        item: ::subxt::sp_core::H256,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    FractionTransferred {
                        item: ::subxt::sp_core::H256,
                        from: ::subxt::sp_core::crypto::AccountId32,
                        to: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
        }
        pub mod pallet_deip_investment_opportunity {
            use super::runtime_types;
            pub mod crowdfunding {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Contribution<_0, _1, _2> {
                    pub sale_id: runtime_types::primitive_types::H160,
                    pub owner: _0,
                    pub amount: _1,
                    pub time: _2,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum CrowdfundingStatus {
                    #[codec(index = 0)]
                    Incomplete,
                    #[codec(index = 1)]
                    Ready,
                    #[codec(index = 2)]
                    Active,
                    #[codec(index = 3)]
                    Payout,
                    #[codec(index = 4)]
                    Raise,
                    #[codec(index = 5)]
                    RaiseDone,
                    #[codec(index = 6)]
                    Refund,
                    #[codec(index = 7)]
                    ReleaseShares,
                    #[codec(index = 8)]
                    RefundDone,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct InvestmentV2 < _0 , _1 , _2 > { pub v1 : runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: Contribution < _0 , _1 , _2 > , pub payouts : :: core :: primitive :: u16 , }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct SimpleCrowdfunding < _0 , _1 , _2 , _3 > { pub created_ctx : _3 , pub external_id : runtime_types :: primitive_types :: H160 , pub start_time : _0 , pub end_time : _0 , pub status : runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: CrowdfundingStatus , pub asset_id : _1 , pub total_amount : runtime_types :: deip_serializable_u128 :: SerializableAtLeast32BitUnsigned < _2 > , pub soft_cap : runtime_types :: deip_serializable_u128 :: SerializableAtLeast32BitUnsigned < _2 > , pub hard_cap : runtime_types :: deip_serializable_u128 :: SerializableAtLeast32BitUnsigned < _2 > , pub shares : :: std :: vec :: Vec < runtime_types :: deip_asset_system :: asset :: Asset < _1 , _2 > > , }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct SimpleCrowdfundingV2 < _0 > { pub v1 : runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfunding < :: core :: primitive :: u64 , :: subxt :: sp_core :: H256 , :: core :: primitive :: u128 , runtime_types :: deip_transaction_ctx :: transaction_ctx :: TransactionCtxId < runtime_types :: pallet_deip_portal :: transaction_ctx :: PortalCtx < runtime_types :: deip_transaction_ctx :: transaction_ctx :: TransactionCtx < _0 > > > > , pub creator : :: subxt :: sp_core :: crypto :: AccountId32 , pub account : :: subxt :: sp_core :: crypto :: AccountId32 , pub shares : :: core :: primitive :: u16 , pub payouts : :: core :: primitive :: u16 , }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Allows DAO to create an investment opportunity."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `external_id`: id of the sale. Must be unique."]
                    #[doc = "- `project_id`: id of the project which tokens are intended to sale."]
                    #[doc = "- `investment_type`: specifies type of created investment opportunity. For possible"]
                    #[doc = "variants and details see [`FundingModel`]."]
                    create {
                        id: runtime_types::primitive_types::H160,
                        creator: runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                            ::subxt::sp_core::crypto::AccountId32,
                            runtime_types::primitive_types::H160,
                        >,
                        shares: (::subxt::sp_core::H256, ::core::primitive::u128),
                        fund: ::subxt::sp_core::H256,
                    },
                    #[codec(index = 1)]
                    commit_shares {
                        id: runtime_types::primitive_types::H160,
                        shares: (::subxt::sp_core::H256, ::core::primitive::u128),
                    },
                    #[codec(index = 2)]
                    rollback_shares {
                        id: runtime_types::primitive_types::H160,
                        shares: ::subxt::sp_core::H256,
                    },
                    #[codec(index = 3)]
                    ready {
                        id: runtime_types::primitive_types::H160,
                        start_time: ::core::option::Option<::core::primitive::u64>,
                        end_time: ::core::primitive::u64,
                        soft_cap: ::core::primitive::u128,
                        hard_cap: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    activate {
                        id: runtime_types::primitive_types::H160,
                    },
                    #[codec(index = 5)]
                    #[doc = "Allows DAO to invest to an opportunity."]
                    #[doc = ""]
                    #[doc = "The origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `id`: identifier of the investment opportunity"]
                    #[doc = "- `amount`: amount of units to invest. The account should have enough funds on"]
                    #[doc = "    the balance. This amount is reserved until the investment finished or expired"]
                    invest {
                        id: runtime_types::primitive_types::H160,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    payout {
                        investor: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                        id: runtime_types::primitive_types::H160,
                        shares: ::subxt::sp_core::H256,
                    },
                    #[codec(index = 7)]
                    raise {
                        id: runtime_types::primitive_types::H160,
                    },
                    #[codec(index = 8)]
                    expire {
                        id: runtime_types::primitive_types::H160,
                    },
                    #[codec(index = 9)]
                    refund {
                        investor: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                        id: runtime_types::primitive_types::H160,
                    },
                    #[codec(index = 10)]
                    release_shares {
                        id: runtime_types::primitive_types::H160,
                        shares: ::subxt::sp_core::H256,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    StartTimeMiscondition,
                    #[codec(index = 1)]
                    EndTimeMiscondition,
                    #[codec(index = 2)]
                    SoftCapMiscondition,
                    #[codec(index = 3)]
                    HardCapMiscondition,
                    #[codec(index = 4)]
                    AlreadyExists,
                    #[codec(index = 5)]
                    BalanceIsNotEnough,
                    #[codec(index = 6)]
                    SecurityTokenNotSpecified,
                    #[codec(index = 7)]
                    NotFound,
                    #[codec(index = 8)]
                    ImpossibleSituation,
                    #[codec(index = 9)]
                    WrongAssetId,
                    #[codec(index = 10)]
                    NoShares,
                    #[codec(index = 11)]
                    TooMuchShares,
                    #[codec(index = 12)]
                    WrongAsset,
                    #[codec(index = 13)]
                    NoPermission,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "Event emitted when a simple crowd funding has been created."] Created (runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: SimpleCrowdfundingV2 < runtime_types :: appchain_deip_runtime :: Runtime > ,) , # [codec (index = 1)] # [doc = "Event emitted when a simple crowd funding has been activated."] Activated (runtime_types :: primitive_types :: H160 ,) , # [codec (index = 2)] # [doc = "Event emitted when a simple crowd funding has finished."] SimpleCrowdfundingFinished (runtime_types :: primitive_types :: H160 ,) , # [codec (index = 3)] # [doc = "Event emitted when a simple crowd funding has expired."] Expired (runtime_types :: primitive_types :: H160 , runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: CrowdfundingStatus ,) , # [codec (index = 4)] # [doc = "Event emitted when DAO invested to an opportunity"] Invested (runtime_types :: primitive_types :: H160 , :: subxt :: sp_core :: crypto :: AccountId32 ,) , # [codec (index = 5)] HardCapReached (runtime_types :: primitive_types :: H160 , :: subxt :: sp_core :: crypto :: AccountId32 ,) , # [codec (index = 6)] CommitShares { id : runtime_types :: primitive_types :: H160 , shares : (:: subxt :: sp_core :: H256 , :: core :: primitive :: u128 ,) , } , # [codec (index = 7)] RollbackShares { id : runtime_types :: primitive_types :: H160 , shares : (:: subxt :: sp_core :: H256 , :: core :: primitive :: u128 ,) , } , # [codec (index = 8)] Refund (runtime_types :: primitive_types :: H160 , :: subxt :: sp_core :: crypto :: AccountId32 ,) , # [codec (index = 9)] Refunded (runtime_types :: primitive_types :: H160 ,) , # [codec (index = 10)] StatusUpdated (runtime_types :: primitive_types :: H160 , runtime_types :: pallet_deip_investment_opportunity :: crowdfunding :: CrowdfundingStatus ,) , }
            }
        }
        pub mod pallet_deip_portal {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    # [codec (index = 0)] create { delegate : :: subxt :: sp_core :: crypto :: AccountId32 , metadata : :: core :: option :: Option < :: subxt :: sp_core :: H256 > , } , # [codec (index = 1)] update { update : runtime_types :: pallet_deip_portal :: portal :: PortalUpdate < runtime_types :: appchain_deip_runtime :: Runtime > , } , # [codec (index = 2)] sign { xt : :: std :: boxed :: Box < runtime_types :: sp_runtime :: generic :: unchecked_extrinsic :: UncheckedExtrinsic < :: subxt :: sp_runtime :: MultiAddress < :: subxt :: sp_core :: crypto :: AccountId32 , () > , runtime_types :: appchain_deip_runtime :: Call , runtime_types :: sp_runtime :: MultiSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment ,) > > , } , # [codec (index = 3)] exec { portal_id : runtime_types :: primitive_types :: H160 , call : :: std :: boxed :: Box < runtime_types :: appchain_deip_runtime :: Call > , } , # [codec (index = 4)] exec_postponed { portal_id : runtime_types :: primitive_types :: H160 , call : :: std :: boxed :: Box < runtime_types :: appchain_deip_runtime :: Call > , } , }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    DelegateMismatch,
                    #[codec(index = 1)]
                    AlreadySigned,
                    #[codec(index = 2)]
                    UnproperCall,
                    #[codec(index = 3)]
                    NotSigned,
                    #[codec(index = 4)]
                    OwnerIsNotATenant,
                    #[codec(index = 5)]
                    PortalAlreadyExist,
                    #[codec(index = 6)]
                    PortalNotFound,
                }
            }
            pub mod portal {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Portal<_0> {
                    pub id: runtime_types::primitive_types::H160,
                    pub owner: ::subxt::sp_core::crypto::AccountId32,
                    pub delegate: ::subxt::sp_core::crypto::AccountId32,
                    pub metadata: ::core::option::Option<::subxt::sp_core::H256>,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_0>,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct PortalUpdate<_0> {
                    pub delegate: ::core::option::Option<::subxt::sp_core::crypto::AccountId32>,
                    pub metadata:
                        ::core::option::Option<::core::option::Option<::subxt::sp_core::H256>>,
                    #[codec(skip)]
                    pub __subxt_unused_type_params: ::core::marker::PhantomData<_0>,
                }
            }
            pub mod transaction_ctx {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct PortalCtx<_0>(pub _0);
            }
        }
        pub mod pallet_deip_proposal {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    propose {
                        batch: ::std::vec::Vec<
                            runtime_types::pallet_deip_proposal::proposal::BatchItem<
                                runtime_types::appchain_deip_runtime::deip_account::DeipAccountId<
                                    ::subxt::sp_core::crypto::AccountId32,
                                    runtime_types::primitive_types::H160,
                                >,
                                runtime_types::appchain_deip_runtime::Call,
                            >,
                        >,
                        external_id: ::core::option::Option<runtime_types::primitive_types::H160>,
                    },
                    #[codec(index = 1)]
                    decide {
                        proposal_id: runtime_types::primitive_types::H160,
                        decision:
                            runtime_types::pallet_deip_proposal::proposal::ProposalMemberDecision,
                        batch_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    expire {
                        proposal_id: runtime_types::primitive_types::H160,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Proposal not found"]
                    NotFound,
                    #[codec(index = 1)]
                    #[doc = "Proposal already exist"]
                    AlreadyExist,
                    #[codec(index = 2)]
                    #[doc = "Current origin is not a member of Proposal"]
                    NotAMember,
                    #[codec(index = 3)]
                    #[doc = "Proposal already resolved (done, failed or rejected)"]
                    AlreadyResolved,
                    #[codec(index = 4)]
                    #[doc = "Decision in not possible in the current state"]
                    ImpossibleDecision,
                    #[codec(index = 5)]
                    #[doc = "Reach depth limit of nested proposals"]
                    ReachDepthLimit,
                    #[codec(index = 6)]
                    #[doc = "Reach size limit of proposal's batch"]
                    ReachSizeLimit,
                    #[codec(index = 7)]
                    #[doc = "Self-referential proposal"]
                    SelfReferential,
                    #[codec(index = 8)]
                    #[doc = "Not expired yet"]
                    NotExpired,
                    #[codec(index = 9)]
                    #[doc = "Provided batch weight is lower than expected"]
                    BatchWeightTooLow,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Emits when proposal created"]
                    Proposed {
                        author: ::subxt::sp_core::crypto::AccountId32,
                        batch: ::std::vec::Vec<
                            runtime_types::pallet_deip_proposal::proposal::BatchItem<
                                ::subxt::sp_core::crypto::AccountId32,
                                runtime_types::appchain_deip_runtime::Call,
                            >,
                        >,
                        proposal_id: runtime_types::primitive_types::H160,
                        batch_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 1)]
                    #[doc = "Emits when proposal approved by it's member"]
                    Approved {
                        member: ::subxt::sp_core::crypto::AccountId32,
                        proposal_id: runtime_types::primitive_types::H160,
                    },
                    #[codec(index = 2)]
                    #[doc = "Emits when member revokes his approval"]
                    RevokedApproval {
                        member: ::subxt::sp_core::crypto::AccountId32,
                        proposal_id: runtime_types::primitive_types::H160,
                    },
                    #[codec(index = 3)]
                    #[doc = "Emits when proposal resolved (rejected / done / failed)"]
                    Resolved {
                        member: ::subxt::sp_core::crypto::AccountId32,
                        proposal_id: runtime_types::primitive_types::H160,
                        state: runtime_types::pallet_deip_proposal::proposal::ProposalState,
                    },
                    #[codec(index = 4)]
                    #[doc = "Expired"]
                    Expired {
                        proposal_id: runtime_types::primitive_types::H160,
                    },
                }
            }
            pub mod proposal {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct BatchItem<_0, _1> {
                    pub account: _0,
                    pub call: _1,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct DeipProposal < _0 > { pub id : runtime_types :: primitive_types :: H160 , pub batch : :: std :: vec :: Vec < runtime_types :: pallet_deip_proposal :: proposal :: BatchItem < :: subxt :: sp_core :: crypto :: AccountId32 , runtime_types :: appchain_deip_runtime :: Call > > , pub batch_weight : :: core :: primitive :: u64 , pub decisions : :: subxt :: KeyedVec < :: subxt :: sp_core :: crypto :: AccountId32 , runtime_types :: pallet_deip_proposal :: proposal :: ProposalMemberDecision > , pub state : runtime_types :: pallet_deip_proposal :: proposal :: ProposalState , pub author : :: subxt :: sp_core :: crypto :: AccountId32 , pub created_at : :: core :: primitive :: u64 , pub created_ctx : runtime_types :: deip_transaction_ctx :: transaction_ctx :: TransactionCtxId < runtime_types :: pallet_deip_portal :: transaction_ctx :: PortalCtx < runtime_types :: deip_transaction_ctx :: transaction_ctx :: TransactionCtx < _0 > > > , }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum ProposalMemberDecision {
                    #[codec(index = 0)]
                    Pending,
                    #[codec(index = 1)]
                    Approve,
                    #[codec(index = 2)]
                    Reject,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum ProposalState {
                    #[codec(index = 0)]
                    Pending,
                    #[codec(index = 1)]
                    Rejected,
                    #[codec(index = 2)]
                    Done,
                    #[codec(index = 3)]
                    Failed(runtime_types::sp_runtime::DispatchError),
                }
            }
        }
        pub mod pallet_deip_vesting {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Create a vested transfer"]
                    vested_transfer {
                        target: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                        plan: runtime_types::pallet_deip_vesting::pallet::VestingPlan<
                            ::core::primitive::u128,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Unlock vested tokens of sender account"]
                    unlock,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    ExistingVestingPlan,
                    #[codec(index = 1)]
                    AmountLow,
                    #[codec(index = 2)]
                    InvalidVestingPlan,
                    #[codec(index = 3)]
                    NoVestingPlan,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    VestingUpdated(
                        ::subxt::sp_core::crypto::AccountId32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 1)]
                    VestingCompleted(::subxt::sp_core::crypto::AccountId32),
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct VestingPlan<_0> {
                    pub start_time: ::core::primitive::u64,
                    pub cliff_duration: ::core::primitive::u64,
                    pub total_duration: ::core::primitive::u64,
                    pub interval: ::core::primitive::u64,
                    pub initial_amount: _0,
                    pub total_amount: _0,
                    pub vesting_during_cliff: ::core::primitive::bool,
                }
            }
        }
        pub mod pallet_grandpa {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                    #[doc = "equivocation proof and validate the given key ownership proof"]
                    #[doc = "against the extracted offender. If both are valid, the offence"]
                    #[doc = "will be reported."]
                    report_equivocation {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_finality_grandpa::EquivocationProof<
                                ::subxt::sp_core::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 1)]
                    #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                    #[doc = "equivocation proof and validate the given key ownership proof"]
                    #[doc = "against the extracted offender. If both are valid, the offence"]
                    #[doc = "will be reported."]
                    #[doc = ""]
                    #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                    #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                    #[doc = "if the block author is defined it will be defined as the equivocation"]
                    #[doc = "reporter."]
                    report_equivocation_unsigned {
                        equivocation_proof: ::std::boxed::Box<
                            runtime_types::sp_finality_grandpa::EquivocationProof<
                                ::subxt::sp_core::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_session::MembershipProof,
                    },
                    #[codec(index = 2)]
                    #[doc = "Note that the current authority set of the GRANDPA finality gadget has"]
                    #[doc = "stalled. This will trigger a forced authority set change at the beginning"]
                    #[doc = "of the next session, to be enacted `delay` blocks after that. The delay"]
                    #[doc = "should be high enough to safely assume that the block signalling the"]
                    #[doc = "forced change will not be re-orged (e.g. 1000 blocks). The GRANDPA voters"]
                    #[doc = "will start the new authority set using the given finalized block as base."]
                    #[doc = "Only callable by root."]
                    note_stalled {
                        delay: ::core::primitive::u32,
                        best_finalized_block_number: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempt to signal GRANDPA pause when the authority set isn't live"]
                    #[doc = "(either paused or already pending pause)."]
                    PauseFailed,
                    #[codec(index = 1)]
                    #[doc = "Attempt to signal GRANDPA resume when the authority set isn't paused"]
                    #[doc = "(either live or already pending resume)."]
                    ResumeFailed,
                    #[codec(index = 2)]
                    #[doc = "Attempt to signal GRANDPA change with one already pending."]
                    ChangePending,
                    #[codec(index = 3)]
                    #[doc = "Cannot signal forced change so soon after last."]
                    TooSoon,
                    #[codec(index = 4)]
                    #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
                    InvalidKeyOwnershipProof,
                    #[codec(index = 5)]
                    #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
                    InvalidEquivocationProof,
                    #[codec(index = 6)]
                    #[doc = "A given equivocation report is valid but already previously reported."]
                    DuplicateOffenceReport,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New authority set has been applied."]
                    NewAuthorities {
                        authority_set: ::std::vec::Vec<(
                            runtime_types::sp_finality_grandpa::app::Public,
                            ::core::primitive::u64,
                        )>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Current authority set has been paused."]
                    Paused,
                    #[codec(index = 2)]
                    #[doc = "Current authority set has been resumed."]
                    Resumed,
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct StoredPendingChange<_0> {
                pub scheduled_at: _0,
                pub delay: _0,
                pub next_authorities:
                    runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_finality_grandpa::app::Public,
                        ::core::primitive::u64,
                    )>,
                pub forced: ::core::option::Option<_0>,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum StoredState<_0> {
                #[codec(index = 0)]
                Live,
                #[codec(index = 1)]
                PendingPause { scheduled_at: _0, delay: _0 },
                #[codec(index = 2)]
                Paused,
                #[codec(index = 3)]
                PendingResume { scheduled_at: _0, delay: _0 },
            }
        }
        pub mod pallet_im_online {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: `O(K + E)` where K is length of `Keys` (heartbeat.validators_len) and E is"]
                    #[doc = "  length of `heartbeat.network_state.external_address`"]
                    #[doc = "  - `O(K)`: decoding of length `K`"]
                    #[doc = "  - `O(E)`: decoding/encoding of length `E`"]
                    #[doc = "- DbReads: pallet_session `Validators`, pallet_session `CurrentIndex`, `Keys`,"]
                    #[doc = "  `ReceivedHeartbeats`"]
                    #[doc = "- DbWrites: `ReceivedHeartbeats`"]
                    #[doc = "# </weight>"]
                    heartbeat {
                        heartbeat:
                            runtime_types::pallet_im_online::Heartbeat<::core::primitive::u32>,
                        signature: runtime_types::pallet_im_online::sr25519::app_sr25519::Signature,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Non existent public key."]
                    InvalidKey,
                    #[codec(index = 1)]
                    #[doc = "Duplicated heartbeat."]
                    DuplicatedHeartbeat,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new heartbeat was received from `AuthorityId`."]
                    HeartbeatReceived {
                        authority_id: runtime_types::pallet_im_online::sr25519::app_sr25519::Public,
                    },
                    #[codec(index = 1)]
                    #[doc = "At the end of the session, no offence was committed."]
                    AllGood,
                    #[codec(index = 2)]
                    #[doc = "At the end of the session, at least one validator was found to be offline."]
                    SomeOffline {
                        offline: ::std::vec::Vec<(
                            ::subxt::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        )>,
                    },
                }
            }
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct Signature(pub runtime_types::sp_core::sr25519::Signature);
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct BoundedOpaqueNetworkState {
                pub peer_id:
                    runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
                        ::core::primitive::u8,
                    >,
                pub external_addresses:
                    runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
                        runtime_types::frame_support::storage::weak_bounded_vec::WeakBoundedVec<
                            ::core::primitive::u8,
                        >,
                    >,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Heartbeat<_0> {
                pub block_number: _0,
                pub network_state: runtime_types::sp_core::offchain::OpaqueNetworkState,
                pub session_index: _0,
                pub authority_index: _0,
                pub validators_len: _0,
            }
        }
        pub mod pallet_multisig {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Immediately dispatch a multi-signature call using a single approval from the caller."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who are part of the"]
                    #[doc = "multi-signature, but do not participate in the approval process."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "O(Z + C) where Z is the length of the call and C its execution weight."]
                    #[doc = "-------------------------------"]
                    #[doc = "- DB Weight: None"]
                    #[doc = "- Plus Call Weight"]
                    #[doc = "# </weight>"]
                    as_multi_threshold_1 {
                        other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                        call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "If there are enough, then dispatch the call."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call`: The call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: Unless this is the final approval, you will generally want to use"]
                    #[doc = "`approve_as_multi` instead, since it only requires a hash of the call."]
                    #[doc = ""]
                    #[doc = "Result is equivalent to the dispatched result if `threshold` is exactly `1`. Otherwise"]
                    #[doc = "on success, result is `Ok` and the result from the interior call, if it was executed,"]
                    #[doc = "may be found in the deposited `MultisigExecuted` event."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(S + Z + Call)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One call encode & hash, both of complexity `O(Z)` where `Z` is tx-len."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- The weight of the `call`."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    #[doc = "-------------------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "    - Reads: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                    #[doc = "    - Writes: Multisig Storage, [Caller Account], Calls (if `store_call`)"]
                    #[doc = "- Plus Call Weight"]
                    #[doc = "# </weight>"]
                    as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call:
                            ::subxt::WrapperKeepOpaque<runtime_types::appchain_deip_runtime::Call>,
                        store_call: ::core::primitive::bool,
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Register approval for a dispatch to be made from a deterministic composite account if"]
                    #[doc = "approved by a total of `threshold - 1` of `other_signatories`."]
                    #[doc = ""]
                    #[doc = "Payment: `DepositBase` will be reserved if this is the first approval, plus"]
                    #[doc = "`threshold` times `DepositFactor`. It is returned once this dispatch happens or"]
                    #[doc = "is cancelled."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `maybe_timepoint`: If this is the first approval, then this must be `None`. If it is"]
                    #[doc = "not the first approval, then it must be `Some`, with the timepoint (block number and"]
                    #[doc = "transaction index) of the first approval transaction."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "NOTE: If this is the final approval, you will want to use `as_multi` instead."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- Up to one binary search and insert (`O(logS + S)`)."]
                    #[doc = "- I/O: 1 read `O(S)`, up to 1 mutate `O(S)`. Up to one remove."]
                    #[doc = "- One event."]
                    #[doc = "- Storage: inserts one item, value size bounded by `MaxSignatories`, with a deposit"]
                    #[doc = "  taken for its lifetime of `DepositBase + threshold * DepositFactor`."]
                    #[doc = "----------------------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "    - Read: Multisig Storage, [Caller Account]"]
                    #[doc = "    - Write: Multisig Storage, [Caller Account]"]
                    #[doc = "# </weight>"]
                    approve_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                        maybe_timepoint: ::core::option::Option<
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        >,
                        call_hash: [::core::primitive::u8; 32usize],
                        max_weight: ::core::primitive::u64,
                    },
                    #[codec(index = 3)]
                    #[doc = "Cancel a pre-existing, on-going multisig transaction. Any deposit reserved previously"]
                    #[doc = "for this operation will be unreserved on success."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `threshold`: The total number of approvals for this dispatch before it is executed."]
                    #[doc = "- `other_signatories`: The accounts (other than the sender) who can approve this"]
                    #[doc = "dispatch. May not be empty."]
                    #[doc = "- `timepoint`: The timepoint (block number and transaction index) of the first approval"]
                    #[doc = "transaction for this dispatch."]
                    #[doc = "- `call_hash`: The hash of the call to be executed."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(S)`."]
                    #[doc = "- Up to one balance-reserve or unreserve operation."]
                    #[doc = "- One passthrough operation, one insert, both `O(S)` where `S` is the number of"]
                    #[doc = "  signatories. `S` is capped by `MaxSignatories`, with weight being proportional."]
                    #[doc = "- One encode & hash, both of complexity `O(S)`."]
                    #[doc = "- One event."]
                    #[doc = "- I/O: 1 read `O(S)`, one remove."]
                    #[doc = "- Storage: removes one item."]
                    #[doc = "----------------------------------"]
                    #[doc = "- DB Weight:"]
                    #[doc = "    - Read: Multisig Storage, [Caller Account], Refund Account, Calls"]
                    #[doc = "    - Write: Multisig Storage, [Caller Account], Refund Account, Calls"]
                    #[doc = "# </weight>"]
                    cancel_as_multi {
                        threshold: ::core::primitive::u16,
                        other_signatories: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Threshold must be 2 or greater."]
                    MinimumThreshold,
                    #[codec(index = 1)]
                    #[doc = "Call is already approved by this signatory."]
                    AlreadyApproved,
                    #[codec(index = 2)]
                    #[doc = "Call doesn't need any (more) approvals."]
                    NoApprovalsNeeded,
                    #[codec(index = 3)]
                    #[doc = "There are too few signatories in the list."]
                    TooFewSignatories,
                    #[codec(index = 4)]
                    #[doc = "There are too many signatories in the list."]
                    TooManySignatories,
                    #[codec(index = 5)]
                    #[doc = "The signatories were provided out of order; they should be ordered."]
                    SignatoriesOutOfOrder,
                    #[codec(index = 6)]
                    #[doc = "The sender was contained in the other signatories; it shouldn't be."]
                    SenderInSignatories,
                    #[codec(index = 7)]
                    #[doc = "Multisig operation not found when attempting to cancel."]
                    NotFound,
                    #[codec(index = 8)]
                    #[doc = "Only the account that originally created the multisig is able to cancel it."]
                    NotOwner,
                    #[codec(index = 9)]
                    #[doc = "No timepoint was given, yet the multisig operation is already underway."]
                    NoTimepoint,
                    #[codec(index = 10)]
                    #[doc = "A different timepoint was given to the multisig operation that is underway."]
                    WrongTimepoint,
                    #[codec(index = 11)]
                    #[doc = "A timepoint was given, yet no multisig operation is underway."]
                    UnexpectedTimepoint,
                    #[codec(index = 12)]
                    #[doc = "The maximum weight information provided was too low."]
                    MaxWeightTooLow,
                    #[codec(index = 13)]
                    #[doc = "The data to be stored is already stored."]
                    AlreadyStored,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new multisig operation has begun."]
                    NewMultisig {
                        approving: ::subxt::sp_core::crypto::AccountId32,
                        multisig: ::subxt::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 1)]
                    #[doc = "A multisig operation has been approved by someone."]
                    MultisigApproval {
                        approving: ::subxt::sp_core::crypto::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                    #[codec(index = 2)]
                    #[doc = "A multisig operation has been executed."]
                    MultisigExecuted {
                        approving: ::subxt::sp_core::crypto::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 3)]
                    #[doc = "A multisig operation has been cancelled."]
                    MultisigCancelled {
                        cancelling: ::subxt::sp_core::crypto::AccountId32,
                        timepoint:
                            runtime_types::pallet_multisig::Timepoint<::core::primitive::u32>,
                        multisig: ::subxt::sp_core::crypto::AccountId32,
                        call_hash: [::core::primitive::u8; 32usize],
                    },
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Multisig<_0, _1, _2> {
                pub when: runtime_types::pallet_multisig::Timepoint<_0>,
                pub deposit: _1,
                pub depositor: _2,
                pub approvals: ::std::vec::Vec<_2>,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Timepoint<_0> {
                pub height: _0,
                pub index: _0,
            }
        }
        pub mod pallet_octopus_appchain {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Public(pub runtime_types::sp_core::sr25519::Public);
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Submit observations."]
                    submit_observations {
                        payload: runtime_types::pallet_octopus_appchain::ObservationsPayload<
                            runtime_types::sp_runtime::MultiSigner,
                            ::core::primitive::u32,
                            ::subxt::sp_core::crypto::AccountId32,
                        >,
                        signature: runtime_types::sp_runtime::MultiSignature,
                    },
                    #[codec(index = 1)]
                    force_set_is_activated {
                        is_activated: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    force_set_next_set_id { next_set_id: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    force_set_planned_validators {
                        validators: ::std::vec::Vec<(
                            ::subxt::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        )>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Emits `Locked` event when successful."]
                    lock {
                        receiver_id: ::std::vec::Vec<::core::primitive::u8>,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    mint_asset {
                        asset_id: ::core::primitive::u32,
                        sender_id: ::std::vec::Vec<::core::primitive::u8>,
                        receiver: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    burn_asset {
                        asset_id: ::core::primitive::u32,
                        receiver_id: ::std::vec::Vec<::core::primitive::u8>,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    set_asset_name {
                        asset_name: ::std::vec::Vec<::core::primitive::u8>,
                        asset_id: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    tranfer_from_pallet_account {
                        receiver: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                        amount: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The set id of new validator set was wrong."]
                    WrongSetId,
                    #[codec(index = 1)]
                    #[doc = "Invalid notification id of observation."]
                    InvalidNotificationId,
                    #[codec(index = 2)]
                    #[doc = "Must be a validator."]
                    NotValidator,
                    #[codec(index = 3)]
                    #[doc = "Amount overflow."]
                    AmountOverflow,
                    #[codec(index = 4)]
                    #[doc = "Next notification Id overflow."]
                    NextNotificationIdOverflow,
                    #[codec(index = 5)]
                    #[doc = "Wrong Asset Id."]
                    WrongAssetId,
                    #[codec(index = 6)]
                    #[doc = "Invalid active total stake."]
                    InvalidActiveTotalStake,
                    #[codec(index = 7)]
                    #[doc = "Appchain is not activated."]
                    NotActivated,
                    #[codec(index = 8)]
                    #[doc = "ReceiverId is not a valid utf8 string."]
                    InvalidReceiverId,
                    #[codec(index = 9)]
                    #[doc = "Token is not a valid utf8 string."]
                    InvalidTokenId,
                    #[codec(index = 10)]
                    #[doc = "Next set Id overflow."]
                    NextSetIdOverflow,
                    #[codec(index = 11)]
                    #[doc = "Observations exceeded limit."]
                    ObservationsExceededLimit,
                    #[codec(index = 12)]
                    #[doc = "Asset name has been set."]
                    AssetNameHasSet,
                    #[codec(index = 13)]
                    #[doc = "Asset id in use."]
                    AssetIdInUse,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A new set of validators is waiting to be changed."]
                    NewPlannedValidators {
                        set_id: ::core::primitive::u32,
                        validators: ::std::vec::Vec<(
                            ::subxt::sp_core::crypto::AccountId32,
                            ::core::primitive::u128,
                        )>,
                    },
                    #[codec(index = 1)]
                    #[doc = "An `amount` of native token has been locked in the appchain to indicate that"]
                    #[doc = "it will be cross-chain transferred to the mainchain."]
                    Locked {
                        sender: ::subxt::sp_core::crypto::AccountId32,
                        receiver: ::std::vec::Vec<::core::primitive::u8>,
                        amount: ::core::primitive::u128,
                        sequence: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "An `amount` was unlocked to `receiver` from `sender`."]
                    Unlocked {
                        sender: ::std::vec::Vec<::core::primitive::u8>,
                        receiver: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "An `amount` unlock to `receiver` from `sender` failed."]
                    UnlockFailed {
                        sender: ::std::vec::Vec<::core::primitive::u8>,
                        receiver: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    AssetMinted {
                        asset_id: ::core::primitive::u32,
                        sender: ::std::vec::Vec<::core::primitive::u8>,
                        receiver: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    AssetBurned {
                        asset_id: ::core::primitive::u32,
                        sender: ::subxt::sp_core::crypto::AccountId32,
                        receiver: ::std::vec::Vec<::core::primitive::u8>,
                        amount: ::core::primitive::u128,
                        sequence: ::core::primitive::u64,
                    },
                    #[codec(index = 6)]
                    AssetMintFailed {
                        asset_id: ::core::primitive::u32,
                        sender: ::std::vec::Vec<::core::primitive::u8>,
                        receiver: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    AssetIdGetFailed {
                        token_id: ::std::vec::Vec<::core::primitive::u8>,
                        sender: ::std::vec::Vec<::core::primitive::u8>,
                        receiver: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    TransferredFromPallet {
                        receiver: ::subxt::sp_core::crypto::AccountId32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct BurnEvent<_0> {
                pub index: ::core::primitive::u32,
                pub sender_id: ::std::vec::Vec<::core::primitive::u8>,
                pub receiver: _0,
                pub amount: ::core::primitive::u128,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct LockAssetEvent<_0> {
                pub index: ::core::primitive::u32,
                pub token_id: ::std::vec::Vec<::core::primitive::u8>,
                pub sender_id: ::std::vec::Vec<::core::primitive::u8>,
                pub receiver: _0,
                pub amount: ::core::primitive::u128,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum NotificationResult {
                #[codec(index = 0)]
                Success,
                #[codec(index = 1)]
                UnlockFailed,
                #[codec(index = 2)]
                AssetMintFailed,
                #[codec(index = 3)]
                AssetGetFailed,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Observation<_0> {
                #[codec(index = 0)]
                UpdateValidatorSet(runtime_types::pallet_octopus_appchain::ValidatorSet<_0>),
                #[codec(index = 1)]
                LockAsset(runtime_types::pallet_octopus_appchain::LockAssetEvent<_0>),
                #[codec(index = 2)]
                Burn(runtime_types::pallet_octopus_appchain::BurnEvent<_0>),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum ObservationType {
                #[codec(index = 0)]
                UpdateValidatorSet,
                #[codec(index = 1)]
                Burn,
                #[codec(index = 2)]
                LockAsset,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ObservationsPayload<_0, _1, _2> {
                pub public: _0,
                pub block_number: _1,
                pub observations:
                    ::std::vec::Vec<runtime_types::pallet_octopus_appchain::Observation<_2>>,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Validator<_0> {
                pub validator_id_in_appchain: _0,
                pub total_stake: ::core::primitive::u128,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ValidatorSet<_0> {
                pub set_id: ::core::primitive::u32,
                pub validators:
                    ::std::vec::Vec<runtime_types::pallet_octopus_appchain::Validator<_0>>,
            }
        }
        pub mod pallet_octopus_lpos {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set `HistoryDepth` value. This function will delete any history information"]
                    #[doc = "when `HistoryDepth` is reduced."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- `new_history_depth`: The new history depth you would like to set."]
                    #[doc = "- `era_items_deleted`: The number of items that will be deleted by this dispatch. This"]
                    #[doc = "  should report all the storage items that will be deleted by clearing old era history."]
                    #[doc = "  Needed to report an accurate weight for the dispatch. Trusted by `Root` to report an"]
                    #[doc = "  accurate number."]
                    #[doc = ""]
                    #[doc = "Origin must be root."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- E: Number of history depths removed, i.e. 10 -> 7 = 3"]
                    #[doc = "- Weight: O(E)"]
                    #[doc = "- DB Weight:"]
                    #[doc = "    - Reads: Current Era, History Depth"]
                    #[doc = "    - Writes: History Depth"]
                    #[doc = "    - Clear Prefix Each: Era Stakers, EraStakersClipped, ErasValidatorPrefs"]
                    #[doc = "    - Writes Each: ErasValidatorReward, ErasRewardPoints, ErasTotalStake,"]
                    #[doc = "      ErasStartSessionIndex"]
                    #[doc = "# </weight>"]
                    set_history_depth {
                        #[codec(compact)]
                        new_history_depth: ::core::primitive::u32,
                        #[codec(compact)]
                        era_items_deleted: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    force_set_era_payout { era_payout: ::core::primitive::u128 },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Not a controller account."]
                    NotController,
                    #[codec(index = 1)]
                    #[doc = "Not a stash account."]
                    NotStash,
                    #[codec(index = 2)]
                    #[doc = "Stash is already bonded."]
                    AlreadyBonded,
                    #[codec(index = 3)]
                    #[doc = "Controller is already paired."]
                    AlreadyPaired,
                    #[codec(index = 4)]
                    #[doc = "Targets cannot be empty."]
                    EmptyTargets,
                    #[codec(index = 5)]
                    #[doc = "Duplicate index."]
                    DuplicateIndex,
                    #[codec(index = 6)]
                    #[doc = "Slash record index out of bounds."]
                    InvalidSlashIndex,
                    #[codec(index = 7)]
                    #[doc = "Can not bond with value less than minimum required."]
                    InsufficientBond,
                    #[codec(index = 8)]
                    #[doc = "Can not schedule more unlock chunks."]
                    NoMoreChunks,
                    #[codec(index = 9)]
                    #[doc = "Can not rebond without unlocking chunks."]
                    NoUnlockChunk,
                    #[codec(index = 10)]
                    #[doc = "Attempting to target a stash that still has funds."]
                    FundedTarget,
                    #[codec(index = 11)]
                    #[doc = "Invalid era to reward."]
                    InvalidEraToReward,
                    #[codec(index = 12)]
                    #[doc = "Invalid number of nominations."]
                    InvalidNumberOfNominations,
                    #[codec(index = 13)]
                    #[doc = "Items are not sorted and unique."]
                    NotSortedAndUnique,
                    #[codec(index = 14)]
                    #[doc = "Rewards for this era have already been claimed for this validator."]
                    AlreadyClaimed,
                    #[codec(index = 15)]
                    #[doc = "Incorrect previous history depth input provided."]
                    IncorrectHistoryDepth,
                    #[codec(index = 16)]
                    #[doc = "Incorrect number of slashing spans provided."]
                    IncorrectSlashingSpans,
                    #[codec(index = 17)]
                    #[doc = "Internal state has become somehow corrupted and the operation cannot continue."]
                    BadState,
                    #[codec(index = 18)]
                    #[doc = "Too many nomination targets supplied."]
                    TooManyTargets,
                    #[codec(index = 19)]
                    #[doc = "A nomination target was supplied that was blocked or otherwise not a validator."]
                    BadTarget,
                    #[codec(index = 20)]
                    #[doc = "The user has enough bond and thus cannot be chilled forcefully by an external person."]
                    CannotChillOther,
                    #[codec(index = 21)]
                    #[doc = "There are too many nominators in the system. Governance needs to adjust the staking"]
                    #[doc = "settings to keep things safe for the runtime."]
                    TooManyNominators,
                    #[codec(index = 22)]
                    #[doc = "There are too many validators in the system. Governance needs to adjust the staking"]
                    #[doc = "settings to keep things safe for the runtime."]
                    TooManyValidators,
                    #[codec(index = 23)]
                    #[doc = "There are not claimed rewards for this validator."]
                    NoClaimedRewards,
                    #[codec(index = 24)]
                    #[doc = "Amount overflow."]
                    AmountOverflow,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Notifies the mainchain to prepare the next era."]
                    PlanNewEra { era_index: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "Failed to notify the mainchain to prepare the next era."]
                    PlanNewEraFailed,
                    #[codec(index = 2)]
                    #[doc = "Trigger new era."]
                    TriggerNewEra,
                    #[codec(index = 3)]
                    #[doc = "Notifies the mainchain to pay the validator rewards of `era_index`."]
                    #[doc = "`excluded_validators` were excluded because they were not working properly."]
                    EraPayout {
                        era_index: ::core::primitive::u32,
                        excluded_validators: ::std::vec::Vec<::subxt::sp_core::crypto::AccountId32>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Failed to notify the mainchain to pay the validator rewards of `era_index`."]
                    EraPayoutFailed { era_index: ::core::primitive::u32 },
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ActiveEraInfo {
                pub index: ::core::primitive::u32,
                pub set_id: ::core::primitive::u32,
                pub start: ::core::option::Option<::core::primitive::u64>,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct EraRewardPoints<_0> {
                pub total: ::core::primitive::u32,
                pub individual: ::subxt::KeyedVec<_0, ::core::primitive::u32>,
            }
        }
        pub mod pallet_octopus_support {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum PayloadType {
                    #[codec(index = 0)]
                    Lock,
                    #[codec(index = 1)]
                    BurnAsset,
                    #[codec(index = 2)]
                    PlanNewEra,
                    #[codec(index = 3)]
                    EraPayout,
                }
            }
        }
        pub mod pallet_octopus_upward_messages {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {}
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Nonce overflow."]
                    NonceOverflow,
                    #[codec(index = 1)]
                    #[doc = "Queue size limit reached."]
                    QueueSizeLimitReached,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {}
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct Message {
                pub nonce: ::core::primitive::u64,
                pub payload_type: runtime_types::pallet_octopus_support::types::PayloadType,
                pub payload: ::std::vec::Vec<::core::primitive::u8>,
            }
        }
        pub mod pallet_session {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the session key(s) of the function caller to `keys`."]
                    #[doc = "Allows an account to set its session key prior to becoming a validator."]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be signed."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: `O(1)`. Actual cost depends on the number of length of"]
                    #[doc = "  `T::Keys::key_ids()` which is fixed."]
                    #[doc = "- DbReads: `origin account`, `T::ValidatorIdOf`, `NextKeys`"]
                    #[doc = "- DbWrites: `origin account`, `NextKeys`"]
                    #[doc = "- DbReads per key id: `KeyOwner`"]
                    #[doc = "- DbWrites per key id: `KeyOwner`"]
                    #[doc = "# </weight>"]
                    set_keys {
                        keys: runtime_types::appchain_deip_runtime::opaque::SessionKeys,
                        proof: ::std::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Removes any session key(s) of the function caller."]
                    #[doc = ""]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                    #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                    #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                    #[doc = "usually means being a stash account)."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: `O(1)` in number of key types. Actual cost depends on the number of length"]
                    #[doc = "  of `T::Keys::key_ids()` which is fixed."]
                    #[doc = "- DbReads: `T::ValidatorIdOf`, `NextKeys`, `origin account`"]
                    #[doc = "- DbWrites: `NextKeys`, `origin account`"]
                    #[doc = "- DbWrites per key id: `KeyOwner`"]
                    #[doc = "# </weight>"]
                    purge_keys,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Error for the session pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid ownership proof."]
                    InvalidProof,
                    #[codec(index = 1)]
                    #[doc = "No associated validator ID for account."]
                    NoAssociatedValidatorId,
                    #[codec(index = 2)]
                    #[doc = "Registered duplicate key."]
                    DuplicatedKey,
                    #[codec(index = 3)]
                    #[doc = "No keys are associated with this account."]
                    NoKeys,
                    #[codec(index = 4)]
                    #[doc = "Key setting account is not live, so it's impossible to associate keys."]
                    NoAccount,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New session has happened. Note that the argument is the session index, not the"]
                    #[doc = "block number as the type might suggest."]
                    NewSession {
                        session_index: ::core::primitive::u32,
                    },
                }
            }
        }
        pub mod pallet_sudo {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB write (event)."]
                    #[doc = "- Weight of derivative `call` execution + 10,000."]
                    #[doc = "# </weight>"]
                    sudo {
                        call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Sudo user to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- The weight of this call is defined by the caller."]
                    #[doc = "# </weight>"]
                    sudo_unchecked_weight {
                        call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
                        weight: ::core::primitive::u64,
                    },
                    #[codec(index = 2)]
                    #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                    #[doc = "key."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB change."]
                    #[doc = "# </weight>"]
                    set_key {
                        new: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                    #[doc = "a given account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB write (event)."]
                    #[doc = "- Weight of derivative `call` execution + 10,000."]
                    #[doc = "# </weight>"]
                    sudo_as {
                        who: ::subxt::sp_runtime::MultiAddress<
                            ::subxt::sp_core::crypto::AccountId32,
                            (),
                        >,
                        call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Error for the Sudo pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Sender must be the Sudo account"]
                    RequireSudo,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    Sudid {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "The \\[sudoer\\] just switched identity; the old key is supplied."]
                    KeyChanged {
                        new_sudoer: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    SudoAsDone {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the current time."]
                    #[doc = ""]
                    #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                    #[doc = "phase, if this call hasn't been invoked by that time."]
                    #[doc = ""]
                    #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                    #[doc = "`MinimumPeriod`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Inherent`."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                    #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)`). (because of `DidUpdate::take` in"]
                    #[doc = "  `on_finalize`)"]
                    #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                    #[doc = "# </weight>"]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_uniques {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The signing account has no permission to do the operation."]
                    NoPermission,
                    #[codec(index = 1)]
                    #[doc = "The given asset ID is unknown."]
                    Unknown,
                    #[codec(index = 2)]
                    #[doc = "The asset instance ID has already been used for an asset."]
                    AlreadyExists,
                    #[codec(index = 3)]
                    #[doc = "The owner turned out to be different to what was expected."]
                    WrongOwner,
                    #[codec(index = 4)]
                    #[doc = "Invalid witness data given."]
                    BadWitness,
                    #[codec(index = 5)]
                    #[doc = "The asset ID is already taken."]
                    InUse,
                    #[codec(index = 6)]
                    #[doc = "The asset instance or class is frozen."]
                    Frozen,
                    #[codec(index = 7)]
                    #[doc = "The delegate turned out to be different to what was expected."]
                    WrongDelegate,
                    #[codec(index = 8)]
                    #[doc = "There is no delegate approved."]
                    NoDelegate,
                    #[codec(index = 9)]
                    #[doc = "No approval exists that would allow the transfer."]
                    Unapproved,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An asset class was created."]
                    Created {
                        class: ::core::primitive::u32,
                        creator: ::subxt::sp_core::crypto::AccountId32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 1)]
                    #[doc = "An asset class was force-created."]
                    ForceCreated {
                        class: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 2)]
                    #[doc = "An asset `class` was destroyed."]
                    Destroyed { class: ::core::primitive::u32 },
                    #[codec(index = 3)]
                    #[doc = "An asset `instance` was issued."]
                    Issued {
                        class: ::core::primitive::u32,
                        instance: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 4)]
                    #[doc = "An asset `instance` was transferred."]
                    Transferred {
                        class: ::core::primitive::u32,
                        instance: ::core::primitive::u32,
                        from: ::subxt::sp_core::crypto::AccountId32,
                        to: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 5)]
                    #[doc = "An asset `instance` was destroyed."]
                    Burned {
                        class: ::core::primitive::u32,
                        instance: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some asset `instance` was frozen."]
                    Frozen {
                        class: ::core::primitive::u32,
                        instance: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Some asset `instance` was thawed."]
                    Thawed {
                        class: ::core::primitive::u32,
                        instance: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some asset `class` was frozen."]
                    ClassFrozen { class: ::core::primitive::u32 },
                    #[codec(index = 9)]
                    #[doc = "Some asset `class` was thawed."]
                    ClassThawed { class: ::core::primitive::u32 },
                    #[codec(index = 10)]
                    #[doc = "The owner changed."]
                    OwnerChanged {
                        class: ::core::primitive::u32,
                        new_owner: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 11)]
                    #[doc = "The management team changed."]
                    TeamChanged {
                        class: ::core::primitive::u32,
                        issuer: ::subxt::sp_core::crypto::AccountId32,
                        admin: ::subxt::sp_core::crypto::AccountId32,
                        freezer: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 12)]
                    #[doc = "An `instance` of an asset `class` has been approved by the `owner` for transfer by a"]
                    #[doc = "`delegate`."]
                    ApprovedTransfer {
                        class: ::core::primitive::u32,
                        instance: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                        delegate: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 13)]
                    #[doc = "An approval for a `delegate` account to transfer the `instance` of an asset `class` was"]
                    #[doc = "cancelled by its `owner`."]
                    ApprovalCancelled {
                        class: ::core::primitive::u32,
                        instance: ::core::primitive::u32,
                        owner: ::subxt::sp_core::crypto::AccountId32,
                        delegate: ::subxt::sp_core::crypto::AccountId32,
                    },
                    #[codec(index = 14)]
                    #[doc = "An asset `class` has had its attributes changed by the `Force` origin."]
                    AssetStatusChanged { class: ::core::primitive::u32 },
                    #[codec(index = 15)]
                    #[doc = "New metadata has been set for an asset class."]
                    ClassMetadataSet {
                        class: ::core::primitive::u32,
                        data: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 16)]
                    #[doc = "Metadata has been cleared for an asset class."]
                    ClassMetadataCleared { class: ::core::primitive::u32 },
                    #[codec(index = 17)]
                    #[doc = "New metadata has been set for an asset instance."]
                    MetadataSet {
                        class: ::core::primitive::u32,
                        instance: ::core::primitive::u32,
                        data: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        is_frozen: ::core::primitive::bool,
                    },
                    #[codec(index = 18)]
                    #[doc = "Metadata has been cleared for an asset instance."]
                    MetadataCleared {
                        class: ::core::primitive::u32,
                        instance: ::core::primitive::u32,
                    },
                    #[codec(index = 19)]
                    #[doc = "Metadata has been cleared for an asset instance."]
                    Redeposited {
                        class: ::core::primitive::u32,
                        successful_instances: ::std::vec::Vec<::core::primitive::u32>,
                    },
                    #[codec(index = 20)]
                    #[doc = "New attribute metadata has been set for an asset class or instance."]
                    AttributeSet {
                        class: ::core::primitive::u32,
                        maybe_instance: ::core::option::Option<::core::primitive::u32>,
                        key: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        value: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 21)]
                    #[doc = "Attribute metadata has been cleared for an asset class or instance."]
                    AttributeCleared {
                        class: ::core::primitive::u32,
                        maybe_instance: ::core::option::Option<::core::primitive::u32>,
                        key: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct ClassDetails<_0, _1> {
                    pub owner: _0,
                    pub issuer: _0,
                    pub admin: _0,
                    pub freezer: _0,
                    pub total_deposit: _1,
                    pub free_holding: ::core::primitive::bool,
                    pub instances: ::core::primitive::u32,
                    pub instance_metadatas: ::core::primitive::u32,
                    pub attributes: ::core::primitive::u32,
                    pub is_frozen: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct ClassMetadata<_0> {
                    pub deposit: _0,
                    pub data: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub is_frozen: ::core::primitive::bool,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct InstanceDetails<_0, _1> {
                    pub owner: _0,
                    pub approved: ::core::option::Option<_0>,
                    pub is_frozen: ::core::primitive::bool,
                    pub deposit: _1,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct InstanceMetadata<_0> {
                    pub deposit: _0,
                    pub data: runtime_types::frame_support::storage::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub is_frozen: ::core::primitive::bool,
                }
            }
        }
        pub mod pallet_utility {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "Contains one variant per dispatchable that can be called by an extrinsic."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = ""]
                    #[doc = "May be called from any origin."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                    #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                    #[doc = "# </weight>"]
                    #[doc = ""]
                    #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                    #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                    #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                    #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                    #[doc = "event is deposited."]
                    batch {
                        calls: ::std::vec::Vec<runtime_types::appchain_deip_runtime::Call>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Send a call through an indexed pseudonym of the sender."]
                    #[doc = ""]
                    #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                    #[doc = "use the same filter as the origin of this call."]
                    #[doc = ""]
                    #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                    #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                    #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                    #[doc = "in the Multisig pallet instead."]
                    #[doc = ""]
                    #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Send a batch of dispatch calls and atomically execute them."]
                    #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                    #[doc = ""]
                    #[doc = "May be called from any origin."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then call are dispatch without checking origin filter. (This includes"]
                    #[doc = "bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- Complexity: O(C) where C is the number of calls to be batched."]
                    #[doc = "# </weight>"]
                    batch_all {
                        calls: ::std::vec::Vec<runtime_types::appchain_deip_runtime::Call>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Dispatches a function call with a provided origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB write (event)."]
                    #[doc = "- Weight of derivative `call` execution + T::WeightInfo::dispatch_as()."]
                    #[doc = "# </weight>"]
                    dispatch_as {
                        as_origin:
                            ::std::boxed::Box<runtime_types::appchain_deip_runtime::OriginCaller>,
                        call: ::std::boxed::Box<runtime_types::appchain_deip_runtime::Call>,
                    },
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tCustom [dispatch errors](https://docs.substrate.io/v3/runtime/events-and-errors)\n\t\t\tof this pallet.\n\t\t\t"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many calls batched."]
                    TooManyCalls,
                }
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                #[doc = "\n\t\t\tThe [event](https://docs.substrate.io/v3/runtime/events-and-errors) emitted\n\t\t\tby this pallet.\n\t\t\t"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
                    #[doc = "well as the error."]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Batch of dispatches completed fully with no error."]
                    BatchCompleted,
                    #[codec(index = 2)]
                    #[doc = "A single item within a Batch of dispatches has completed with no error."]
                    ItemCompleted,
                    #[codec(index = 3)]
                    #[doc = "A call was dispatched. \\[result\\]"]
                    DispatchedAs(
                        ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    ),
                }
            }
        }
        pub mod primitive_types {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct H160(pub [::core::primitive::u8; 20usize]);
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct H256(pub [::core::primitive::u8; 32usize]);
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: CompactAs,
                    :: subxt :: codec :: Decode,
                    :: subxt :: codec :: Encode,
                    Clone,
                    Debug,
                )]
                pub struct FixedU128(pub ::core::primitive::u128);
            }
            pub mod per_things {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: CompactAs,
                    :: subxt :: codec :: Decode,
                    :: subxt :: codec :: Encode,
                    Clone,
                    Debug,
                )]
                pub struct Perbill(pub ::core::primitive::u32);
            }
        }
        pub mod sp_consensus_babe {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Public(pub runtime_types::sp_core::sr25519::Public);
            }
            pub mod digests {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum NextConfigDescriptor {
                    #[codec(index = 1)]
                    V1 {
                        c: (::core::primitive::u64, ::core::primitive::u64),
                        allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
                    },
                }
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum AllowedSlots {
                #[codec(index = 0)]
                PrimarySlots,
                #[codec(index = 1)]
                PrimaryAndSecondaryPlainSlots,
                #[codec(index = 2)]
                PrimaryAndSecondaryVRFSlots,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct BabeEpochConfiguration {
                pub c: (::core::primitive::u64, ::core::primitive::u64),
                pub allowed_slots: runtime_types::sp_consensus_babe::AllowedSlots,
            }
        }
        pub mod sp_consensus_slots {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct EquivocationProof<_0, _1> {
                pub offender: _1,
                pub slot: runtime_types::sp_consensus_slots::Slot,
                pub first_header: _0,
                pub second_header: _0,
            }
            #[derive(
                :: subxt :: codec :: CompactAs,
                :: subxt :: codec :: Decode,
                :: subxt :: codec :: Encode,
                Clone,
                Debug,
            )]
            pub struct Slot(pub ::core::primitive::u64);
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct AccountId32(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
            }
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Public(pub [::core::primitive::u8; 33usize]);
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod offchain {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct OpaqueMultiaddr(pub ::std::vec::Vec<::core::primitive::u8>);
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct OpaqueNetworkState {
                    pub peer_id: runtime_types::sp_core::OpaquePeerId,
                    pub external_addresses:
                        ::std::vec::Vec<runtime_types::sp_core::offchain::OpaqueMultiaddr>,
                }
            }
            pub mod sr25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct OpaquePeerId(pub ::std::vec::Vec<::core::primitive::u8>);
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Void {}
        }
        pub mod sp_finality_grandpa {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Public(pub runtime_types::sp_core::ed25519::Public);
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum Equivocation<_0, _1> {
                #[codec(index = 0)]
                Prevote(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_finality_grandpa::app::Public,
                        runtime_types::finality_grandpa::Prevote<_0, _1>,
                        runtime_types::sp_finality_grandpa::app::Signature,
                    >,
                ),
                #[codec(index = 1)]
                Precommit(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_finality_grandpa::app::Public,
                        runtime_types::finality_grandpa::Precommit<_0, _1>,
                        runtime_types::sp_finality_grandpa::app::Signature,
                    >,
                ),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct EquivocationProof<_0, _1> {
                pub set_id: ::core::primitive::u64,
                pub equivocation: runtime_types::sp_finality_grandpa::Equivocation<_0, _1>,
            }
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod generic {
                use super::runtime_types;
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct Digest {
                        pub logs:
                            ::std::vec::Vec<runtime_types::sp_runtime::generic::digest::DigestItem>,
                    }
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::std::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::std::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
                pub mod header {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct Header<_0, _1> {
                        pub parent_hash: ::subxt::sp_core::H256,
                        #[codec(compact)]
                        pub number: _0,
                        pub state_root: ::subxt::sp_core::H256,
                        pub extrinsics_root: ::subxt::sp_core::H256,
                        pub digest: runtime_types::sp_runtime::generic::digest::Digest,
                        #[codec(skip)]
                        pub __subxt_unused_type_params: ::core::marker::PhantomData<_1>,
                    }
                }
                pub mod unchecked_extrinsic {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                    )]
                    pub struct UncheckedExtrinsic<_0, _1, _2, _3>(
                        pub ::std::vec::Vec<::core::primitive::u8>,
                        #[codec(skip)] pub ::core::marker::PhantomData<(_1, _0, _2, _3)>,
                    );
                }
            }
            pub mod multiaddress {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub enum MultiAddress<_0, _1> {
                    #[codec(index = 0)]
                    Id(_0),
                    #[codec(index = 1)]
                    Index(#[codec(compact)] _1),
                    #[codec(index = 2)]
                    Raw(::std::vec::Vec<::core::primitive::u8>),
                    #[codec(index = 3)]
                    Address32([::core::primitive::u8; 32usize]),
                    #[codec(index = 4)]
                    Address20([::core::primitive::u8; 20usize]),
                }
            }
            pub mod traits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug,
                )]
                pub struct BlakeTwo256;
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module {
                    index: ::core::primitive::u8,
                    error: ::core::primitive::u8,
                },
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 7)]
                Arithmetic(runtime_types::sp_runtime::ArithmeticError),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum MultiSignature {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Signature),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Signature),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Signature),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum MultiSigner {
                #[codec(index = 0)]
                Ed25519(runtime_types::sp_core::ed25519::Public),
                #[codec(index = 1)]
                Sr25519(runtime_types::sp_core::sr25519::Public),
                #[codec(index = 2)]
                Ecdsa(runtime_types::sp_core::ecdsa::Public),
            }
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub enum TokenError {
                #[codec(index = 0)]
                NoFunds,
                #[codec(index = 1)]
                WouldDie,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
            }
        }
        pub mod sp_session {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct MembershipProof {
                pub session: ::core::primitive::u32,
                pub trie_nodes: ::std::vec::Vec<::std::vec::Vec<::core::primitive::u8>>,
                pub validator_count: ::core::primitive::u32,
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(:: subxt :: codec :: Decode, :: subxt :: codec :: Encode, Clone, Debug)]
            pub struct RuntimeVersion {
                pub spec_name: ::std::string::String,
                pub impl_name: ::std::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis:
                    ::std::vec::Vec<([::core::primitive::u8; 8usize], ::core::primitive::u32)>,
                pub transaction_version: ::core::primitive::u32,
            }
        }
    }
    #[doc = r" The default error type returned when there is a runtime issue."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    impl ::subxt::HasModuleError for runtime_types::sp_runtime::DispatchError {
        fn module_error_data(&self) -> Option<::subxt::ModuleErrorData> {
            if let &Self::Module { index, error } = self {
                Some(::subxt::ModuleErrorData {
                    pallet_index: index,
                    error: [error, 0, 0, 0],
                })
            } else {
                None
            }
        }
    }
    pub struct RuntimeApi<T: ::subxt::Config, X> {
        pub client: ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
    }
    impl<T: ::subxt::Config, X> Clone for RuntimeApi<T, X> {
        fn clone(&self) -> Self {
            Self {
                client: self.client.clone(),
                marker: ::core::marker::PhantomData,
            }
        }
    }
    impl<T, X> ::core::convert::From<::subxt::Client<T>> for RuntimeApi<T, X>
    where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
    {
        fn from(client: ::subxt::Client<T>) -> Self {
            Self {
                client,
                marker: ::core::marker::PhantomData,
            }
        }
    }
    impl<'a, T, X> RuntimeApi<T, X>
    where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
    {
        pub fn validate_metadata(&'a self) -> Result<(), ::subxt::MetadataError> {
            let runtime_metadata_hash = {
                let locked_metadata = self.client.metadata();
                let metadata = locked_metadata.read();
                metadata.metadata_hash(&PALLETS)
            };
            if runtime_metadata_hash
                != [
                    104u8, 218u8, 176u8, 151u8, 90u8, 124u8, 50u8, 223u8, 133u8, 226u8, 54u8, 84u8,
                    52u8, 98u8, 160u8, 21u8, 122u8, 108u8, 143u8, 167u8, 223u8, 217u8, 141u8,
                    171u8, 181u8, 206u8, 240u8, 104u8, 106u8, 200u8, 218u8, 248u8,
                ]
            {
                Err(::subxt::MetadataError::IncompatibleMetadata)
            } else {
                Ok(())
            }
        }
        pub fn constants(&'a self) -> ConstantsApi<'a, T> {
            ConstantsApi {
                client: &self.client,
            }
        }
        pub fn storage(&'a self) -> StorageApi<'a, T> {
            StorageApi {
                client: &self.client,
            }
        }
        pub fn tx(&'a self) -> TransactionApi<'a, T, X> {
            TransactionApi {
                client: &self.client,
                marker: ::core::marker::PhantomData,
            }
        }
        pub fn events(&'a self) -> EventsApi<'a, T> {
            EventsApi {
                client: &self.client,
            }
        }
    }
    pub struct EventsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
    }
    impl<'a, T: ::subxt::Config> EventsApi<'a, T> {
        pub async fn at(
            &self,
            block_hash: T::Hash,
        ) -> Result<::subxt::events::Events<T, Event>, ::subxt::BasicError> {
            ::subxt::events::at::<T, Event>(self.client, block_hash).await
        }
        pub async fn subscribe(
            &self,
        ) -> Result<
            ::subxt::events::EventSubscription<'a, ::subxt::events::EventSub<T::Header>, T, Event>,
            ::subxt::BasicError,
        > {
            ::subxt::events::subscribe::<T, Event>(self.client).await
        }
        pub async fn subscribe_finalized(
            &self,
        ) -> Result<
            ::subxt::events::EventSubscription<
                'a,
                ::subxt::events::FinalizedEventSub<'a, T::Header>,
                T,
                Event,
            >,
            ::subxt::BasicError,
        > {
            ::subxt::events::subscribe_finalized::<T, Event>(self.client).await
        }
    }
    pub struct ConstantsApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
    }
    impl<'a, T: ::subxt::Config> ConstantsApi<'a, T> {
        pub fn system(&self) -> system::constants::ConstantsApi<'a, T> {
            system::constants::ConstantsApi::new(self.client)
        }
        pub fn babe(&self) -> babe::constants::ConstantsApi<'a, T> {
            babe::constants::ConstantsApi::new(self.client)
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi<'a, T> {
            timestamp::constants::ConstantsApi::new(self.client)
        }
        pub fn authorship(&self) -> authorship::constants::ConstantsApi<'a, T> {
            authorship::constants::ConstantsApi::new(self.client)
        }
        pub fn balances(&self) -> balances::constants::ConstantsApi<'a, T> {
            balances::constants::ConstantsApi::new(self.client)
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi<'a, T> {
            transaction_payment::constants::ConstantsApi::new(self.client)
        }
        pub fn octopus_appchain(&self) -> octopus_appchain::constants::ConstantsApi<'a, T> {
            octopus_appchain::constants::ConstantsApi::new(self.client)
        }
        pub fn octopus_lpos(&self) -> octopus_lpos::constants::ConstantsApi<'a, T> {
            octopus_lpos::constants::ConstantsApi::new(self.client)
        }
        pub fn octopus_upward_messages(
            &self,
        ) -> octopus_upward_messages::constants::ConstantsApi<'a, T> {
            octopus_upward_messages::constants::ConstantsApi::new(self.client)
        }
        pub fn grandpa(&self) -> grandpa::constants::ConstantsApi<'a, T> {
            grandpa::constants::ConstantsApi::new(self.client)
        }
        pub fn im_online(&self) -> im_online::constants::ConstantsApi<'a, T> {
            im_online::constants::ConstantsApi::new(self.client)
        }
        pub fn assets(&self) -> assets::constants::ConstantsApi<'a, T> {
            assets::constants::ConstantsApi::new(self.client)
        }
        pub fn uniques(&self) -> uniques::constants::ConstantsApi<'a, T> {
            uniques::constants::ConstantsApi::new(self.client)
        }
        pub fn multisig(&self) -> multisig::constants::ConstantsApi<'a, T> {
            multisig::constants::ConstantsApi::new(self.client)
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi<'a, T> {
            utility::constants::ConstantsApi::new(self.client)
        }
        pub fn deip_proposal(&self) -> deip_proposal::constants::ConstantsApi<'a, T> {
            deip_proposal::constants::ConstantsApi::new(self.client)
        }
        pub fn deip_dao(&self) -> deip_dao::constants::ConstantsApi<'a, T> {
            deip_dao::constants::ConstantsApi::new(self.client)
        }
        pub fn deip_vesting(&self) -> deip_vesting::constants::ConstantsApi<'a, T> {
            deip_vesting::constants::ConstantsApi::new(self.client)
        }
        pub fn deip_investment_opportunity(
            &self,
        ) -> deip_investment_opportunity::constants::ConstantsApi<'a, T> {
            deip_investment_opportunity::constants::ConstantsApi::new(self.client)
        }
    }
    pub struct StorageApi<'a, T: ::subxt::Config> {
        client: &'a ::subxt::Client<T>,
    }
    impl<'a, T> StorageApi<'a, T>
    where
        T: ::subxt::Config,
    {
        pub fn system(&self) -> system::storage::StorageApi<'a, T> {
            system::storage::StorageApi::new(self.client)
        }
        pub fn babe(&self) -> babe::storage::StorageApi<'a, T> {
            babe::storage::StorageApi::new(self.client)
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi<'a, T> {
            timestamp::storage::StorageApi::new(self.client)
        }
        pub fn authorship(&self) -> authorship::storage::StorageApi<'a, T> {
            authorship::storage::StorageApi::new(self.client)
        }
        pub fn balances(&self) -> balances::storage::StorageApi<'a, T> {
            balances::storage::StorageApi::new(self.client)
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi<'a, T> {
            transaction_payment::storage::StorageApi::new(self.client)
        }
        pub fn octopus_appchain(&self) -> octopus_appchain::storage::StorageApi<'a, T> {
            octopus_appchain::storage::StorageApi::new(self.client)
        }
        pub fn octopus_lpos(&self) -> octopus_lpos::storage::StorageApi<'a, T> {
            octopus_lpos::storage::StorageApi::new(self.client)
        }
        pub fn octopus_upward_messages(
            &self,
        ) -> octopus_upward_messages::storage::StorageApi<'a, T> {
            octopus_upward_messages::storage::StorageApi::new(self.client)
        }
        pub fn session(&self) -> session::storage::StorageApi<'a, T> {
            session::storage::StorageApi::new(self.client)
        }
        pub fn grandpa(&self) -> grandpa::storage::StorageApi<'a, T> {
            grandpa::storage::StorageApi::new(self.client)
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi<'a, T> {
            sudo::storage::StorageApi::new(self.client)
        }
        pub fn im_online(&self) -> im_online::storage::StorageApi<'a, T> {
            im_online::storage::StorageApi::new(self.client)
        }
        pub fn randomness_collective_flip(
            &self,
        ) -> randomness_collective_flip::storage::StorageApi<'a, T> {
            randomness_collective_flip::storage::StorageApi::new(self.client)
        }
        pub fn assets(&self) -> assets::storage::StorageApi<'a, T> {
            assets::storage::StorageApi::new(self.client)
        }
        pub fn uniques(&self) -> uniques::storage::StorageApi<'a, T> {
            uniques::storage::StorageApi::new(self.client)
        }
        pub fn mmr(&self) -> mmr::storage::StorageApi<'a, T> {
            mmr::storage::StorageApi::new(self.client)
        }
        pub fn mmr_leaf(&self) -> mmr_leaf::storage::StorageApi<'a, T> {
            mmr_leaf::storage::StorageApi::new(self.client)
        }
        pub fn multisig(&self) -> multisig::storage::StorageApi<'a, T> {
            multisig::storage::StorageApi::new(self.client)
        }
        pub fn deip(&self) -> deip::storage::StorageApi<'a, T> {
            deip::storage::StorageApi::new(self.client)
        }
        pub fn deip_proposal(&self) -> deip_proposal::storage::StorageApi<'a, T> {
            deip_proposal::storage::StorageApi::new(self.client)
        }
        pub fn deip_dao(&self) -> deip_dao::storage::StorageApi<'a, T> {
            deip_dao::storage::StorageApi::new(self.client)
        }
        pub fn deip_portal(&self) -> deip_portal::storage::StorageApi<'a, T> {
            deip_portal::storage::StorageApi::new(self.client)
        }
        pub fn deip_vesting(&self) -> deip_vesting::storage::StorageApi<'a, T> {
            deip_vesting::storage::StorageApi::new(self.client)
        }
        pub fn deip_ecosystem_fund(&self) -> deip_ecosystem_fund::storage::StorageApi<'a, T> {
            deip_ecosystem_fund::storage::StorageApi::new(self.client)
        }
        pub fn deip_investment_opportunity(
            &self,
        ) -> deip_investment_opportunity::storage::StorageApi<'a, T> {
            deip_investment_opportunity::storage::StorageApi::new(self.client)
        }
        pub fn deip_fnft(&self) -> deip_fnft::storage::StorageApi<'a, T> {
            deip_fnft::storage::StorageApi::new(self.client)
        }
        pub fn deip_assets(&self) -> deip_assets::storage::StorageApi<'a, T> {
            deip_assets::storage::StorageApi::new(self.client)
        }
        pub fn deip_uniques(&self) -> deip_uniques::storage::StorageApi<'a, T> {
            deip_uniques::storage::StorageApi::new(self.client)
        }
    }
    pub struct TransactionApi<'a, T: ::subxt::Config, X> {
        client: &'a ::subxt::Client<T>,
        marker: ::core::marker::PhantomData<X>,
    }
    impl<'a, T, X> TransactionApi<'a, T, X>
    where
        T: ::subxt::Config,
        X: ::subxt::extrinsic::ExtrinsicParams<T>,
    {
        pub fn system(&self) -> system::calls::TransactionApi<'a, T, X> {
            system::calls::TransactionApi::new(self.client)
        }
        pub fn babe(&self) -> babe::calls::TransactionApi<'a, T, X> {
            babe::calls::TransactionApi::new(self.client)
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi<'a, T, X> {
            timestamp::calls::TransactionApi::new(self.client)
        }
        pub fn authorship(&self) -> authorship::calls::TransactionApi<'a, T, X> {
            authorship::calls::TransactionApi::new(self.client)
        }
        pub fn balances(&self) -> balances::calls::TransactionApi<'a, T, X> {
            balances::calls::TransactionApi::new(self.client)
        }
        pub fn octopus_appchain(&self) -> octopus_appchain::calls::TransactionApi<'a, T, X> {
            octopus_appchain::calls::TransactionApi::new(self.client)
        }
        pub fn octopus_lpos(&self) -> octopus_lpos::calls::TransactionApi<'a, T, X> {
            octopus_lpos::calls::TransactionApi::new(self.client)
        }
        pub fn octopus_upward_messages(
            &self,
        ) -> octopus_upward_messages::calls::TransactionApi<'a, T, X> {
            octopus_upward_messages::calls::TransactionApi::new(self.client)
        }
        pub fn session(&self) -> session::calls::TransactionApi<'a, T, X> {
            session::calls::TransactionApi::new(self.client)
        }
        pub fn grandpa(&self) -> grandpa::calls::TransactionApi<'a, T, X> {
            grandpa::calls::TransactionApi::new(self.client)
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi<'a, T, X> {
            sudo::calls::TransactionApi::new(self.client)
        }
        pub fn im_online(&self) -> im_online::calls::TransactionApi<'a, T, X> {
            im_online::calls::TransactionApi::new(self.client)
        }
        pub fn multisig(&self) -> multisig::calls::TransactionApi<'a, T, X> {
            multisig::calls::TransactionApi::new(self.client)
        }
        pub fn utility(&self) -> utility::calls::TransactionApi<'a, T, X> {
            utility::calls::TransactionApi::new(self.client)
        }
        pub fn deip(&self) -> deip::calls::TransactionApi<'a, T, X> {
            deip::calls::TransactionApi::new(self.client)
        }
        pub fn deip_proposal(&self) -> deip_proposal::calls::TransactionApi<'a, T, X> {
            deip_proposal::calls::TransactionApi::new(self.client)
        }
        pub fn deip_dao(&self) -> deip_dao::calls::TransactionApi<'a, T, X> {
            deip_dao::calls::TransactionApi::new(self.client)
        }
        pub fn deip_portal(&self) -> deip_portal::calls::TransactionApi<'a, T, X> {
            deip_portal::calls::TransactionApi::new(self.client)
        }
        pub fn deip_vesting(&self) -> deip_vesting::calls::TransactionApi<'a, T, X> {
            deip_vesting::calls::TransactionApi::new(self.client)
        }
        pub fn deip_investment_opportunity(
            &self,
        ) -> deip_investment_opportunity::calls::TransactionApi<'a, T, X> {
            deip_investment_opportunity::calls::TransactionApi::new(self.client)
        }
        pub fn deip_fnft(&self) -> deip_fnft::calls::TransactionApi<'a, T, X> {
            deip_fnft::calls::TransactionApi::new(self.client)
        }
    }
}
